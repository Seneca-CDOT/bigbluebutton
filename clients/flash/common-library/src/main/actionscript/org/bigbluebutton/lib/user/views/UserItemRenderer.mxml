<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:common="org.bigbluebutton.lib.common.views.*"
				width="100%"
				click="onClick()"
				keyUp="onKeyUp()"
				styleName="participantItem">
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>

	<fx:Metadata>
		[Style(name="iconSize", inherit="no", type="Number")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import org.bigbluebutton.lib.user.events.UserItemSelectedEvent;
			import org.bigbluebutton.lib.user.models.User;
			import org.bigbluebutton.lib.user.utils.UserUtils;
			
			private function onClick():void {
				sendSelectedEvent();
			}
			
			private function onKeyUp():void {
				sendSelectedEvent();
			}
			
			private function sendSelectedEvent():void {
				if (currentState == "selected") {
					dispatchEvent(new UserItemSelectedEvent(data as User, localToGlobal(new Point()), width, height));
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				wrapperGroup.padding = getStyle("padding");
				wrapperGroup.gap = getStyle("padding") / 4;
				
				labelDisplay.setStyle("paddingLeft", getStyle("padding"));
				labelDisplay.setStyle("paddingRight", getStyle("padding"));
				
				cameraIcon.text = cameraIcon.getStyle("icon");
				cameraIcon.setStyle("fontSize", getStyle("iconSize"));
				
				audioIcon.text = audioIcon.getStyle("icon");
				audioIcon.setStyle("fontSize", getStyle("iconSize"));
				
				lockIcon.text = lockIcon.getStyle("icon");
				lockIcon.setStyle("fontSize", getStyle("iconSize"));
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			override public function set data(obj:Object):void {
				super.data = obj;
				if (obj) {
					cameraIcon.visible = obj.hasStream;
					
					if (obj.voiceJoined) {
						if (obj.muted) {
							audioIcon.styleName = "icon icon-audio-off";
						} else if (obj.talking) {
							audioIcon.styleName = "icon icon-audio-close";
						} else {
							audioIcon.styleName = "icon icon-audio-on";
						}
					} else if (obj.listenOnly) {
						audioIcon.styleName = "icon icon-listen";
					} else {
						audioIcon.styleName = "";
					}
					
					lockIcon.visible = obj.locked;
					
					if (obj.me) {
						labelDisplay.text = obj.name + " " + "(you)"; //resourceManager.getString('resources', 'userDetail.you');
					} else {
						labelDisplay.text = obj.name;
					}
					
					participantIcon.displayInitials = UserUtils.getInitials(obj.name);
					
					if (obj.presenter) {
						subLabelDisplay.visible = subLabelDisplay.includeInLayout = true;
						subLabelDisplay.text = "Presenter"; // resourceManager.getString('resources', 'participants.status.presenter');
					} else {
						subLabelDisplay.visible = subLabelDisplay.includeInLayout = false;
					}
				}
			}
		]]>
	</fx:Script>
	<s:VGroup id="wrapperGroup"
			  width="100%">
		<s:HGroup width="100%"
				  verticalAlign="middle">

			<common:ParticipantIcon id="participantIcon" />

			<s:Label id="labelDisplay"
					 width="100%"
					 styleName="participantTitle" />
			<s:Label id="cameraIcon"
					 styleName="icon icon-video" />
			<s:Label id="audioIcon"
					 styleName="icon icon-audio-on" />
			<s:Label id="lockIcon"
					 styleName="icon icon-lock" />
		</s:HGroup>
		<s:Label id="subLabelDisplay"
				 styleName="participantStatus"
				 paddingLeft="{labelDisplay.x + getStyle('padding')}" />
	</s:VGroup>

</s:ItemRenderer>
