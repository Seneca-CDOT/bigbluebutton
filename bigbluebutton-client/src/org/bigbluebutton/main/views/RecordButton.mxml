<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Button xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:views="org.bigbluebutton.main.views.*"
	styleName="recordButtonStyleNormal"
	click="confirmChangeRecordingStatus()"
	height="30"
	enabled="false"
	creationComplete="onCreationComplete()"
	visible="true"
	includeInLayout="true"
	mouseOver="onRecordButtonMouseOver(event)"
	mouseOut="onRecordButtonMouseOut(event)" >

	<fx:Declarations>
		<mate:Listener type="{BBBEvent.CHANGE_RECORDING_STATUS}" method="onRecordingStatusChanged" />
		<mate:Listener type="{FlashJoinedVoiceConferenceEvent.JOINED_VOICE_CONFERENCE}" method="handleFlashJoinedVoiceConference" />
		<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_STARTED}" method="handleWebRTCCallStarted" />
		<mate:Listener type="{ChangeMyRole.CHANGE_MY_ROLE_EVENT}" method="refreshRole" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.controls.Alert;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.PopUpUtil;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.model.LiveMeeting;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.model.options.LayoutOptions;
			import org.bigbluebutton.main.model.users.events.ChangeMyRole;
			import org.bigbluebutton.modules.phone.events.FlashJoinedVoiceConferenceEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCCallEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(RecordButton);

			private var firstAudioJoin:Boolean = true;
			private var layoutOptions:LayoutOptions = null;
			
			private function onCreationComplete():void {
				ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
			}

			private function confirmChangeRecordingStatus():void {
				var event:BBBEvent = new BBBEvent(BBBEvent.OPEN_RECORD_WINDOW);
				event.payload.remote = false;
				event.payload.recording = !LiveMeeting.inst().meetingStatus.isRecording;
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(event);
			}

			private function updateButton(recording:Boolean):void {
				this.selected = recording;

				resourcesChanged();

				if (LiveMeeting.inst().meeting.recorded) {
					this.enabled = UsersUtil.amIModerator() 
						&& LiveMeeting.inst().meeting.allowStartStopRecording;
				}
				
				if (!this.enabled) {
					PopUpUtil.removePopUp(RecordWindow);
				}
			}

			private function onRecordingStatusChanged(event:BBBEvent):void {
				if (event.payload.remote) {
					updateButton(event.payload.recording);

					LOGGER.debug("RecordButton:onRecordingStatusChanged changing record status to {0}", [event.payload.recording]);
				}
			}

			private function handleFlashJoinedVoiceConference(e:FlashJoinedVoiceConferenceEvent):void {
				showRecordingNotification();
			}
			
			private function handleWebRTCCallStarted(e:WebRTCCallEvent):void {
				showRecordingNotification();
			}
			
			private function showRecordingNotification():void {
				if (firstAudioJoin && this.visible && !this.selected 
						&& getLayoutOptions().showRecordingNotification
						&& UsersUtil.amIModerator()
						&& LiveMeeting.inst().meeting.allowStartStopRecording
						&& this.enabled) {
					var alert:Alert = Alert.show(ResourceUtil.getInstance().getString("bbb.mainToolbar.recordBtn.notification.message1") + "\n\n" + ResourceUtil.getInstance().getString("bbb.mainToolbar.recordBtn.notification.message2"), ResourceUtil.getInstance().getString("bbb.mainToolbar.recordBtn.notification.title"), Alert.OK, this);
					// we need to set transparency duration to avoid the blur effect when two alerts are displayed sequentially
					alert.setStyle("modalTransparencyDuration", 250);
					alert.titleIcon = getStyle('iconRecordReminder');
					
          // Reach out to MainAppShell to set position of alert window.
					var newX:Number = this.parent.parent.width * 0.65;
					var newY:Number = this.y + this.height + 5;
					
					alert.validateNow();
					alert.move(newX, newY);
					
					firstAudioJoin = false;
				}
			}
			
			private function getLayoutOptions() : LayoutOptions {
				if (layoutOptions == null) {
					layoutOptions = Options.getOptions(LayoutOptions) as LayoutOptions;
				}
				return layoutOptions;
			}
			
			private function onRecordButtonMouseOver(event:MouseEvent):void {
				if (UsersUtil.amIModerator() && LiveMeeting.inst().meeting.recorded) {
					this.styleName = this.selected? "recordButtonStyleStop": "recordButtonStyleStart";
				}
			}

			private function onRecordButtonMouseOut(event:MouseEvent):void {
				if (UsersUtil.amIModerator() && LiveMeeting.inst().meeting.recorded) {
					this.styleName = this.selected? "recordButtonStyleStart": "recordButtonStyleNormal";
				}
			}

			private function updateToolTip():void {
				if (LiveMeeting.inst().meeting.recorded) {
					if (UsersUtil.amIModerator()) {
						if (LiveMeeting.inst().meeting.allowStartStopRecording) {
							if (this.selected) {
								this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.stop');
							} else {
								this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.start');
							}
						} else {
							this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.wontInterrupt');
						}
					} else {
						if (this.selected) {
							this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.recording');
						} else {
							this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.onlyModerators');
						}
					}
				} else {
					if (UsersUtil.amIModerator()) {
						if (LiveMeeting.inst().meeting.metadata.hasOwnProperty("wont-record-message")) {
							this.toolTip = LiveMeeting.inst().meeting.metadata["wont-record-message"];
						} else {
							this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.wontRecord');
						}
					} else {
						this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.wontRecord');
					}
				}
			}

			override protected function resourcesChanged():void{
				super.resourcesChanged();

				this.styleName = this.selected? "recordButtonStyleStart": "recordButtonStyleNormal";

				updateToolTip();
			}

			private function localeChanged(e:Event):void{
				resourcesChanged();
			}

			private function refreshRole(e:ChangeMyRole):void {
				updateButton(this.selected);
			}
		]]>
	</fx:Script>
</mx:Button>
