<?xml version="1.0" encoding="utf-8"?>

<!--
BigBlueButton open source conferencing system - http://www.bigbluebutton.org

Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).

BigBlueButton is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2.1 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

$Id: $
-->

<mx:TitleWindow xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:fx="http://ns.adobe.com/mxml/2009"
                title="{ResourceUtil.getInstance().getString('bbb.guests.title')}" showCloseButton="false" creationComplete="init()"
                x="0" y="0" layout="vertical" width="320" horizontalAlign="center"
                xmlns:mate="http://mate.asfusion.com/" >
    
    <fx:Declarations>
        <mate:Listener type="{BBBEvent.ACCEPT_ALL_WAITING_GUESTS}" method="acceptAllWaitingGuests" />
        <mate:Listener type="{BBBEvent.DENY_ALL_WAITING_GUESTS}" method="denyAllWaitingGuests" />
        <mate:Listener type="{RemoveGuestFromViewEvent.REMOVE_GUEST}" receive="{remove(event.userid)}" />
    </fx:Declarations>
    
    <fx:Script>
        <![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import org.bigbluebutton.core.PopUpUtil;
			import org.bigbluebutton.core.model.LiveMeeting;
			import org.bigbluebutton.core.model.users.GuestWaiting;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.RemoveGuestEvent;
			import org.bigbluebutton.main.events.RemoveGuestFromViewEvent;
			import org.bigbluebutton.main.events.ResponseModeratorEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
            
            private var guestButtons:Object = new Object();
            [Bindable] private var numberOfGuests:Number = 0;
            private var dispatcher:Dispatcher = new Dispatcher();
            
            public function init():void {
                //Uncomment this line to make titlewindow undraggable
                //this.isPopUp = false;
            }
            
            public function refreshGuestView():void {
                var _guests: Array = LiveMeeting.inst().guestsWaiting.getGuests();
                for (var i:int = 0; i < _guests.length; i++) {
                    var _guest: GuestWaiting = _guests[i] as GuestWaiting;
                    if(guestButtons[_guest.intId] == null) {
                        var guestItem:GuestItem = new GuestItem();
                        guestItem.setUser(_guest.name, _guest.intId);
                        guestListBox.addChild(guestItem);
                        guestButtons[_guest.intId] = guestItem;
                        numberOfGuests++;
                    }
                }
                this.visible = true;
            }
            
            public function sendResponseToAllGuests(resp:Boolean):void {
                removeAllGuests();
                var respCommand:ResponseModeratorEvent = new ResponseModeratorEvent(ResponseModeratorEvent.RESPONSE_ALL);
                respCommand.resp = resp;
                dispatcher.dispatchEvent(respCommand);
            }
            
            public function sendResponseToAllGuestsCheckBox(resp:Boolean):void {
                if(rememberCheckBox.selected) {
                    var event:BBBEvent = new BBBEvent(BBBEvent.BROADCAST_GUEST_POLICY);
                    if (resp) {
                        event.payload['guestPolicy'] = "ALWAYS_ACCEPT";
                    } else {
                        event.payload['guestPolicy'] = "ALWAYS_DENY";
                    }
                    dispatcher.dispatchEvent(event);
                }
                sendResponseToAllGuests(resp);
            }
            
            public function acceptAllWaitingGuests(event:BBBEvent):void {
                sendResponseToAllGuests(true);
            }
            
            public function denyAllWaitingGuests(event:BBBEvent):void {
                sendResponseToAllGuests(false);
            }
            
            public function removeAllGuests():void {
                var removeGuestEvent:RemoveGuestEvent = new RemoveGuestEvent(RemoveGuestEvent.REMOVE_ALL);
                dispatcher.dispatchEvent(removeGuestEvent);
                
                closeWindow();
            }
            
            public function remove(userid:String):void {
                if (guestButtons[userid] != null) {
                    numberOfGuests = numberOfGuests  - 1;
                    guestListBox.removeChild(guestButtons[userid]);
                    delete guestButtons[userid];
                    
                    var removeGuestEvent:RemoveGuestEvent = new RemoveGuestEvent();
                    removeGuestEvent.userid = userid;
                    dispatcher.dispatchEvent(removeGuestEvent);
                    
                    if (!hasGuest()) {
                        closeWindow();
                    }
                }
            }
            
            public function hasGuest():Boolean {
                return numberOfGuests > 0;
            }
            
            public function closeWindow():void {
                this.visible = false;
				PopUpUtil.unlockPosition(this);
				PopUpUtil.removePopUp(this);
            }
            
        ]]>
    </fx:Script>
    <mx:Label text="{numberOfGuests > 1? ResourceUtil.getInstance().getString('bbb.guests.message.plural', [String(numberOfGuests)]): ResourceUtil.getInstance().getString('bbb.guests.message.singular', [String(numberOfGuests)])}"/>
    <mx:HRule width="100%"/>
    <mx:Button id="allowEveryoneBtn" label="{ResourceUtil.getInstance().getString('bbb.guests.allowEveryoneBtn.text')}" width="70%" click="sendResponseToAllGuestsCheckBox(true)" toolTip="{allowEveryoneBtn.label}"/>
    <mx:Button id="denyEveryoneBtn" label="{ResourceUtil.getInstance().getString('bbb.guests.denyEveryoneBtn.text')}" width="70%" click="sendResponseToAllGuestsCheckBox(false)" toolTip="{denyEveryoneBtn.label}"/>
    <mx:CheckBox id="rememberCheckBox" label="{ResourceUtil.getInstance().getString('bbb.guests.rememberAction.text')}"/>
    <mx:HRule width="100%"/>
    <mx:VBox id="guestListBox" width="100%" height="100%" maxHeight="200" paddingLeft="10" paddingRight="10" paddingBottom="2" />
    
</mx:TitleWindow>
