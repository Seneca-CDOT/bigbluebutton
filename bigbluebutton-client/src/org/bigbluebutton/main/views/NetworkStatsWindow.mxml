<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<CustomMdiWindow xmlns="org.bigbluebutton.common.*"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:mate="http://mate.asfusion.com/"
		title="{ResourceUtil.getInstance().getString('bbb.bwmonitor.title')}"
		creationComplete="onCreationComplete()"
		resizable="false"
		showCloseButton="true"
		implements="org.bigbluebutton.common.IBbbModuleWindow"
		width="210" height="224" minWidth="0"
		resize="onResize()">

	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.utils.Timer;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.core.services.BandwidthMonitor;
			import org.bigbluebutton.main.model.NetworkStatsData;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(NetworkStatsWindow);

			private var _globalDispatcher:Dispatcher = new Dispatcher();
			private var _updateTimer:Timer = new Timer(1000);

			private function onCreationComplete():void {
				this.windowControls.maximizeRestoreBtn.visible = false;
				this.windowControls.minimizeBtn.visible = false;
				
				_updateTimer.addEventListener(TimerEvent.TIMER, timerHandler);
				_updateTimer.start();

				runBandwidthMeasurement();
			}
			
			private function timerHandler(e:TimerEvent):void {
				labelCurrentDownload.text = NetworkStatsData.getInstance().formattedCurrentConsumedDownBW;
				labelTotalDownload.text = NetworkStatsData.getInstance().formattedTotalConsumedDownBW;
				labelAvailableDownload.text = NetworkStatsData.getInstance().formattedMeasuredDownBW;
				labelDownloadLatency.text = NetworkStatsData.getInstance().formattedMeasuredDownLatency;

				labelCurrentUpload.text = NetworkStatsData.getInstance().formattedCurrentConsumedUpBW;
				labelTotalUpload.text = NetworkStatsData.getInstance().formattedTotalConsumedUpBW;
				labelAvailableUpload.text = NetworkStatsData.getInstance().formattedMeasuredUpBW;
				labelUploadLatency.text = NetworkStatsData.getInstance().formattedMeasuredUpLatency;
			}

			public function getPrefferedPosition():String {
				return MainCanvas.ABSOLUTE;
			}

			private function onResize():void {}

			private function runBandwidthMeasurement():void {
				BandwidthMonitor.getInstance().checkClientToServer();
				BandwidthMonitor.getInstance().checkServerToClient();
			}

		]]>
	</fx:Script>

	<mx:VBox verticalGap="0" width="100%" height="100%"
			 paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"
			 verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:HBox backgroundColor="haloOrange" width="100%" horizontalAlign="center"><mx:Label fontWeight="bold" text="{ResourceUtil.getInstance().getString('bbb.bwmonitor.upload')}"/></mx:HBox>
		<mx:HBox visible="false" includeInLayout="false" horizontalGap="0"><mx:Label text="{ResourceUtil.getInstance().getString('bbb.bwmonitor.total')}: "/><mx:Label id="labelTotalUpload" fontWeight="bold" text="-"/></mx:HBox>
		<mx:HBox horizontalGap="0"><mx:Label text="{ResourceUtil.getInstance().getString('bbb.bwmonitor.current')}: "/><mx:Label id="labelCurrentUpload" fontWeight="bold" text="-"/></mx:HBox>
		<mx:HBox visible="false" includeInLayout="false" horizontalGap="0"><mx:Label text="{ResourceUtil.getInstance().getString('bbb.bwmonitor.available')}: "/><mx:Label id="labelAvailableUpload" fontWeight="bold" text="-"/></mx:HBox>
		<mx:HBox horizontalGap="0"><mx:Label text="{ResourceUtil.getInstance().getString('bbb.bwmonitor.latency')}: "/><mx:Label id="labelUploadLatency" fontWeight="bold" text="-"/></mx:HBox>
		<mx:HBox backgroundColor="haloOrange" width="100%" horizontalAlign="center"><mx:Label fontWeight="bold" text="{ResourceUtil.getInstance().getString('bbb.bwmonitor.download')}"/></mx:HBox>
		<mx:HBox visible="false" includeInLayout="false" horizontalGap="0"><mx:Label text="{ResourceUtil.getInstance().getString('bbb.bwmonitor.total')}: "/><mx:Label id="labelTotalDownload" fontWeight="bold" text="-"/></mx:HBox>
		<mx:HBox horizontalGap="0"><mx:Label text="{ResourceUtil.getInstance().getString('bbb.bwmonitor.current')}: "/><mx:Label id="labelCurrentDownload" fontWeight="bold" text="-"/></mx:HBox>
		<mx:HBox visible="false" includeInLayout="false" horizontalGap="0"><mx:Label text="{ResourceUtil.getInstance().getString('bbb.bwmonitor.available')}: "/><mx:Label id="labelAvailableDownload" fontWeight="bold" text="-"/></mx:HBox>
		<mx:HBox horizontalGap="0"><mx:Label text="{ResourceUtil.getInstance().getString('bbb.bwmonitor.latency')}: "/><mx:Label id="labelDownloadLatency" fontWeight="bold" text="-"/></mx:HBox>
		<mx:HBox horizontalGap="0" width="100%" ><mx:Spacer width="100%"/><mx:Button id="labelRefresh" icon="{getStyle('iconRefresh')}" click="runBandwidthMeasurement()" /></mx:HBox>
	</mx:VBox>

</CustomMdiWindow>
