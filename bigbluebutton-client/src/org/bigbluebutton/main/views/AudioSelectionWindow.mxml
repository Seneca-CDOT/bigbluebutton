<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:TitleWindow xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:mate="http://mate.asfusion.com/"
				xmlns:common="org.bigbluebutton.common.*"
				implements="org.bigbluebutton.common.IKeyboardClose"
				show="this.setFocus()"
				initialize="init()"
				layout="absolute"
				verticalScrollPolicy="off"
				horizontalScrollPolicy="off"
				showCloseButton="false">

	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.controls.Alert;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.PopUpUtil;
			import org.bigbluebutton.core.model.LiveMeeting;
			import org.bigbluebutton.main.api.JSAPI;
			import org.bigbluebutton.modules.phone.events.AudioSelectionWindowEvent;
			import org.bigbluebutton.modules.phone.events.JoinVoiceConferenceCommand;
			import org.bigbluebutton.modules.phone.events.UseFlashModeCommand;
			import org.bigbluebutton.modules.phone.models.PhoneOptions;
			import org.bigbluebutton.util.browser.BrowserCheck;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private static const LOGGER:ILogger = getClassLogger(AudioSelectionWindow);      

			private var phoneOptions:PhoneOptions;

			private function init():void {
				phoneOptions = Options.getOptions(PhoneOptions) as PhoneOptions;

				if (!phoneOptions.listenOnlyMode)
					btnListenOnly.enabled = false;

				if (phoneOptions.showPhoneOption) {
					var dialNumber:String = LiveMeeting.inst().meeting.dialNumber;
					var voiceConf:String = LiveMeeting.inst().meeting.voiceConf;

					txtPhone.text = ResourceUtil.getInstance().getString('bbb.audioSelection.txtPhone.text', [dialNumber, voiceConf]);
				} else {
					vboxPhone.visible = vboxPhone.includeInLayout = false;
					vboxMic.percentWidth = 50;
					vboxListen.percentWidth = 50;
				}

				if (!JSAPI.getInstance().isWebRTCAvailable()) {
					audioBrowserHint.visible = audioBrowserHint.includeInLayout = true;
				}

				// If Puffin browser is deteted and version is less than 4.6
				if (BrowserCheck.isPuffinBelow46()) {
					vboxListen.percentWidth = 100;
				}
			}
			
			private function browserForcesHTTPS() : Boolean {
				var result : Boolean = !BrowserCheck.isHttps() && ((BrowserCheck.isChrome() && BrowserCheck.browserMajorVersion >= "60") || (BrowserCheck.isOpera() && BrowserCheck.browserMajorVersion >= "47"));
				return result;
			}

			private function onMicClick():void {
				LOGGER.debug("AudioSelectionWindow - Share Microphone Clicked");
				var dispatcher:Dispatcher = new Dispatcher();
				if (browserForcesHTTPS()) {
					Alert.show(ResourceUtil.getInstance().getString("bbb.micPermissions.message.browserhttp", [BrowserCheck.browserName]));
				} else if (BrowserCheck.isPuffin46AndAbove()) {
					dispatcher.dispatchEvent(new UseFlashModeCommand());
				} else {
					var command:JoinVoiceConferenceCommand = new JoinVoiceConferenceCommand();
					command.mic = true;
					dispatcher.dispatchEvent(command);
				}

				PopUpUtil.removePopUp(this);
			}
			
			private function onListenClick():void {
				LOGGER.debug("AudioSelectionWindow - Share Microphone Clicked");
				var dispatcher:Dispatcher = new Dispatcher();
				var command:JoinVoiceConferenceCommand = new JoinVoiceConferenceCommand();
				command.mic = false;
				dispatcher.dispatchEvent(command);
				
				PopUpUtil.removePopUp(this);
			}
			
			private function onCancelClicked():void {
				LOGGER.debug("AudioSelectionWindow - Close clicked");
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(new AudioSelectionWindowEvent(AudioSelectionWindowEvent.CLOSED_AUDIO_SELECTION, true));
				
				PopUpUtil.removePopUp(this);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<common:TabIndexer id="tabIndexer" startIndex="1" tabIndices="{[windowTitle, closeButton, btnMicrophone, btnListenOnly]}"/>
	</fx:Declarations>
	
	<mx:VBox width="100%" height="100%" paddingBottom="20" paddingLeft="80" paddingRight="80" paddingTop="15" horizontalAlign="center">
		<common:AdvancedLabel id="windowTitle"
							 text="{ResourceUtil.getInstance().getString('bbb.audioSelection.title')}"
							 styleName="titleWindowStyle"
							 maxWidth="{this.width - 40}" />
		<mx:Box width="100%" height="56"
				verticalScrollPolicy="off" horizontalScrollPolicy="off"
				visible="false" includeInLayout="false"
				id="audioBrowserHint" styleName="audioBroswerHintBoxStyle">
			<mx:Text width="100%" textAlign="center" text="{ResourceUtil.getInstance().getString('bbb.clientstatus.webrtc.message')}" styleName="audioBroswerHintTextStyle"/>
		</mx:Box>
		<mx:HBox width="100%" height="100%" styleName="audioSelectionsStyle">
			<mx:VBox id="vboxMic" width="30%" horizontalAlign="center" verticalAlign="middle">
				<mx:Button id="btnMicrophone" buttonMode="true" styleName="btnMicrophoneStyle" width="140" height="140"
						   click="onMicClick()"
						   toolTip="{ResourceUtil.getInstance().getString('bbb.audioSelection.btnMicrophone.label')}"
						   accessibilityName="{ResourceUtil.getInstance().getString('bbb.audioSelection.btnMicrophone.toolTip')}" />
				<mx:Label text="{ResourceUtil.getInstance().getString('bbb.audioSelection.btnMicrophone.label')}"
						  styleName="audioSubtitle" />
			</mx:VBox>
			<mx:VBox id="vboxListen" width="30%" horizontalAlign="center" verticalAlign="middle">
				<mx:Button id="btnListenOnly" width="140" height="140" buttonMode="true" styleName="btnListenOnlyStyle"
						   click="onListenClick()"
						   toolTip="{ResourceUtil.getInstance().getString('bbb.audioSelection.btnListenOnly.label')}"
						   accessibilityName="{ResourceUtil.getInstance().getString('bbb.audioSelection.btnListenOnly.toolTip')}" />
				<mx:Label text="{ResourceUtil.getInstance().getString('bbb.audioSelection.btnListenOnly.label')}"
						  styleName="audioSubtitle" />
			</mx:VBox>
			<mx:VBox id="vboxPhone" width="30%" horizontalAlign="center" verticalAlign="middle">
				<mx:Button id="btnPhone"
						   width="140"
						   height="140"
						   buttonMode="true"
						   styleName="btnPhoneStyle" />
				<mx:Text id="txtPhone" width="100%" />
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
	
	<mx:Button id="closeButton" click="onCancelClicked()" styleName="titleWindowCloseButton"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.micSettings.cancel')}"
			   right="10" top="15"
			   accessibilityName="{ResourceUtil.getInstance().getString('bbb.micSettings.cancel.toolTip')}" />

</mx:TitleWindow>
