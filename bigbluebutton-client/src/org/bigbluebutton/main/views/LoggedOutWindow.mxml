<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:TitleWindow xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:views="org.bigbluebutton.main.views.*"
				showCloseButton="false"
				creationComplete="init()"
				resize="resizeHandler(event)"
				verticalScrollPolicy="off"
				horizontalScrollPolicy="off"
				layout="vertical"
				y="86"
				width.logout="400"
				width.feedback="600">
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			import flash.net.URLLoader;
			import flash.net.URLRequest;
			import flash.net.URLRequestMethod;

			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;

			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.PopUpUtil;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.main.events.ExitApplicationEvent;
			import org.bigbluebutton.main.model.options.LayoutOptions;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(LoggedOutWindow);

			[Bindable]
			private var message:String;

			private var urlLoader:URLLoader;
			private var logoutReason:String;

			private function init():void {
				addEventListener(Event.CLOSE, onUserLoggedOutWindowClose);
			}

			private function callSignOut():void {
				if (currentState == "feedback" && starRating.rating > 0) {
					var logData:Object = new Object();
					logData.username = UsersUtil.getMyUsername();
					logData.userId = UsersUtil.getMyUserID();
					logData.meetingId = UsersUtil.getInternalMeetingID();
					logData.rating = starRating.rating;
					logData.comment = feedbackMsg.text;
					logData.reason = logoutReason;
					logData.extUserId = UsersUtil.getMyExternalUserID();
					logData.role = UsersUtil.getMyRole();
					logData.logCode = "user_feedback";
					LOGGER.info(JSON.stringify(logData));
				}

				var logoutURL:String = BBB.getSignoutURL();
				var request:URLRequest = new URLRequest(logoutURL);
				
				request.method = URLRequestMethod.GET;
				urlLoader = new URLLoader();
				// If the redirect value is set to false handleComplete will be triggered
				urlLoader.addEventListener(Event.COMPLETE, handleComplete);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, handleRedirectError);
				urlLoader.load(request);
			}

			private function exitApplication():void {
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(new ExitApplicationEvent(ExitApplicationEvent.EXIT_APPLICATION));
			}

			private function handleComplete(e:Event):void {
				PopUpUtil.removePopUp(this);
				exitApplication();
			}

			private function handleRedirectError(e:IOErrorEvent):void {
				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["logout"];
				logData.logCode = "logout_redirect_returned_error";
				LOGGER.error(JSON.stringify(logData));
				PopUpUtil.removePopUp(this);
				exitApplication();
			}

			private function onUserLoggedOutWindowClose(e:Event):void {
				PopUpUtil.removePopUp(this);
			}

			public function setReason(reason:String):void {
				logoutReason = reason;
				
				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["connection"];
				logData.logCode = "user_logged_out_reason_display";
				logData.reason = reason;
				LOGGER.info(JSON.stringify(logData));

				var layoutOptions:LayoutOptions = Options.getOptions(LayoutOptions) as LayoutOptions;
				if (layoutOptions.askForFeedbackOnLogout && !UsersUtil.isBreakout()) {
					currentState = "feedback";
				}

				switch (reason) {
					case ConnectionFailedEvent.APP_SHUTDOWN:
						message = ResourceUtil.getInstance().getString('bbb.logout.appshutdown');
						break;
					case ConnectionFailedEvent.ASYNC_ERROR:
						message = ResourceUtil.getInstance().getString('bbb.logout.asyncerror');
						break;
					case ConnectionFailedEvent.CONNECTION_CLOSED:
						message = ResourceUtil.getInstance().getString('bbb.logout.connectionclosed');
						break;
					case ConnectionFailedEvent.CONNECTION_FAILED:
						message = ResourceUtil.getInstance().getString('bbb.logout.connectionfailed');
						break;
					case ConnectionFailedEvent.CONNECTION_REJECTED:
						message = ResourceUtil.getInstance().getString('bbb.logout.rejected');
						break;
					case ConnectionFailedEvent.INVALID_APP:
						message = ResourceUtil.getInstance().getString('bbb.logout.invalidapp');
						break;
					case ConnectionFailedEvent.UNKNOWN_REASON:
						message = ResourceUtil.getInstance().getString('bbb.logout.unknown');
						break;
					case ConnectionFailedEvent.USER_EJECTED_FROM_MEETING:
						message = ResourceUtil.getInstance().getString('bbb.logout.ejectedFromMeeting');
						break;
					case ConnectionFailedEvent.USER_LOGGED_OUT:
						message = ResourceUtil.getInstance().getString('bbb.logout.usercommand');
						break;
				}
				if (message && UsersUtil.isBreakout()) {
					message += "\n" + ResourceUtil.getInstance().getString('bbb.logour.breakoutRoomClose');
				}
			}

			protected function resizeHandler(event:ResizeEvent):void {
				PopUpManager.centerPopUp(this);
			}
		]]>
	</fx:Script>

	<mx:states>
		<mx:State name="logout" />
		<mx:State name="feedback" />
	</mx:states>
	<mx:VBox width="100%"
			 height="100%"
			 styleName="loggedOutContainer"
			 horizontalAlign="center">
		<mx:Text text="{message}"
				 styleName.logout="logoutTitleWindowStyle"
				 styleName.feedback="logoutTitle" />
		<mx:VBox id="titleBox"
				 includeIn="feedback"
				 styleName="logoutRatingBox">
			<mx:HRule width="550"
					  height="30"
					  styleName="logoutRule" />
			<mx:Label text="{ResourceUtil.getInstance().getString('bbb.logout.feedback.label')}"
					  styleName="logoutSubTitle" />
			<views:StarRating id="starRating" />
			<mx:VBox width="350"
					 verticalAlign="middle"
					 horizontalAlign="center"
					 visible="{starRating.rating > 0}"
					 includeInLayout="{starRating.rating > 0}"
					 styleName="logoutFeedbackHintBoxStyle">
				<mx:Text width="100%"
						 textAlign="center"
						 selectable="false"
						 text="{ResourceUtil.getInstance().getString('bbb.logout.feedback.hint')}"
						 styleName="logoutFeedbackHint" />
				<mx:TextArea id="feedbackMsg"
							 maxChars="512"
							 width="100%"
							 height="90" />
			</mx:VBox>
			<mx:HRule width="550"
					  height="30"
					  styleName="logoutRule" />
		</mx:VBox>
		<mx:Button id="okBtn"
				   styleName="mainActionButton"
				   label="{ResourceUtil.getInstance().getString('bbb.logout.button.label')}"
				   click="callSignOut()" />
	</mx:VBox>
</mx:TitleWindow>
