<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:TitleWindow xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:mate="http://mate.asfusion.com/"
				xmlns:common="org.bigbluebutton.common.*"
				width="600" height="380"
				creationComplete="onCreationComplete()"
				showCloseButton="false">
	
	<fx:Declarations>
		<mate:Listener type="{WebRTCEchoTestStartedEvent.WEBRTC_ECHO_TEST_STARTED}" method="handleWebRTCEchoTestStartedEvent" />
		<mate:Listener type="{WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_ENDED}" method="handleWebRTCEchoTestEndedEvent" />
		<mate:Listener type="{WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_FAILED}" method="handleWebRTCEchoTestFailedEvent" />
		<mate:Listener type="{WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_WAITING_FOR_ICE}" method="handleWebRTCEchoTestWaitingForICEEvent" />
		<mate:Listener type="{WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_TRANSFERRING}" method="handleWebRTCEchoTestTransferringEvent" />
		<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_CONNECTING}" method="handleWebRTCCallConnectingEvent" />
		<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_FAILED}" method="handleWebRTCCallFailedEvent" />
		<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_WAITING_FOR_ICE}" method="handleWebRTCCallWaitingForICEEvent" />
		<mate:Listener type="{WebRTCJoinedVoiceConferenceEvent.JOINED_VOICE_CONFERENCE}" method="handleWebRTCCallStartedEvent" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;

			import flash.utils.setTimeout;

			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.PopUpUtil;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.main.model.options.HelpOptions;
			import org.bigbluebutton.modules.phone.events.WebRTCCallEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCEchoTestEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCEchoTestStartedEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCJoinedVoiceConferenceEvent;
			import org.bigbluebutton.modules.phone.models.Constants;
			import org.bigbluebutton.modules.phone.models.PhoneModel;
			import org.bigbluebutton.util.browser.BrowserCheck;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(WebRTCEchoTest);      

			private static const TIMEOUT:Number = 60;
			private static const CANCEL_BUTTON:Number = 55;
			
			private var dotTimer:Timer = new Timer(200, 0);

			private var cancelTimer:Timer = new Timer(1000, 0);
			private var countdown:Number;

			[Bindable]
			private var cancelButtonLabel:String = ResourceUtil.getInstance().getString('bbb.micSettings.cancel');

			private var userClosed:Boolean = false;
			
			private function onCancelClicked():void {
				stopTimers();
				PopUpUtil.removePopUp(this);
			}
			
			private function onCreationComplete():void {
				setCurrentState("connecting");
				lblConnectMessage.text = lblConnectMessageMock.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.connecting');
				dotTimer.addEventListener(TimerEvent.TIMER, dotAnimate);

				cancelTimer.addEventListener(TimerEvent.TIMER, timeout);

				startTimers();

				cancelButton.width = cancelButton.measureText(genCancelButtonLabel(TIMEOUT)).width
						+ cancelButton.getStyle("paddingRight")
						+ cancelButton.getStyle("paddingLeft")
						+ 8; // 8 is magic number
        
        var testState:String = PhoneModel.getInstance().webRTCModel.state;
        if (testState == Constants.DO_ECHO_TEST) {
          webRTCEchoTestStarted();
        }
			}

			private function startTimers():void {
				cancelButton.visible = false;
				if (!dotTimer.running) dotTimer.start();
				if (!cancelTimer.running) {
					countdown = TIMEOUT;
					cancelTimer.start();
				}
			}

			private function stopTimers():void {
				if (dotTimer.running) dotTimer.stop();
				if (cancelTimer.running) cancelTimer.stop();
			}

			private function genCancelButtonLabel(countdown:Number):String {
				return cancelButtonLabel + " (" + countdown.toString() + ")";
			}

			private function timeout(e:TimerEvent):void {
				if (countdown > 0) {
					if (!cancelButton.visible && countdown < CANCEL_BUTTON)
						cancelButton.visible = true;
					cancelButton.label = genCancelButtonLabel(countdown);
					countdown--;
				} else {
					noButtonClicked();
				}
			}
			
			private function dotAnimate(e:TimerEvent):void {
				if (lblConnectDots.text.length > 5) {
					lblConnectDots.text = "";
				} else {
					lblConnectDots.text += ".";
				}
			}
			
			private function yesButtonClicked():void {
				userClosed = true;
				
        
        var logData:Object = UsersUtil.initLogData();       
        logData.reason = "User requested.";
        logData.tags = ["voice", "webrtc"];
        logData.logCode = "webrtc_echo_test_passed";
        LOGGER.info(JSON.stringify(logData));
        
				setCurrentState("connecting");
				lblConnectMessage.text = lblConnectMessageMock.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.endingecho');
				
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(new WebRTCEchoTestEvent(WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_HAS_AUDIO));
			}
			
			private function noButtonClicked():void {
				userClosed = true;
                
                var logData:Object = UsersUtil.initLogData();       
                logData.reason = "User requested.";
                logData.tags = ["voice", "webrtc"];
                logData.logCode = "webrtc_echo_test_failed";                
                LOGGER.info(JSON.stringify(logData));
                
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(new WebRTCEchoTestEvent(WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_NO_AUDIO));
				onCancelClicked();
			}
			
			private function handleWebRTCEchoTestStartedEvent(e:WebRTCEchoTestStartedEvent):void {
                webRTCEchoTestStarted();
			}
			
      private function webRTCEchoTestStarted():void {
		var timeOut : Number = 50;
		if ( BrowserCheck.isFirefox() ) {
			timeOut = 1000;
		}
		setTimeout(setStartedState, timeOut);
      }
			
	  private function setStartedState():void {
		  setCurrentState("started");
		  stopTimers();
	  }
      
			private function handleWebRTCEchoTestEndedEvent(e:WebRTCEchoTestEvent):void {
        webRTCEchoTestEnded();
			}
      
      private function webRTCEchoTestEnded():void {
        setCurrentState("connecting");
        lblConnectMessage.text = lblConnectMessageMock.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.endedecho');
        
        if (!userClosed) {
          onCancelClicked();
		      var dispatcher:Dispatcher = new Dispatcher();
		      dispatcher.dispatchEvent(new WebRTCEchoTestEvent(WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_ENDED_UNEXPECTEDLY));
        }
      }
			
			private function handleWebRTCEchoTestFailedEvent(e:WebRTCEchoTestEvent):void {
				onCancelClicked();
			}
			
			private function handleWebRTCEchoTestWaitingForICEEvent(e:WebRTCEchoTestEvent):void {
				setCurrentState("connecting");
				lblConnectMessage.text = lblConnectMessageMock.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.waitingforice');
				startTimers();
			}
			
			private function handleWebRTCEchoTestTransferringEvent(e:WebRTCEchoTestEvent):void {
				setCurrentState("connecting");
				lblConnectMessage.text = lblConnectMessageMock.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.transferring');
				startTimers();
			}
			
			private function handleWebRTCCallConnectingEvent(e:WebRTCCallEvent):void {
				setCurrentState("connecting");
				lblConnectMessage.text = lblConnectMessageMock.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.connecting');
				startTimers();
			}
			
			private function handleWebRTCCallFailedEvent(e:WebRTCCallEvent):void {
				onCancelClicked();
			}
			
			private function handleWebRTCCallWaitingForICEEvent(e:WebRTCCallEvent):void {
				setCurrentState("connecting");
				lblConnectMessage.text = lblConnectMessageMock.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.waitingforice');
				startTimers();
			}
      
      private function webRTCCallStarted():void {
        var logData:Object = UsersUtil.initLogData();       
        logData.reason = "User requested.";
        logData.tags = ["voice", "webrtc"];
        logData.logCode = "webrtc_call_started";
                
        LOGGER.info(JSON.stringify(logData));
        
        onCancelClicked();
      }
			
			private function handleWebRTCCallStartedEvent(e:WebRTCJoinedVoiceConferenceEvent):void {
        webRTCCallStarted();
			}
			
			private function onHelpButtonClicked():void {
				var helpOptions : HelpOptions = Options.getOptions(HelpOptions) as HelpOptions;
				navigateToURL(new URLRequest(helpOptions.url));
			}
			
			
		]]>
	</fx:Script>
	
	<mx:Canvas id="cnvTitle" width="100%">
		<common:AdvancedLabel text="{ResourceUtil.getInstance().getString('bbb.micSettings.title')}"
							  styleName="titleWindowStyle"
							  horizontalCenter="0"
							  maxWidth="450"
							  left="0" />
		<mx:LinkButton toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.helpBtn')}"
					   styleName="helpLinkButtonStyle" 
					   top="0" right="0"
					   click="onHelpButtonClicked()"
					   accessibilityName="{ResourceUtil.getInstance().getString('bbb.micSettings.access.helpButton')}"/>
	</mx:Canvas>

	<mx:VBox width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<mx:VBox includeIn="connecting" width="100%" height="100%" verticalAlign="middle">
			<mx:HBox width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
				<common:AdvancedLabel id="lblConnectMessage"
									  textAlign="right"
									  width="{lblConnectMessageMock.width + 10}"
									  height="{lblConnectDots.height}"
									  styleName="micSettingsWindowSpeakIntoMicLabelStyle" />
				<mx:Text id="lblConnectMessageMock"
						 visible="false"
						 includeInLayout="false"/>
				<mx:Label id="lblConnectDots"
						  width="20"
						  textAlign="left"
						  styleName="micSettingsWindowSpeakIntoMicLabelStyle"
						  text=""/>
			</mx:HBox>
			<mx:HBox width="100%" verticalAlign="bottom" horizontalAlign="right">
				<mx:Button id="cancelButton"
						   label="{cancelButtonLabel}"
						   click="noButtonClicked()"
						   toolTip=""/>
			</mx:HBox>
		</mx:VBox>
		
		<mx:VBox includeIn="started" width="100%" height="100%" verticalAlign="middle">
			<mx:HBox width="100%">
				<mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.recommendHeadset')}"
						 styleName="micSettingsWindowSpeakIntoMicLabelStyle" />		
				<mx:Image source="@Embed('assets/headset-earbuds.png')"/>          
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.speakIntoMic')}"
						 styleName="micSettingsWindowSpeakIntoMicLabelStyle" />		
			</mx:HBox>
			<mx:HRule width="100%"/>
			<mx:HBox width="100%" horizontalAlign="right" horizontalGap="18" paddingTop="10">
				<common:AdvancedLabel id="micSettingLabel"
									  textAlign="left"
									  width="100%"
									  height="60"
									  text="{ResourceUtil.getInstance().getString('bbb.micSettings.echoTestMicPrompt')}"
									  styleName="micSettingsWindowSpeakIntoMicLabelStyle" />
				<mx:Button id="yesButton" label="{ResourceUtil.getInstance().getString('bbb.micSettings.echoTestAudioYes')}"
						   click="yesButtonClicked()"
						   styleName="mainActionButton"
						   toolTip=""/>
				<mx:Button id="noButton"
						   label="{ResourceUtil.getInstance().getString('bbb.micSettings.echoTestAudioNo')}"
						   click="noButtonClicked()"
						   toolTip=""/>
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>
	
	<mx:states>
		<mx:State name="connecting" />
		<mx:State name="started" />
	</mx:states>
</mx:TitleWindow>
