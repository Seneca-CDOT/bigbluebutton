<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.


BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:flexmdi="flexlib.mdi.containers.*"
		xmlns:logModule="org.bigbluebutton.modules.log.view.components.*"
		xmlns:views="org.bigbluebutton.main.views.*"
		xmlns:mate="http://mate.asfusion.com/"
		xmlns:maps="org.bigbluebutton.main.maps.*"
		xmlns:api="org.bigbluebutton.main.api.*"
		xmlns:common="org.bigbluebutton.common.*"
		horizontalScrollPolicy="off" verticalScrollPolicy="off"
		creationComplete="initializeShell()"
		addedToStage="onAddedToStage()" >

	<!--
	height="{parentApplication.height - 1}" : The container height is set to fix height because the percentHeight
	generates a script execution timeout in the GraphicsWrapper class. We also remove one pixel to force the first
	update as the height property needs a value different from thec current one to be updated.
		
	-->
	<fx:Declarations>
		<mate:Listener type="{OpenWindowEvent.OPEN_WINDOW_EVENT}" method="handleOpenWindowEvent" />	
		<mate:Listener type="{CloseWindowEvent.CLOSE_WINDOW_EVENT}" method="handleCloseWindowEvent"/>
		<mate:Listener type="{AddUIComponentToMainCanvas.ADD_COMPONENT}" method="addComponentToCanvas" />
		<mate:Listener type="{AppVersionEvent.APP_VERSION_EVENT}" method="handleApplicationVersionEvent" />	
		<mate:Listener type="{MeetingNotFoundEvent.MEETING_NOT_FOUND}" method="handleMeetingNotFoundEvent" />
		<mate:Listener type="{ConnectionFailedEvent.USER_LOGGED_OUT}" method="handleLogout" />
	    <mate:Listener type="{ConnectionFailedEvent.USER_EJECTED_FROM_MEETING}" method="handleLogout" />
		<mate:Listener type="{ConnectionFailedEvent.CONNECTION_FAILED}" method="attemptReconnect" />
		<mate:Listener type="{ConnectionFailedEvent.CONNECTION_CLOSED}" method="attemptReconnect"  />
		<mate:Listener type="{ConnectionFailedEvent.UNKNOWN_REASON}" method="attemptReconnect"  />
		<mate:Listener type="{ConnectionFailedEvent.CONNECTION_REJECTED}" method="attemptReconnect"  />
		<mate:Listener type="{ExitApplicationEvent.EXIT_APPLICATION}" method="handleExitApplicationEvent" />
		<mate:Listener type="{ConfigLoadedEvent.CONFIG_LOADED_EVENT}" method="initOptions"  />
		<mate:Listener type="{FullscreenToggledEvent.IS_FULLSCREEN_TOGGLED}" method="handleFullscreenToggleState"  />
		<mate:Listener type="{FlashMicSettingsEvent.FLASH_MIC_SETTINGS}" method="handleFlashMicSettingsEvent"  />
		<mate:Listener type="{WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_CONNECTING}" method="handleWebRTCEchoTestConnectingEvent"  />
		<mate:Listener type="{WebRTCMediaEvent.WEBRTC_MEDIA_REQUEST}" method="handleWebRTCMediaRequestEvent"  />
		<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_STARTED}" method="handleWebRTCCallStartedEvent" />
		<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_ENDED}" method="handleWebRTCCallEndedEvent" />
		<mate:Listener type="{AudioSelectionWindowEvent.SHOW_AUDIO_SELECTION}" method="handleShowAudioSelectionWindowEvent" />
		<mate:Listener type="{ShareCameraRequestEvent.SHARE_CAMERA_REQUEST}" method="handleShareCameraRequestEvent" />
		<mate:Listener type="{ScreenshareSelectionWindowEvent.SHOW_WINDOW}" method="handleShowScreenshareSelection" />
	  
		<mate:Listener type="{ToolbarButtonEvent.ADD}" method="handleAddToolbarComponent" />	
		<mate:Listener type="{ToolbarButtonEvent.REMOVE}" method="handleRemoveToolbarComponent"/>
		<mate:Listener type="{ShortcutEvent.OPEN_SHORTCUT_WIN}" method="openShortcutHelpWindow" />
		<mate:Listener type="{BBBEvent.OPEN_WEBCAM_PREVIEW}" method="openVideoPreviewWindow" />
		<mate:Listener type="{BBBEvent.INACTIVITY_WARNING_EVENT}" method="handleInactivityWarningEvent" />
		<mate:Listener type="{LockControlEvent.OPEN_LOCK_SETTINGS}" method="openLockSettingsWindow" />
		<mate:Listener type="{BreakoutRoomEvent.OPEN_BREAKOUT_ROOMS_PANEL}" method="openBreakoutRoomsWindow" />
		<mate:Listener type="{InvalidAuthTokenEvent.INVALID_AUTH_TOKEN}" method="handleInvalidAuthToken" />
		
		<mate:Listener type="{SwitchedLayoutEvent.SWITCHED_LAYOUT_EVENT}" method="onLayoutChanged" />
		<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="onLocaleChanged" />
	
		<mate:Listener type="{NetworkStatsEvent.OPEN_NETSTATS_WIN}" method="openNetworkStatsWindow" />
		<mate:Listener type="{BBBEvent.RETRIEVE_GUEST_POLICY}" method="setGuestPolicy"/>
		<mate:Listener type="{ConnectionFailedEvent.MODERATOR_DENIED_ME}" method="handleLogout" />
		<mate:Listener type="{BBBEvent.MODERATOR_ALLOWED_ME_TO_JOIN}" method="guestAllowed" />
		<mate:Listener type="{NewGuestWaitingEvent.NEW_GUEST_WAITING}" method="refreshGuestView" />
		<mate:Listener type="{BBBEvent.REMOVE_GUEST_FROM_LIST}" method="removeGuestWindow" />
		<mate:Listener type="{BBBEvent.WAITING_FOR_MODERATOR_ACCEPTANCE}" method="openWaitWindow" />
		<mate:Listener type="{BBBEvent.RECONNECT_DISCONNECTED_EVENT}" method="closeWaitWindow"/>
    	<mate:Listener type="{RoundTripLatencyReceivedEvent.ROUND_TRIP_LATENCY_RECEIVED}" method="handleRoundTripLatencyReceivedEvent"/>
		<mate:Listener type="{ConferenceCreatedEvent.CONFERENCE_CREATED_EVENT}" method="handleConferenceCreatedEvent" />
		
		<mate:Listener type="{BBBEvent.OPEN_RECORD_WINDOW}" method="handleOpenRecordWindowEvent" />
    
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.events.Event;
			import flash.events.IOErrorEvent;
			import flash.events.TextEvent;
			import flash.geom.Point;
			import flash.net.navigateToURL;
			import flash.utils.setTimeout;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import flashx.textLayout.formats.Direction;
			
			import flexlib.mdi.effects.effectsLib.MDIVistaEffects;
			
			import org.as3commons.lang.StringUtils;
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.events.AddUIComponentToMainCanvas;
			import org.bigbluebutton.common.events.CloseWindowEvent;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.common.events.OpenWindowEvent;
			import org.bigbluebutton.common.events.ToolbarButtonEvent;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.PopUpUtil;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.events.FullscreenToggledEvent;
			import org.bigbluebutton.core.events.LockControlEvent;
			import org.bigbluebutton.core.events.NewGuestWaitingEvent;
			import org.bigbluebutton.core.events.RoundTripLatencyReceivedEvent;
			import org.bigbluebutton.core.events.SwitchedLayoutEvent;
			import org.bigbluebutton.core.model.LiveMeeting;
			import org.bigbluebutton.core.vo.LockSettingsVO;
			import org.bigbluebutton.main.events.AppVersionEvent;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.BreakoutRoomEvent;
			import org.bigbluebutton.main.events.ClientStatusEvent;
			import org.bigbluebutton.main.events.ConfigLoadedEvent;
			import org.bigbluebutton.main.events.ExitApplicationEvent;
			import org.bigbluebutton.main.events.InvalidAuthTokenEvent;
			import org.bigbluebutton.main.events.MeetingNotFoundEvent;
			import org.bigbluebutton.main.events.ModuleLoadEvent;
			import org.bigbluebutton.main.events.NetworkStatsEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.model.Guest;
			import org.bigbluebutton.main.model.ImageLoader;
			import org.bigbluebutton.main.model.options.BrandingOptions;
			import org.bigbluebutton.main.model.options.BrowserVersionsOptions;
			import org.bigbluebutton.main.model.options.LanguageOptions;
			import org.bigbluebutton.main.model.options.LayoutOptions;
			import org.bigbluebutton.main.model.users.events.ConferenceCreatedEvent;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.modules.phone.events.AudioSelectionWindowEvent;
			import org.bigbluebutton.modules.phone.events.FlashMicSettingsEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCCallEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCEchoTestEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCMediaEvent;
			import org.bigbluebutton.modules.phone.models.PhoneOptions;
			import org.bigbluebutton.modules.screenshare.events.ScreenshareSelectionWindowEvent;
			import org.bigbluebutton.modules.screenshare.view.components.ScreenshareSelectionWindow;
			import org.bigbluebutton.modules.users.model.UsersOptions;
			import org.bigbluebutton.modules.users.views.BreakoutRoomSettings;
			import org.bigbluebutton.modules.videoconf.events.ShareCameraRequestEvent;
			import org.bigbluebutton.util.browser.BrowserCheck;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			
			
			
			
			private static const LOGGER:ILogger = getClassLogger(MainApplicationShell);      
      
			private var globalDispatcher:Dispatcher;			
			private var dispState:String; //full-screen?
			private var stoppedModules:ArrayCollection;			
			private var logWindow:LogWindow;
			private var waitWindow:WaitingWindow = null;
			private var guestWindow:GuestWindow = null;
			private var scWindow:ShortcutHelpWindow;
			private var connectionLostWindow:ConnectionLostWindow;
			
			// LIVE or PLAYBACK
			private var _mode:String = 'LIVE';
			[Bindable] public var appVersion:String = ' ';
			private var localeVersion:String = 'old';
			[Bindable] public var numberOfModules:int = 0;
			
			private var receivedConfigLocaleVer:Boolean = false;
			private var receivedResourceLocaleVer:Boolean = false;
			
			[Bindable] private var copyrightText:String;

			public function get mode():String {
				return _mode;
			}
			
			[Bindable] private var layoutOptions:LayoutOptions;
			[Bindable] private var brandingOptions:BrandingOptions;
			[Bindable] private var usersOptions:UsersOptions;
			
			[Bindable] private var showToolbarOpt:Boolean = true;
			[Bindable] private var _showToolbar:Boolean = true;
			public static const DEFAULT_TOOLBAR_HEIGHT:Number = 50;
			[Bindable] private var toolbarHeight:Number = DEFAULT_TOOLBAR_HEIGHT;
			[Bindable] private var showFooterOpt:Boolean = true;
			[Bindable] private var _showFooter:Boolean = true;
			[Bindable] private var footerHeight:Number = 60;
			
			[Bindable] private var isTunneling:Boolean = false;
			
			private var guestManagement:GuestManagement = null;
			private var guest:Guest = new Guest();
			private var guestPolicy:String = "ASK_MODERATOR";

			private var confirmingLogout:Boolean = false;
			
			private var widthWatch:ChangeWatcher;
			private var heightWatch:ChangeWatcher;
			private var resizeExecuting:Boolean = false;

  			private var _respTimer:ResponsivenessTimer;
      
			public function getLogWindow() : LogWindow
			{
				if (logWindow == null){
					logWindow = new LogWindow();
				}
				return logWindow;
			}
      
			public function initOptions(e:Event):void {
				// Set the layout direction at the application start
				ResourceUtil.getInstance().updateLayoutDirection();
				
				brandingOptions = Options.getOptions(BrandingOptions) as BrandingOptions;
				layoutOptions = Options.getOptions(LayoutOptions) as LayoutOptions;
				usersOptions = Options.getOptions(UsersOptions) as UsersOptions;
				
				updateCopyrightText();
				loadBackground();
				initQuote();
				
				showToolbarOpt = layoutOptions.showToolbar;
				if (!showToolbarOpt) {
					toolbarHeight = 0;
					calculateCanvasHeight();
				}
				toolbar.displayToolbar();
				
				showFooterOpt = layoutOptions.showFooter;
				var languageOptions : LanguageOptions = Options.getOptions(LanguageOptions) as LanguageOptions;
				langSelector.visible = langSelector.includeInLayout = languageOptions.userSelectionEnabled;
				
				if (!showFooterOpt) {
					footerHeight = 0;
					controlBar.visible = controlBar.includeInLayout = false;
					calculateCanvasHeight();
				}
				_respTimer = new ResponsivenessTimer();
				_respTimer.start();
			}
			
			private function handleConferenceCreatedEvent(event:ConferenceCreatedEvent):void {
				updateCopyrightText();
			}
			
			private function updateCopyrightText():void {
				if (StringUtils.isEmpty(brandingOptions.copyright)) {
					copyrightText = ResourceUtil.getInstance().getString('bbb.mainshell.copyrightLabel2',[appVersion]);
				} else {
					copyrightText = String(brandingOptions.copyright).replace("{0}", appVersion);
				}
				
				if (!StringUtils.isEmpty(LiveMeeting.inst().meeting.customCopyright)) {
					copyrightText = LiveMeeting.inst().meeting.customCopyright;
				}
			}
			
			private function initQuote() : void {
				if (brandingOptions.showQuote) {
					quoteView.init();
				} else {
					quoteView.dispose();
				}
			}

			protected function initializeShell():void {	
				globalDispatcher = new Dispatcher();

				copyrightLabel2.addEventListener(FlexEvent.UPDATE_COMPLETE, updateCopyrightLabelDimensions);
			}
			
			// See this stackoverflow post for an explanation on why the size watching is done this way, https://stackoverflow.com/a/2141223
			protected function onAddedToStage():void {
				stopWatching();
				
				widthWatch = ChangeWatcher.watch(parentApplication,'width', onSizeChange);
				heightWatch = ChangeWatcher.watch(parentApplication,'height', onSizeChange);
				
				onSizeChange();
			}
			
			private function onSizeChange(event:Event = null):void {
				if(!resizeExecuting)
					callLater(handleResize);
				resizeExecuting = true;
			}
			
			private function handleResize():void {
				var appWidth:Number = parentApplication.width;
				var appHeight:Number = parentApplication.height;
				
				resizeExecuting = false;
				
				if (appWidth > 0 && appHeight > 0) {
					calculateCanvasHeight();
					updateCopyrightLabelDimensions();
				}
			}
			
			private function stopWatching():void {
				//invoke this to stop watching the properties and prevent the handleResize method from executing
				if (widthWatch != null)	widthWatch.unwatch();
				if (heightWatch != null) heightWatch.unwatch();
			}
			
			private function setGuestPolicy(event:BBBEvent):void {
				guestPolicy = event.payload.guestPolicy;
				if(guestManagement == null) {
					guestManagement = new GuestManagement();
					guestManagement.setGuestPolicy(guestPolicy);
					guestManagement.addToSettings();
				}
			}

			private function updateCopyrightLabelDimensions(e:Event = null):void {
				var appWidth:Number = parentApplication.width;
				
				if (spacer.width == 0) {
					copyrightLabel2.width += (appWidth - controlBar.width);
				} else {
					copyrightLabel2.width += Math.min(spacer.width, copyrightLabel2.measuredWidth - copyrightLabel2.width);
				}
			}

			private var sendStartModulesEvent:Boolean = true;
			
			// We have to calculate the canvas height manually because if you set it to a 
			// percentage you will get execution timeout errors.
			// See issue #2437 for why you shouldn't set height to 100% 
			//             https://github.com/bigbluebutton/bigbluebutton/issues/2437
			private function calculateCanvasHeight():void {
				var appWidth:Number = parentApplication.width;
				var appHeight:Number = parentApplication.height;
				
				mdiCanvas.width = appWidth;
				mdiCanvas.height = appHeight - (_showFooter ? footerHeight: 0) - (_showToolbar ? toolbarHeight: 0);
				updateCanvasBackgroundDimensions();
			}
			
			private function handleApplicationVersionEvent(event:AppVersionEvent):void {
                var logData:Object = UsersUtil.initLogData();
                
				if (event.configLocaleVersion == true) {
					receivedConfigLocaleVer = true;
					appVersion = event.appVersion;
					localeVersion = event.localeVersion;
          updateCopyrightText();
          
                    logData.localeVersion = localeVersion;
                    logData.tags = ["locale"];
                    logData.appVersion = appVersion;
                    logData.logCode = "config_xml_locale_version";
                    LOGGER.info(JSON.stringify(logData));
				} else {
					receivedResourceLocaleVer = true;

                    logData.tags = ["locale"];
                    logData.logCode = "locale_file_locale_version";
                    LOGGER.info(JSON.stringify(logData));
				}
				
				if (receivedConfigLocaleVer && receivedResourceLocaleVer) {
					if (!event.suppressLocaleWarning) checkLocaleVersion(localeVersion);
					if (sendStartModulesEvent) {
            
						sendStartModulesEvent = false;
						sendStartAllModulesEvent();
					}				
				}						
			}
			
			public function sendStartAllModulesEvent():void{
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(new ModuleLoadEvent(ModuleLoadEvent.START_ALL_MODULES));	
			}
			
			public function guestAllowed(evt:BBBEvent):void {
				progressBar.visible = true;
				if (waitWindow != null) {
					PopUpUtil.removePopUp(waitWindow);
					waitWindow = null;
				}
			}

			private function closeGuestWindow(e:Event = null):void {
				if(guestWindow != null) {
					guestWindow.closeWindow();
					guestWindow = null;
				}
			}

			private function refreshGuestView(evt:NewGuestWaitingEvent):void {
				// do not show the guest window if the user isn't moderator or if he's waiting for acceptance
				if (!UsersUtil.amIModerator() || UsersUtil.amIWaitingForAcceptance() && usersOptions.enableGuestUI) {
					closeGuestWindow();
					return;
				}

				if (guestWindow == null) {
					guestWindow = PopUpUtil.createModalPopUp( FlexGlobals.topLevelApplication as DisplayObject, GuestWindow, false) as GuestWindow;
					
					PopUpUtil.lockPosition(guestWindow, function():Point {
						if (ResourceUtil.getInstance().isRTLEnabled() && ResourceUtil.getInstance().getCurrentLanguageDirection() == Direction.RTL) {
							return new Point(20, 20);
						} else {
							return new Point(systemManager.screen.width - guestWindow.width - 20, 20);
						}
					});
					
					guestWindow.addEventListener(Event.CLOSE, closeGuestWindow);
				}
				guestWindow.refreshGuestView();
			}

			public function removeGuestWindow(evt:BBBEvent):void {
				if (guestWindow != null) {
					guestWindow.remove(evt.payload.userId);
				}
			}

			private function closeWaitWindow(e:BBBEvent):void {
				if(waitWindow != null && e.payload.type == "BIGBLUEBUTTON_CONNECTION") {
					waitWindow.removeWindow();
				}
			}

			private function openWaitWindow(evt:BBBEvent):void {
				progressBar.visible = false;
				waitWindow = PopUpUtil.createModalPopUp( FlexGlobals.topLevelApplication as DisplayObject, WaitingWindow, true) as WaitingWindow;
			}
			
			private function openLogWindow():void {
				mdiCanvas.windowManager.add(getLogWindow());
				mdiCanvas.windowManager.absPos(logWindow, 50, 50);
				logWindow.width = mdiCanvas.width - 100;
				logWindow.height = mdiCanvas.height - 100;
			}
			
			public function openShortcutHelpWindow(e:Event = null):void{
				if (scWindow == null) {
					scWindow = new ShortcutHelpWindow();
				}
				
				if (scWindow.minimized)
					scWindow.restore();
				
				if (scWindow.maximized)
					scWindow.restore();
				
				mdiCanvas.windowManager.add(scWindow);
				mdiCanvas.windowManager.absPos(scWindow, mdiCanvas.width/2 - 250, mdiCanvas.height/2 - 250);
				
				scWindow.focusHead();
			}

			private function handleFullscreenToggleState(event: FullscreenToggledEvent): void {
				if (event.isNowFullscreen) {
						fullScreenBtn.styleName = "exitFullScreenButton";
					} else {
						fullScreenBtn.styleName = "fullScreenButton";
					}
			}

			private function toggleFullScreen():void{
				if (ExternalInterface.available) {
					ExternalInterface.call("toggleFullscreen");
				}
	   		}

	   		private function handleOpenWindowEvent(event:OpenWindowEvent):void {
				// this is a terrible place for these checks because this function runs 4 times on startup
				if (BBB.initConnectionManager().isTunnelling) {
					isTunneling = true;
					globalDispatcher.dispatchEvent(new ClientStatusEvent(ClientStatusEvent.WARNING_MESSAGE_EVENT,
						ResourceUtil.getInstance().getString("bbb.clientstatus.tunneling.title"),
						ResourceUtil.getInstance().getString("bbb.clientstatus.tunneling.message"),
						'bbb.clientstatus.tunneling'));
				}
				versionCheck();
				
				var window:IBbbModuleWindow = event.window;
	   			mdiCanvas.addWindow(window);
	   		}
	   		
	   		private function handleCloseWindowEvent(event:CloseWindowEvent):void {
	   			var window:IBbbModuleWindow = event.window;
				  mdiCanvas.removeWindow(window);
	   		}
	   		
			private function versionCheck():void {
				var browserOptions : BrowserVersionsOptions = Options.getOptions(BrowserVersionsOptions) as BrowserVersionsOptions;
				if (!StringUtils.isEmpty(browserOptions.chrome) && !StringUtils.isEmpty(browserOptions.firefox) && !StringUtils.isEmpty(browserOptions.flash)) {
					//check browser version
					if ((BrowserCheck.isChrome() && BrowserCheck.browserMajorVersion < browserOptions.chrome) || BrowserCheck.isFirefox() && BrowserCheck.browserMajorVersion < browserOptions.firefox) {
						globalDispatcher.dispatchEvent(new ClientStatusEvent(ClientStatusEvent.WARNING_MESSAGE_EVENT, 
							ResourceUtil.getInstance().getString("bbb.clientstatus.browser.title"), 
							ResourceUtil.getInstance().getString("bbb.clientstatus.browser.message", [BrowserCheck.browserName+" "+BrowserCheck.browserMajorVersion]),
							'bbb.clientstatus.browser.message'));
					}
					
					//find flash version
					var flashVersion:Object = getFlashVersion(); 
					//check flash version
					if ((flashVersion.os == 'LNX' && !BrowserCheck.isChrome() && flashVersion.major < 11) || 
						((flashVersion.os != 'LNX' || BrowserCheck.isChrome()) && flashVersion.major < browserOptions.flash)) {
						globalDispatcher.dispatchEvent(new ClientStatusEvent(ClientStatusEvent.WARNING_MESSAGE_EVENT, 
							ResourceUtil.getInstance().getString("bbb.clientstatus.flash.title"), 
							ResourceUtil.getInstance().getString("bbb.clientstatus.flash.message", [flashVersion.major+"."+flashVersion.minor+"."+flashVersion.build]),
							'bbb.clientstatus.flash.message'));
					}
				}

				//Alert.show(LOG + "version check- os: "+flashVersion.os+" major:"+flashVersion.major+" minor:"+flashVersion.minor+" build:"+flashVersion.build+" browser:"+browserVersion[0]+" version:"+browserVersion[1]);
				
				//find java version
				//check flash version
			}
			
			//function found here, http://www.mediacollege.com/adobe/flash/actionscript/3/player-version.html
			private function getFlashVersion():Object {
				var flashVersion:Object = new Object();
				var versionNumber:String = Capabilities.version;// Get the whole version string
				var versionArray:Array = versionNumber.split(",");// Split it up
				var osPlusVersion:Array = versionArray[0].split(" ");// The main version contains the OS (e.g. WIN), so we split that off as well.
				// Populate the version object (the OS is a string, others are numbers):
				flashVersion["os"] = osPlusVersion[0];
				flashVersion["major"] = parseInt(osPlusVersion[1]);
				flashVersion["minor"] = parseInt(versionArray[1]);
				flashVersion["build"] = parseInt(versionArray[2]);
				return flashVersion;
			}
			
	   		private function resetLayout():void{
	   			mdiCanvas.resetWindowLayout();
	   		}
	   		
	   		private function addComponentToCanvas(e:AddUIComponentToMainCanvas):void{
	   			mdiCanvas.addChild(e.component);
	   		}
	   		
	   		public function checkLocaleVersion(localeVersion:String):void {	   			
	   			Alert.okLabel ="OK";
				var version:String = "old-locales";
				version = ResourceUtil.getInstance().getString('bbb.mainshell.locale.version');
                
                var logData:Object = UsersUtil.initLogData();
                logData.configVersion = localeVersion;
                logData.localeVersion = version;
                logData.locale = ResourceUtil.getInstance().getCurrentLanguageCode();
                logData.tags = ["locale"];
                logData.logCode = "locale_loaded";
                LOGGER.info(JSON.stringify(logData));
                    
				if ((version == "old-locales") || StringUtils.isEmpty(version)) {
					wrongLocaleVersion();
				} else {
					if (version != localeVersion) wrongLocaleVersion();
				}	   			
	   		}

			private function handleInactivityWarningEvent(e:BBBEvent):void {
				var inactivityWarning:InactivityWarningWindow = PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, InactivityWarningWindow, true) as InactivityWarningWindow;
				inactivityWarning.duration = e.payload.duration;
			}

            private function handleFlashMicSettingsEvent(event:FlashMicSettingsEvent):void {
                /**
                 * There is a bug in Flex SDK 4.14 where the screen stays blurry if a
                 * pop-up is opened from another pop-up. I delayed the second open to
                 * avoid this case. - Chad
                 */
                this.callLater(function():void {
                    PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, FlashMicSettings, true) as FlashMicSettings;
                });
            }

            private function openVideoPreviewWindow(event:BBBEvent):void {
                var camSettings:CameraDisplaySettings = PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, CameraDisplaySettings, true) as CameraDisplaySettings;
                if (camSettings) {
                    camSettings.defaultCamera = event.payload.defaultCamera;
                    camSettings.camerasArray = event.payload.camerasArray;
                    camSettings.publishInClient = event.payload.publishInClient;
                    camSettings.chromePermissionDenied = event.payload.chromePermissionDenied;
					camSettings.updateCameraList();
                }
            }

            private function wrongLocaleVersion():void {
                PopUpUtil.createNonModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, OldLocaleWarnWindow, true) as OldLocaleWarnWindow;
            }

            private function handleShowAudioSelectionWindowEvent(event:AudioSelectionWindowEvent):void {
                PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, AudioSelectionWindow, true);
            }

            private function handleRoundTripLatencyReceivedEvent(event: RoundTripLatencyReceivedEvent): void {
           //   rttLabel.text = "RTT = " + LiveMeeting.inst().whiteboardModel.latencyInSec/1000 + "s";
            }
      
            private function handleWebRTCMediaRequestEvent(event:WebRTCMediaEvent):void {
                var options:PhoneOptions = new PhoneOptions();
                if (!options.showMicrophoneHint) return;
                var browserPermissionHelper:BrowserPermissionHelper = PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, BrowserPermissionHelper, false) as BrowserPermissionHelper;
                if (BrowserCheck.isFirefox()) {
                    if (browserPermissionHelper) {
						if (Capabilities.os.indexOf("Windows") >= 0) {
							browserPermissionHelper.currentState = "firefoxMic";
						} else {
							browserPermissionHelper.currentState = "firefoxMicMacOSX";
						}
						browserPermissionHelper.x = 50;
						browserPermissionHelper.y = 200;
                    }
                } else if (BrowserCheck.isChrome()) {
                    if (browserPermissionHelper) {
						if (Capabilities.os.indexOf("Windows") >= 0) {
							browserPermissionHelper.currentState = "chromeMic";
						} else {
							browserPermissionHelper.currentState = "chromeMicMacOSX";
						}
						browserPermissionHelper.x = 50;
						browserPermissionHelper.y = 130;
                    }
                }
            }

            private function handleWebRTCEchoTestConnectingEvent(event:WebRTCEchoTestEvent):void {
                PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, WebRTCEchoTest, true) as WebRTCEchoTest;
            }

            private function handleShareCameraRequestEvent(event:ShareCameraRequestEvent):void {
                if (BrowserCheck.isChrome()) {
					// Show browserPermissionHelper component after showing the webcam window due event listeners registration order
                    setTimeout(showbrowserPermissionHelper, 100);
                }
            }
			
			private function handleShowScreenshareSelection(event:ScreenshareSelectionWindowEvent):void {
				PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, ScreenshareSelectionWindow, true);
			}
			
			private function showbrowserPermissionHelper() : void {
				var browserPermissionHelper : BrowserPermissionHelper = PopUpUtil.createNonModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, BrowserPermissionHelper, false) as BrowserPermissionHelper;
				if (browserPermissionHelper) {
					if (Capabilities.os.indexOf("Mac") >= 0){
						browserPermissionHelper.currentState = "chromeCamMacOSX";
					} else {
						browserPermissionHelper.currentState = "chromeCam";
					}
					browserPermissionHelper.x = 20;
					browserPermissionHelper.y = 150;
				}
			}

            private function handleMeetingNotFoundEvent(e:MeetingNotFoundEvent):void {
                showlogoutWindow(ResourceUtil.getInstance().getString('bbb.mainshell.meetingNotFound'));
            }

            private function showlogoutWindow(reason:String):void {
                if (layoutOptions != null && layoutOptions.showLogoutWindow) {
                    if (UsersUtil.iAskedToLogout()) {
                        handleExitApplicationEvent();
                        return;
                    }
                    var loggedOutWindow:LoggedOutWindow = PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, LoggedOutWindow, true) as LoggedOutWindow;
                    if (loggedOutWindow) {
                        loggedOutWindow.setReason(reason);
                        mdiCanvas.removeAllPopUps();
                        removeToolBars();
                    }
                } else {
                    mdiCanvas.removeAllPopUps();
                    removeToolBars();
                    var pageHost:String = FlexGlobals.topLevelApplication.url.split("/")[0];
                    var pageURL:String = FlexGlobals.topLevelApplication.url.split("/")[2];
                    LOGGER.debug("SingOut to [{0}//{1}/bigbluebutton/api/signOut]", [pageHost, pageURL]);
                    var request:URLRequest = new URLRequest(pageHost + "//" + pageURL + "/bigbluebutton/api/signOut");
                    var urlLoader:URLLoader = new URLLoader();
                    urlLoader.addEventListener(Event.COMPLETE, handleLogoutComplete);
                    urlLoader.addEventListener(IOErrorEvent.IO_ERROR, handleLogoutError);
                    urlLoader.load(request);
                }
            }

            /**
             * Removes toolbars from the display list.
             * Used only when the user completely logged out.
             */
            private function removeToolBars():void {
                this.removeChild(toolbar);
                this.removeChild(controlBar);
            }

            private function handleLogout(e:ConnectionFailedEvent):void {
                if (e is ConnectionFailedEvent) {
                    showlogoutWindow((e as ConnectionFailedEvent).type);
                } else
                    showlogoutWindow(ConnectionFailedEvent.USER_EJECTED_FROM_MEETING);
            }

            private function handleExitApplicationEvent(e:ExitApplicationEvent = null):void {
                if (! UsersUtil.isBreakout()) {
                    navigateToURL(new URLRequest(BBB.getLogoutURL()), "_self");
                } else {
                    ExternalInterface.call("window.close");
                }
            }

			private function redirectToLogoutUrl ():void {
        		var logoutURL:String = BBB.getLogoutURL();
				var request:URLRequest = new URLRequest(logoutURL);

				navigateToURL(request, '_self');
			}
			

			private function handleLogoutError(e:Event):void {

				redirectToLogoutUrl();
			}
			
			private function handleLogoutComplete(e:Event):void {	

				redirectToLogoutUrl();
			}
			
			private function attemptReconnect(e:ConnectionFailedEvent):void{
				handleLogout(e);
			}
			
			private function handleAddToolbarComponent(event:ToolbarButtonEvent):void {
				if (event.location == ToolbarButtonEvent.BOTTOM_TOOLBAR) {
					var newComponentTabIndex:int = tabIndexer.startIndex + addedBtns.numChildren + 10;
					(event.button as UIComponent).tabIndex = newComponentTabIndex;
					addedBtns.addChild(event.button as UIComponent);
					//realignButtons();
					
					//need to force the fullscreen button to be after it
					fullScreenBtn.tabIndex = newComponentTabIndex + 1;
				}
			}
			
			private function handleWebRTCCallStartedEvent(e:WebRTCCallEvent):void {
				lblWebRTC.visible = lblWebRTC.includeInLayout = true;
			}
			
			private function handleWebRTCCallEndedEvent(e:WebRTCCallEvent):void {
				lblWebRTC.visible = lblWebRTC.includeInLayout = false;
			}

            private function handleInvalidAuthToken(event:InvalidAuthTokenEvent):void {
                showlogoutWindow(ResourceUtil.getInstance().getString('bbb.mainshell.invalidAuthToken'));
                globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.CANCEL_RECONNECTION_EVENT));
            }

			private function handleRemoveToolbarComponent(event:ToolbarButtonEvent):void {
				if (addedBtns.contains(event.button as UIComponent))
					addedBtns.removeChild(event.button as UIComponent);
			}

			private var networkStatsWindow:NetworkStatsWindow = null;

			private function openNetworkStatsWindow(e:Event = null):void {
				if (networkStatsWindow == null) {
					networkStatsWindow = new NetworkStatsWindow();
				}
				
				mdiCanvas.windowManager.add(networkStatsWindow);
				mdiCanvas.windowManager.absPos(networkStatsWindow, mdiCanvas.width - networkStatsWindow.width, 0);
				mdiCanvas.windowManager.bringToFront(networkStatsWindow);
			}

			private function updateToolbarHeight():void {
				if (toolbarHeight != 0) {
					toolbarHeight = DEFAULT_TOOLBAR_HEIGHT;
					if (toolbar.quickLinks.includeInLayout) {
						toolbarHeight += toolbar.quickLinks.height;
					}
					if (UsersUtil.isBreakout()) {
						toolbarHeight += toolbar.breakoutRibbon.height;
					}
				}
				calculateCanvasHeight();
			}

			private function updateCanvasBackgroundDimensions():void {
				if (canvasBackground == null) {
					return;
				}
			
				var canvasAspectRatio:Number = mdiCanvas.width / mdiCanvas.height;

				// this is the case when the image is a banner that should be positioned in the top, and
				// be shown entirely
				if (canvasBackgroundAspectRatio > 2 || canvasAspectRatio >= canvasBackgroundAspectRatio) {
					canvasBackground.width = mdiCanvas.width;
					canvasBackground.height = Math.ceil(mdiCanvas.width / canvasBackgroundAspectRatio);
				} else {
					canvasBackground.height = mdiCanvas.height;
					canvasBackground.width = Math.ceil(mdiCanvas.height * canvasBackgroundAspectRatio);
				}
			}

			private var canvasBackground:DisplayObject = null;
			private var canvasBackgroundAspectRatio:Number = NaN;

			private function loadBackground():void {
				var backgroundCandidate:String = brandingOptions.background;
				if (!StringUtils.isEmpty(backgroundCandidate)) {
					var imageLoader:ImageLoader = new ImageLoader();
					imageLoader.load(backgroundCandidate, function(obj:DisplayObject, width:Number, height:Number):void {
						canvasBackground = obj;
						canvasBackgroundAspectRatio = width / height;
						backgroundPlaceHolder.rawChildren.addChild(canvasBackground);
						backgroundPlaceHolder.invalidateDisplayList();
						updateCanvasBackgroundDimensions();
					});
				}
			}

            private function openLockSettingsWindow(event:LockControlEvent):void {
                var lsv:LockSettingsVO = UsersUtil.getLockSettings();

                var popUp:IFlexDisplayObject = PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, LockSettings, true);
                if (popUp) {
                    var ls:LockSettings = LockSettings(popUp);
                    ls.disableCam = lsv.getDisableCam();
                    ls.disableMic = lsv.getDisableMic();
					ls.webcamsOnlyForModerator = LiveMeeting.inst().meeting.webcamsOnlyForModerator;
                    ls.disablePrivChat = lsv.getDisablePrivateChat();
                    ls.disablePubChat = lsv.getDisablePublicChat();
                    ls.lockedLayout = lsv.getLockedLayout();
                    ls.lockOnJoin = lsv.getLockOnJoin();
                    ls.lockOnJoinConfigurable = lsv.getLockOnJoinConfigurable();
                }
            }

            private function openBreakoutRoomsWindow(e:BreakoutRoomEvent):void {
                var popUp:IFlexDisplayObject = PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, BreakoutRoomSettings, true);
                if (popUp != null) {
                    BreakoutRoomSettings(popUp).initCreateBreakoutRooms(e.joinMode, e.record);
                }
            }
			
			private function handleOpenRecordWindowEvent(e:BBBEvent):void {
				var popUp:RecordWindow = PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, RecordWindow, false) as RecordWindow;
				popUp.setRecordingFlag(e.payload.recording);
				PopUpUtil.lockPosition(popUp, function():Point {
					if (ResourceUtil.getInstance().isRTLEnabled() && ResourceUtil.getInstance().getCurrentLanguageDirection() == Direction.RTL) {
						return new Point(150, y + toolbar.height);
					} else {
						return new Point(parentApplication.width - popUp.width - 150, y + toolbar.height); 
					}
				});
			}
			
			private function onFooterLinkClicked(e:TextEvent):void{
				if (ExternalInterface.available) {
					ExternalInterface.call("chatLinkClicked", e.text);
				}
			}

            private function onLayoutChanged(e:SwitchedLayoutEvent):void {
                if (e.layoutID != "bbb.layout.name.videochat") {
                    this.styleName = "defaultShellStyle";
					controlBar.styleName = "defaultControlBarStyle";
                } else {
					this.styleName = "darkShellStyle";
					controlBar.styleName = "darkControlBarStyle";
                }
            }
			
			private function onLocaleChanged(e:LocaleChangeEvent) : void {
				PopUpUtil.initAlert();
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<common:TabIndexer id="tabIndexer" startIndex="100000"
						   tabIndices="{[warningBtn, langSelector, logBtn, fullScreenBtn]}"/>
	</fx:Declarations>

	<views:MainToolbar id="toolbar" 
					   dock="true" 
					   width="100%"
					   height="{toolbarHeight}" 
					   visible="{_showToolbar}"
					   includeInLayout="{showToolbarOpt}"
					   verticalAlign="middle" 
					   updateComplete="updateToolbarHeight()"/>
				
	<!-- MainCanvas height has to be forced or it will never show and the application will not continue loading -->
	<views:MainCanvas id="mdiCanvas"
					  horizontalScrollPolicy="off"
					  verticalScrollPolicy="off"
					  styleName="mdiCanvasStyle"
					  effectsLib="{flexlib.mdi.effects.effectsLib.MDIVistaEffects}"
					  height="150"
					  width="100%">
		<mx:Canvas id="backgroundPlaceHolder" width="100%" height="100%" />
		<mx:VBox horizontalCenter="0" verticalCenter="0" horizontalAlign="center" verticalGap="20">
			<views:QuotesView id="quoteView"/>
			<views:LoadingBar id="progressBar"/>
		</mx:VBox>
	</views:MainCanvas>	
	
	<mx:ControlBar width="100%" height="{footerHeight}" styleName="defaultControlBarStyle" id="controlBar" paddingTop="2" paddingBottom="2" verticalAlign="middle" visible="{_showFooter}" includeInLayout="{showFooterOpt}" >
		<mx:Label
				htmlText="{copyrightText}"
				link="onFooterLinkClicked(event)"
				id="copyrightLabel2" truncateToFit="true"
				selectable="true" paddingRight="10"/>
		<mx:Spacer width="100%" id="spacer" />
    <!--mx:Label 
      id="rttLabel"
      text="RTT = 0ms"
      visible="true"
      includeInLayout="true" /-->
		<mx:Label 
				id="lblWebRTC"
				text="{'[ '+ResourceUtil.getInstance().getString('bbb.mainshell.notification.webrtc')+' ]'}"
				visible="false"
				includeInLayout="false" />
		<mx:Label
				text="{'['+ResourceUtil.getInstance().getString('bbb.mainshell.notification.tunnelling')+']'}"
				id="isTunnellingLbl"
				visible="{isTunneling}"
				includeInLayout="{isTunneling}" />
		<views:WarningButton id="warningBtn" 
				width="30"
				height="30"/>
		<views:LanguageSelector id="langSelector" 
				visible="false" 
				height="30"
				width="180"
				accessibilityName="{ResourceUtil.getInstance().getString('bbb.mainToolbar.langSelector')}"/>
		<mx:Button
				width="30"
				height="30"
				visible="{layoutOptions.showLogButton}"
				includeInLayout="{layoutOptions.showLogButton}"
				toolTip="{ResourceUtil.getInstance().getString('bbb.mainshell.logBtn.toolTip')}"
				id="logBtn"
				styleName="logsButton"
				click="openLogWindow()"/>
		<mx:HBox id="addedBtns" />
		<mx:Button id="fullScreenBtn"
				width="30"
				height="30"
				toolTip="{ResourceUtil.getInstance().getString('bbb.mainshell.fullscreenBtn.toolTip')}"
				styleName="fullScreenButton"
				click="toggleFullScreen()"/>
	</mx:ControlBar>
</mx:VBox>
