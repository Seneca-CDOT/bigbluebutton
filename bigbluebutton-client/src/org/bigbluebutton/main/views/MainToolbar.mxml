<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:ApplicationControlBar xmlns:mx="library://ns.adobe.com/flex/mx" 
    xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:common="org.bigbluebutton.common.*"
	xmlns:views="org.bigbluebutton.main.views.*"
	xmlns:components="org.bigbluebutton.modules.phone.views.components.*"
	enabled="true" visible="{showToolbar}"
	initialize="init()">   
	
	<fx:Declarations>
		<mate:Listener type="{ToolbarButtonEvent.ADD}" method="handleAddToolbarButtonEvent" />	
		<mate:Listener type="{ToolbarButtonEvent.REMOVE}" method="handleRemoveToolbarButtonEvent"/>
		<mate:Listener type="{BBBEvent.END_MEETING_EVENT}" method="handleEndMeetingEvent"/>
		<mate:Listener type="{ConnectionFailedEvent.USER_LOGGED_OUT}" method="hideToolbar" />
		<mate:Listener type="{ConnectionFailedEvent.CONNECTION_CLOSED}" method="hideToolbar" />
		<mate:Listener type="{ConfigLoadedEvent.CONFIG_LOADED_EVENT}" method="handleConfigLoadedEvent" />
		<mate:Listener type="{SettingsEvent.SETTINGS_MODULE_LOADED}" method="showSettingsButton" />
		<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />	
		<mate:Listener type="{ShortcutEvent.REMOTE_OPEN_SHORTCUT_WIN}" method="remoteShortcutClick" />
		<mate:Listener type="{ShortcutEvent.LOGOUT}" method="remoteLogout" />
		<mate:Listener type="{ShortcutEvent.FOCUS_SHORTCUT_BUTTON}" method="focusShortcutButton" />
		<mate:Listener type="{ShortcutEvent.FOCUS_LOGOUT_BUTTON}" method="focusLogoutButton" />
		<mate:Listener type="{ConferenceCreatedEvent.CONFERENCE_CREATED_EVENT}" method="retrieveMeetingName" />
		<mate:Listener type="{ConnectionFailedEvent.MODERATOR_DENIED_ME}" method="hideToolbar" />
		<mate:Listener type="{SettingsComponentEvent.ADD}" method="addSettingsComponent" />
		<mate:Listener type="{SettingsComponentEvent.REMOVE}" method="removeSettingsComponent"/>
		<mate:Listener type="{BBBEvent.CHANGE_RECORDING_STATUS}" method="onRecordingStatusChanged" />
		<mate:Listener type="{BBBEvent.RECORD_AND_CLEAR_PREVIOUS_MARKERS}" method="onRecordAndClearPreviousMarkersChanged" />
		<mate:Listener type="{SuccessfulLoginEvent.USER_LOGGED_IN}" method="refreshModeratorButtonsVisibility" />
		<mate:Listener type="{ChangeMyRole.CHANGE_MY_ROLE_EVENT}" method="refreshRole" />
		<mate:Listener type="{BBBEvent.CONFIRM_LOGOUT_END_MEETING_EVENT}" method="confirmEndSession" />
    	<mate:Listener type="{MeetingTimeRemainingEvent.TIME_REMAINING}" method="handleRemainingTimeUpdate" />
		<mate:Listener type="{UpdateRecordingTimerEvent.UPDATE_TIMER}" method="handleUpdateRecordingTimer" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IToolTip;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.ToolTipEvent;
			import mx.managers.PopUpManager;
			
			import flashx.textLayout.formats.Direction;
			
			import org.as3commons.lang.StringUtils;
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.common.events.SettingsComponentEvent;
			import org.bigbluebutton.common.events.ToolbarButtonEvent;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.PopUpUtil;
			import org.bigbluebutton.core.TimerUtil;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.events.MeetingTimeRemainingEvent;
			import org.bigbluebutton.core.events.UpdateRecordingTimerEvent;
			import org.bigbluebutton.core.model.Config;
			import org.bigbluebutton.core.model.LiveMeeting;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ConfigLoadedEvent;
			import org.bigbluebutton.main.events.LogoutEvent;
			import org.bigbluebutton.main.events.NetworkStatsEvent;
			import org.bigbluebutton.main.events.SettingsEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.events.SuccessfulLoginEvent;
			import org.bigbluebutton.main.model.NetworkStatsData;
			import org.bigbluebutton.main.model.options.BrandingOptions;
			import org.bigbluebutton.main.model.options.HelpOptions;
			import org.bigbluebutton.main.model.options.LayoutOptions;
			import org.bigbluebutton.main.model.options.ShortcutKeysOptions;
			import org.bigbluebutton.main.model.users.events.ChangeMyRole;
			import org.bigbluebutton.main.model.users.events.ConferenceCreatedEvent;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.modules.users.model.UsersOptions;
			import org.bigbluebutton.util.browser.BrowserCheck;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(MainToolbar);
			
			public static const ALIGN_RIGHT:String ="ALIGN_RIGHT";
			public static const ALIGN_LEFT:String = "ALIGN_LEFT";
			
			[Bindable] private var showHelpBtn:Boolean = false;
			[Bindable] private var showToolbar:Boolean = false;
			[Bindable] private var showGuestSettingsButton:Boolean = false;
			[Bindable] private var showRecordButton:Boolean = false;
			[Bindable] private var toolbarOptions:LayoutOptions;
			[Bindable] private var brandingOptions:BrandingOptions;
			[Bindable] private var usersOptions:UsersOptions;

			[Bindable] private var numButtons:int;
      
			[Bindable] private var _bandwidthConsumedUp:String = "-";
			[Bindable] private var _bandwidthConsumedDown:String = "-";
			private var _updateBandwidthTimer:Timer = new Timer(1000);
			private var _bandwidthToolTip:IToolTip;

			/*
			 * Because of the de-centralized way buttons are added to the toolbar, there is a large gap between the tab indexes of the main buttons
			 * on the left and the tab indexes of the "other" items on the right (shortcut glossary, language slector, etc). This will make it more
			 * convenient to add future items to the tab order.
			 * 
			 * - Justin Robinson, November 13 2012 
			 */
			
			private var xml:XML;
			private var settingsComponents:Array = new Array();
			private var settingsPopup:BBBSettings = null;
			
			private function init():void{
				toolbarOptions = Options.getOptions(LayoutOptions) as LayoutOptions;
				brandingOptions = Options.getOptions(BrandingOptions) as BrandingOptions;
				usersOptions = Options.getOptions(UsersOptions) as UsersOptions;
				
				numButtons = 0;
                
                // Accessibility isn't active till a few second after the client starts to load so we need a delay
                var timer:Timer = new Timer(3000, 1);
                timer.addEventListener(TimerEvent.TIMER, checkAccessiblity);
                timer.start();

				BindingUtils.bindSetter(refreshModeratorButtonsVisibility, LiveMeeting.inst().meeting, "recorded");
			}

			private function checkAccessiblity(e:TimerEvent):void {
				// remove the quick links if there's no screen reader active
				if (!Accessibility.active) {
					quickLinks.removeAllChildren();
				} else {
					quickLinks.visible = quickLinks.includeInLayout = true;
				}
			}

      private function onQuickLinkClicked(window:String):void {
        var dispatcher:Dispatcher = new Dispatcher();
        switch(window) {
          case "users":
            dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_USERS_WINDOW));
            break;
          case "webcams":
            dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_VIDEO_WINDOW));
            break;
          case "presentation":
            dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_PRESENTATION_WINDOW));
            break;
          case "chat":
            dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_CHAT_WINDOW));
            break;
		  case "caption":
			  dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_CAPTION_WINDOW));
			  break;
		  case "sharedNotes":
			  dispatcher.dispatchEvent(new ShortcutEvent(ShortcutEvent.FOCUS_SHARED_NOTES_WINDOW));
			  break;
         }
       }

			public function displayToolbar():void{
				if (toolbarOptions.showToolbar) {
					showToolbar = true;
				} else {
					showToolbar = false;
				}

				if (toolbarOptions.showHelpButton) {
					showHelpBtn = true;
				} else {
					showHelpBtn = false;
				}
				if(toolbarOptions.showNetworkMonitor) {
					initBandwidthToolTip();
				}
			}
			
			private function handleRemainingTimeUpdate(e:MeetingTimeRemainingEvent):void {
				// Display timer only if there is less than 30 minutes remaining
				if (!timeRemaining.visible && e.timeLeftInSec <= 1800) {
					timeRemaining.visible = true;
				}
				// The label.id is used to determine message to display. So make sure
				// you change in the TimerUtil if you change the label.
				TimerUtil.setCountDownTimer(timeRemaining, e.timeLeftInSec, true);
			}
			
			private function handleUpdateRecordingTimer(e:UpdateRecordingTimerEvent):void {
				if (e.time == 0) {
					recordingTimer.visible = false;
				} else {
					recordingTimer.visible = true;
					TimerUtil.setTimer(recordingTimer, e.time, LiveMeeting.inst().meetingStatus.isRecording);
				}
			}

			private function retrieveMeetingName(e:ConferenceCreatedEvent):void {
				if (toolbarOptions.showMeetingName) {
					var meetingTitle:String = LiveMeeting.inst().meeting.name;
					if (meetingTitle != null) {
						meetingNameLbl.text = meetingTitle;
					}
				}

				var customLogo: String = LiveMeeting.inst().meeting.customLogo;
				
				if (customLogo != "") {
					logo.source = LiveMeeting.inst().meeting.customLogo;
				}
				
				initBreakoutRibbon();
				
				if (LiveMeeting.inst().me.logoutTimer > 0 ) {
					idleLogoutButton.startTimer(LiveMeeting.inst().me.logoutTimer);
				} else {
					rightBox.removeChild(idleLogoutButton);
				}

				logFlashPlayerCapabilities();
				logBrowserInfo();
			}
			
			private function logBrowserInfo():void {
				var browser:Object = new Object();
				browser.name = BrowserCheck.browserName;
				browser.majorVersion = BrowserCheck.browserMajorVersion;
				browser.fullVersion = BrowserCheck.browserFullVersion;
				
				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["initialization"];
				logData.browser = browser;
				logData.logCode = "browser_info";
				LOGGER.info(JSON.stringify(logData));
			}
			
			private function initBreakoutRibbon() : void {
				if (UsersUtil.isBreakout()) {
					breakoutRibbon.visible = breakoutRibbon.includeInLayout = true;
					var sequence:String = StringUtils.substringAfterLast(UsersUtil.getMeetingName(), " ");
					sequence = StringUtils.substringBefore(sequence, ")");
					breakoutLabel.text = ResourceUtil.getInstance().getString("bbb.users.breakout.youareinroom", [sequence]);
				}
			}

      private function refreshModeratorButtonsVisibility(e:*):void {
          showGuestSettingsButton = UsersUtil.amIModerator() && usersOptions.enableGuestUI;

          showRecordButton = LiveMeeting.inst().meeting.recorded;
      }

      private function getFlashPlayerCapabilities():Object {
          var caps:Object = new Object();
          caps.avHardwareDisable = Capabilities.avHardwareDisable;
          caps.hasAccessibility = Capabilities.hasAccessibility;
          caps.hasAudio = Capabilities.hasAudio;
          caps.hasAudioEncoder = Capabilities.hasAudioEncoder;
          caps.hasEmbeddedVideo = Capabilities.hasEmbeddedVideo;
          caps.hasIME = Capabilities.hasIME;
          caps.hasMP3 = Capabilities.hasMP3;
          caps.hasPrinting = Capabilities.hasPrinting;
          caps.hasScreenBroadcast = Capabilities.hasScreenBroadcast;
          caps.hasScreenPlayback = Capabilities.hasScreenPlayback;
          caps.hasStreamingAudio = Capabilities.hasStreamingAudio;
          caps.hasStreamingVideo = Capabilities.hasStreamingVideo;
          caps.hasTLS = Capabilities.hasTLS;
          caps.hasVideoEncoder = Capabilities.hasVideoEncoder;
          caps.isDebugger = Capabilities.isDebugger;
          caps.isEmbeddedInAcrobat = Capabilities.isEmbeddedInAcrobat;
          caps.language = Capabilities.language;
          caps.localFileReadDisable = Capabilities.localFileReadDisable;
          caps.manufacturer = Capabilities.manufacturer;
          caps.maxLevelIDC = Capabilities.maxLevelIDC;
          caps.os = Capabilities.os;
          caps.pixelAspectRatio = Capabilities.pixelAspectRatio;
          caps.playerType = Capabilities.playerType;
          caps.screenColor = Capabilities.screenColor;
          caps.screenDPI = Capabilities.screenDPI;
          caps.screenResolutionX = Capabilities.screenResolutionX;
          caps.screenResolutionY = Capabilities.screenResolutionY;
          //caps.serverString = Capabilities.serverString;
          caps.touchscreenType = Capabilities.touchscreenType;
          caps.version = Capabilities.version;
          return caps;
     }

     private function logFlashPlayerCapabilities():void {
         var logData:Object = UsersUtil.initLogData();
         logData.tags = ["initialization"];
         logData.capabilities = getFlashPlayerCapabilities();
         logData.logCode = "flash_player_capabilities";
         LOGGER.info(JSON.stringify(logData));
     }

            
			public function addButton(name:String):Button{
				var btn:Button = new Button();
				btn.id = name;
				btn.label = name;
				btn.height = 20;
				btn.visible = true;
				this.addChild(btn);
				
				return btn;
			}
			
			private function onHelpButtonClicked():void {
				var helpOptions:HelpOptions = Options.getOptions(HelpOptions) as HelpOptions;
				navigateToURL(new URLRequest(helpOptions.url));
			}
			
			private function handleEndMeetingEvent(event:BBBEvent):void {
				LOGGER.debug("Received end meeting event.");
				doLogout();
			}
			
			
			private function confirmLogout():void {
				if (toolbarOptions.confirmLogout) {
					var logoutWindow:LogoutWindow = PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, LogoutWindow, false) as LogoutWindow;

					// Needs to be improved in case of RTL layout
					PopUpUtil.lockPosition(logoutWindow, function():Point {
						if (ResourceUtil.getInstance().isRTLEnabled() && ResourceUtil.getInstance().getCurrentLanguageDirection() == Direction.RTL) {
							return new Point(5, btnLogout.y + btnLogout.height + 5)
						} else {
							return new Point(width - logoutWindow.width - 5, btnLogout.y + btnLogout.height + 5)	
						}
					});
				} else {
					doLogout();
				}
			}
			
						
			private function alertLogout(e:CloseEvent):void {
				// Check to see if the YES button was pressed.
				if (e.detail==Alert.YES) {
					UsersUtil.setIAskedToLogout(true);
					/* 
					 * If doLogout() is called immediately there is a null exception in AlertAccImpl
					 * line 185, but if we delay calling doLogout() until the next frame the Alert 
					 * will close correctly and the logout succeeds as normal. It looks like the 
					 * stage is unset at some point in the core class and there's not much we can do
					 * to correct it other than avoid it. - Chad Aug 8, 2016 
					 */
					callLater(doLogout);
				}
			}
			
			private function doLogout():void {
				dispatchEvent(new LogoutEvent(LogoutEvent.USER_LOGGED_OUT));
			}

			private function confirmEndSession(event:BBBEvent):void {
				var alert:Alert = Alert.show(ResourceUtil.getInstance().getString('bbb.endSession.confirm.message'), ResourceUtil.getInstance().getString('bbb.endSession.confirm.title'), Alert.YES | Alert.NO, null, onConfirmEndSessionAlertClosed, null, Alert.YES);
				// we need to set transparency duration to avoid the blur effect when two alerts are displayed sequentially
				alert.setStyle("modalTransparencyDuration", 250);
			}

			private function onConfirmEndSessionAlertClosed(e:CloseEvent):void {
				// Check to see if the YES button was pressed.
				if (e.detail == Alert.YES) {
					endSession();
				}
			}

			private function endSession():void {
				dispatchEvent(new BBBEvent(BBBEvent.LOGOUT_END_MEETING_EVENT));
			}
			
			private function hideToolbar(e:ConnectionFailedEvent):void{
				if (toolbarOptions.showToolbar) {
					this.visible = false;
				} else {
					this.visible = true;
				}
			}
			
			private function handleAddToolbarButtonEvent(event:ToolbarButtonEvent):void {
				// Find out how to import accessibility into custom components; even though the ToolbarButtons are buttons, they don't seem to have a tabIndex
				if (event.location == ToolbarButtonEvent.TOP_TOOLBAR) {
					var index:int;
					if (event.module == "DeskShare"){
						addedBtnsDeskShare.addChild(event.button as UIComponent);
					}
					else if (event.module == "Microphone"){
						addedBtnsMicrophone.addChild(event.button as UIComponent);
					}
					else if (event.module == "Webcam"){
						addedBtnsWebcam.addChild(event.button as UIComponent);
					}
					
					numButtons++;
					(event.button as UIComponent).tabIndex = quickLinksIndexer.startIndex + 6;
				}
			}
			
			private function handleRemoveToolbarButtonEvent(event:ToolbarButtonEvent):void {
				if (addedBtnsDeskShare.contains(event.button as UIComponent))
					addedBtnsDeskShare.removeChild(event.button as UIComponent);
				if (addedBtnsMicrophone.contains(event.button as UIComponent))
					addedBtnsMicrophone.removeChild(event.button as UIComponent);
				if (addedBtnsWebcam.contains(event.button as UIComponent))
					addedBtnsWebcam.removeChild(event.button as UIComponent);
			}
			
			private function handleConfigLoadedEvent(e:ConfigLoadedEvent):void{
				var config:Config = BBB.getConfigManager().config;
				var shortcutKeysOptions : ShortcutKeysOptions = Options.getOptions(ShortcutKeysOptions) as ShortcutKeysOptions;
				shortcutKeysBtn.includeInLayout = shortcutKeysBtn.visible = shortcutKeysOptions.showButton;

				if (StringUtils.isEmpty(brandingOptions.logo)) {
					hideLogo();
				} else {
					logo.source = brandingOptions.logo;
				}

				if (!StringUtils.isEmpty(brandingOptions.toolbarColor)) {
					mainBox.setStyle("backgroundColor", uint("0x" + brandingOptions.toolbarColor.substr(1)));
				}
				
				updateStyle();
			}
			
			private function onDisconnectTest():void{
				var d:Dispatcher = new Dispatcher();
				var e:LogoutEvent = new LogoutEvent(LogoutEvent.DISCONNECT_TEST);
				d.dispatchEvent(e);
			}
			
			private function showSettingsButton(e:SettingsEvent):void{
				var b:Button = new Button();
				b.label = ResourceUtil.getInstance().getString('bbb.mainToolbar.settingsBtn');
				b.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.settingsBtn.toolTip');
				b.addEventListener(MouseEvent.CLICK, openSettings);
				this.addChild(b);
			}
			
			private function localeChanged(event:LocaleChangeEvent) : void {
				updateStyle();
				initBreakoutRibbon();
				updateMeetingNameLabel();
			}
			
			private function updateStyle():void {
				var styleNameExt : String = "";
				if (ResourceUtil.getInstance().isRTLEnabled() && ResourceUtil.getInstance().getCurrentLanguageDirection() == Direction.RTL) {
					styleNameExt = "RTL";
				}
				
				btnLogout.styleName = "logoutButtonStyle" + styleNameExt;
			}

			private function openSettings(e:Event = null):void{
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(new SettingsEvent(SettingsEvent.OPEN_SETTINGS_PANEL));
			}
			
			public function remoteShortcutClick(e:ShortcutEvent):void{
				onShortcutButtonClick();
			}
			
			public function remoteLogout(e:ShortcutEvent):void{
				confirmLogout();
			}
			
			private function onShortcutButtonClick(e:Event = null):void {
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(new ShortcutEvent(ShortcutEvent.OPEN_SHORTCUT_WIN));
			}
			
			private function focusShortcutButton(e:ShortcutEvent):void{
				shortcutKeysBtn.setFocus();
			}
			
			private function focusLogoutButton(e:ShortcutEvent):void{
				btnLogout.setFocus();
			}
			
			private function onRecordingStatusChanged(event:BBBEvent):void {
				updateMeetingNameLabel();
			}
			
			private function updateMeetingNameLabel():void {
				if (LiveMeeting.inst().meetingStatus.isRecording) {
					meetingNameLbl.text = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordingLabel.recording')
				} else {
					meetingNameLbl.text = "";
					TimerUtil.stopTimer(recordingTimer.id);
				}
				
				if (toolbarOptions.showMeetingName) {
					var meetingTitle:String = LiveMeeting.inst().meeting.name;
					if (meetingTitle != null) {
						meetingNameLbl.text += " " + meetingTitle;
					}
				}
			}
			
			private function onRecordAndClearPreviousMarkersChanged(event:BBBEvent):void {
				recordingTimer.visible = false;
			}

			private function onNetStatsButtonClick(e:Event = null):void {
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(new NetworkStatsEvent(NetworkStatsEvent.OPEN_NETSTATS_WIN));
			}

			private function initBandwidthToolTip():void {
				_updateBandwidthTimer.addEventListener(TimerEvent.TIMER, updateBandwidthTimerHandler);
				_updateBandwidthTimer.start();
				btnNetwork.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, bwToolTipShowHandler);
				btnNetwork.addEventListener(ToolTipEvent.TOOL_TIP_END, bwToolTipEndHandler);
			}

			private function bwToolTipShowHandler(e:ToolTipEvent):void {
				// The ToolTip must be stored so it's text can be updated
				_bandwidthToolTip = e.toolTip;
				updateBwToolTip();
			}

			private function bwToolTipEndHandler(e:ToolTipEvent):void {
				_bandwidthToolTip = null;
			}

			private function updateBandwidthTimerHandler(e:TimerEvent):void {
				_bandwidthConsumedDown = NetworkStatsData.getInstance().formattedCurrentConsumedDownBW;
				_bandwidthConsumedUp = NetworkStatsData.getInstance().formattedCurrentConsumedUpBW;
				updateBwToolTip();
			}

			private function updateBwToolTip():void {
				if(_bandwidthToolTip) {
					_bandwidthToolTip.text = ResourceUtil.getInstance().getString('bbb.bwmonitor.upload.short') + ": " + _bandwidthConsumedUp +
						" | " + ResourceUtil.getInstance().getString('bbb.bwmonitor.download.short')+": "+_bandwidthConsumedDown;
				}
			}

			private function hideLogo():void {
				logo.visible = logo.includeInLayout = false;
				logoSperatator.visible = logo.includeInLayout = false;
			}

			private function addSettingsComponent(e:SettingsComponentEvent = null):void {
				settingsComponents.push(e.component);
			}

			private function removeSettingsComponent(e:SettingsComponentEvent = null):void {
				throw("Not implemented");
			}

			private function onSettingsButtonClick():void {
				settingsPopup = PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, BBBSettings, true) as BBBSettings;
				settingsPopup.pushComponents(settingsComponents);
				PopUpManager.centerPopUp(settingsPopup);
			}

			private function refreshRole(e:ChangeMyRole):void {
				refreshModeratorButtonsVisibility(null);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<common:TabIndexer id="quickLinksIndexer" startIndex="102" tabIndices="{[usersLinkBtn, webcamLinkButton, presentationLinkBtn, chatLinkBtn, captionLinkBtn, sharedNotesLinkBtn]}"/>
		<common:TabIndexer id="buttonsIndexer" startIndex="{quickLinksIndexer.startIndex + numButtons + 10}"
						   tabIndices="{[recordBtn, webRTCAudioStatus, shortcutKeysBtn, helpBtn, btnLogout]}"/>
	</fx:Declarations>

	<mx:VBox id="mainBox" styleName="toolbarMainBox" width="100%" height="100%" horizontalScrollPolicy="off">
		<!-- Breakout room  Ribbon-->
		<mx:HBox id="breakoutRibbon" width="100%" height="30"
				 styleName="breakoutRoomRibbon"
				 visible="false" includeInLayout="false" >
			<mx:Label id="breakoutLabel" />
			<mx:Label text="|" visible="{timeRemaining.visible}" includeInLayout="{timeRemaining.visible}"/>
			<mx:Label id="timeRemaining" visible="false" includeInLayout="{timeRemaining.visible}"
					  text="{ResourceUtil.getInstance().getString('bbb.users.breakout.calculatingRemainingTime')}"
					  toolTip="{ResourceUtil.getInstance().getString('bbb.users.breakout.timerForRoom.toolTip')}"/>
		</mx:HBox>
		<!-- Top bar -->
		<mx:HBox id="topBox" width="100%" height="{MainApplicationShell.DEFAULT_TOOLBAR_HEIGHT}" verticalAlign="middle" horizontalScrollPolicy="off" styleName="topBoxStyle">
			<mx:HBox id="titleBox" width="40%" height="100%" horizontalAlign="left" verticalAlign="middle" horizontalScrollPolicy="off">
				<mx:Image id="logo" right="20" maxHeight="35" ioError="hideLogo()" />
				<mx:VRule id="logoSperatator" styleName="toolbarSeparator" height="10" />
				<mx:Label id="meetingNameLbl" minWidth="1" maxWidth="{titleBox.width - logo.width - 20}" styleName="meetingNameLabelStyle" truncateToFit="true"/>
			</mx:HBox>
			<mx:HBox id="actionBox" width="30%" height="100%" horizontalAlign="center" verticalAlign="middle" horizontalScrollPolicy="off">
				<mx:HBox id="addedBtnsMicrophone" />
				<mx:HBox id="addedBtnsWebcam" />
				<mx:HBox id="addedBtnsDeskShare" />
			</mx:HBox>
			<mx:HBox id="rightBox" width="40%" height="100%" horizontalAlign="right" verticalAlign="middle" horizontalScrollPolicy="off">
				<mx:Label id="recordingTimer" visible="false" includeInLayout="{recordingTimer.visible}" styleName="recordingTimerStyle"/>
				<views:RecordButton id="recordBtn" visible="{showRecordButton}" includeInLayout="{showRecordButton}"/>
				<views:WebRTCAudioStatus id="webRTCAudioStatus" height="30"/>
				
				<mx:Button
					id="bbbSettings"
					visible="{showGuestSettingsButton}"
					includeInLayout="{showGuestSettingsButton}"
					toolTip="{ResourceUtil.getInstance().getString('bbb.settings.btn.toolTip')}"
					click="onSettingsButtonClick()"
					styleName="settingsButtonStyle"
					height="30"
					/>
				<!--
				<mx:Button label="DISCONNECT!" click="BBB.initConnectionManager().forceClose()" height="22" toolTip="Click to simulate disconnection" />
				-->
				<mx:Button
					id="btnNetwork"
					styleName="bandwidthButtonStyle"
					toolTip="dummy text"
					click="onNetStatsButtonClick()"
					visible="{toolbarOptions.showNetworkMonitor}"
					includeInLayout="{toolbarOptions.showNetworkMonitor}"/>
				<mx:Button id="shortcutKeysBtn" label="{ResourceUtil.getInstance().getString('bbb.mainToolbar.shortcutBtn')}" styleName="shortcutButtonStyle"
						   click="onShortcutButtonClick()" height="30" 
						   toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.shortcutBtn.toolTip')}"/>
				<mx:LinkButton id="helpBtn" visible="{showHelpBtn}" includeInLayout="{showHelpBtn}" click="onHelpButtonClicked()" height="30" 
							   styleName="helpLinkButtonStyle"
							   toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.helpBtn')}"
							   accessibilityName="{ResourceUtil.getInstance().getString('bbb.micSettings.access.helpButton')}"/>
				<views:IdleLogoutButton id="idleLogoutButton" height="30" visible="false" includeInLayout="{idleLogoutButton.visible}"/>
				<mx:Button id="btnLogout" styleName="logoutButtonStyle"
						   toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.logoutBtn.toolTip')}"
						   right="10" height="30" click="confirmLogout()"/>
			</mx:HBox>
		</mx:HBox>

		<!-- Accessibilty Quick Links -->
		<mx:HBox id="quickLinks" visible="false" includeInLayout="false" width="100%" height="30" horizontalAlign="center" verticalAlign="middle">
			<mx:LinkButton id="usersLinkBtn" click="onQuickLinkClicked('users')" label="{ResourceUtil.getInstance().getString('bbb.users.quickLink.label')}"
						   accessibilityDescription="{usersLinkBtn.label}" toolTip="{usersLinkBtn.label}"
						   height="30" styleName="quickWindowLinkStyle" />
			<mx:LinkButton id="webcamLinkButton" click="onQuickLinkClicked('webcams')" label="{ResourceUtil.getInstance().getString('bbb.videodock.quickLink.label')}" 
						   accessibilityDescription="{webcamLinkButton.label}" toolTip="{webcamLinkButton.label}"
						   height="30" styleName="quickWindowLinkStyle" />
			<mx:LinkButton id="presentationLinkBtn" click="onQuickLinkClicked('presentation')" label="{ResourceUtil.getInstance().getString('bbb.presentation.quickLink.label')}"
						   accessibilityDescription="{presentationLinkBtn.label}" toolTip="{presentationLinkBtn.label}"
						   height="30" styleName="quickWindowLinkStyle" />
			<mx:LinkButton id="chatLinkBtn" click="onQuickLinkClicked('chat')" label="{ResourceUtil.getInstance().getString('bbb.chat.quickLink.label')}" 
						   accessibilityDescription="{chatLinkBtn.label}" toolTip="{chatLinkBtn.label}"
						   height="30" styleName="quickWindowLinkStyle" />
			<mx:LinkButton id="captionLinkBtn" click="onQuickLinkClicked('caption')" label="{ResourceUtil.getInstance().getString('bbb.caption.quickLink.label')}" 
						   accessibilityDescription="{captionLinkBtn.label}" toolTip="{captionLinkBtn.label}"
						   height="30" styleName="quickWindowLinkStyle" />
			<mx:LinkButton id="sharedNotesLinkBtn" click="onQuickLinkClicked('sharedNotes')" label="{ResourceUtil.getInstance().getString('bbb.sharedNotes.quickLink.label')}" 
						   accessibilityDescription="{sharedNotesLinkBtn.label}" toolTip="{sharedNotesLinkBtn.label}"
						   height="30" styleName="quickWindowLinkStyle" />
		</mx:HBox>
	</mx:VBox>

</mx:ApplicationControlBar>
