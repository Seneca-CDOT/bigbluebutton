<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2015 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:mate="http://mate.asfusion.com/"
                xmlns:common="org.bigbluebutton.common.*"
				implements="org.bigbluebutton.common.IKeyboardClose"
				show="this.setFocus()"
                width="630"
                visible="false"
                showCloseButton="false">
    
    <fx:Script>
        <![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.core.PopUpUtil;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.model.LiveMeeting;
			import org.bigbluebutton.core.model.users.User2x;
			import org.bigbluebutton.main.events.BreakoutRoomEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
            
            [Bindable]
            private var roomsProvider:Array;
            
            private var dispatcher:Dispatcher;
            
            [Bindable]
            private var mode:String;
            
            [Bindable]
            private var recordingEnabled:Boolean;
			
			[Bindable]
			private var freeJoin:Boolean;
            
            private static var assignment : Dictionary;
            
            private function onCloseClicked():void {
                PopUpUtil.removePopUp(this);
            }
            
            /**
             * Dispatches a BreakoutRoomEvent to start creating breakout rooms
             */
            private function createBreakoutRooms():void {
                // Will be used to check that all the new breakout room contains at least one users
                var totalUsers:int;
                var event:BreakoutRoomEvent = new BreakoutRoomEvent(BreakoutRoomEvent.CREATE_BREAKOUT_ROOMS);
                // event.meetingId is filled in the event handler for BreakoutRoomEvent in UserService class
                event.rooms = new Array();
                var parentMeetingName:String = UsersUtil.getMeetingName();
                var roomResource:String = ResourceUtil.getInstance().getString('bbb.users.breakout.room');
				var freeJoin : Boolean = freeJoinCheckbox.selected;
                for (var i:int = 0; i < (roomsCombo.selectedIndex + 2); i++) {
                    var users:Array = BreakoutList(roomsContainer.getChildAt(i)).users.source;
                    totalUsers += users.length;
                    var room:Object = new Object();
                    room.users = new Array();
                    room.sequence = i + 1;
                    room.name = parentMeetingName + " (" + roomResource + " - " + room.sequence.toString() + ")";
					room.freeJoin = freeJoin;
                    for (var j:int = 0; j < users.length; j++) {
                        room.users.push((User2x)(users[j]).intId);
                    }
                    event.rooms.push(room);
                }
                if (totalUsers > 0 || freeJoin) {
                    event.durationInMinutes = durationStepper.value;
                    event.record = recordCheckbox.selected;
                    dispatcher.dispatchEvent(event);
                    storeAssignment();
                    PopUpUtil.removePopUp(this);
                } else {
                    Alert.show(ResourceUtil.getInstance().getString('bbb.users.breakout.insufficientUsers'));
                }
            }
            
            /**
             * Dispatches a BreakoutRoomEvent to send breakout rooms join URL invitations
             */
            private function inviteUsersToBreakoutRooms():void {
                var list:BreakoutList;
                var user:User2x;
                var usersInvited:Boolean = false;
                for (var i:int; i < roomsContainer.numChildren - 1; i++) {
                    list = roomsContainer.getChildAt(i) as BreakoutList;
                    for (var u:int = 0; u < list.users.length; u++) {
                        user = list.users.getItemAt(u) as User2x;
                        if (user.breakoutRooms.length == 0) {
                            usersInvited ||= true;
                            var event:BreakoutRoomEvent = new BreakoutRoomEvent(BreakoutRoomEvent.REQUEST_BREAKOUT_JOIN_URL);
                            event.userId = user.intId;
                            event.breakoutMeetingId = LiveMeeting.inst().breakoutRooms.getBreakoutRoomBySequence(i + 1).meetingId;
                            dispatcher.dispatchEvent(event);
                        }
                    }
                }
                if (usersInvited) {
                    PopUpUtil.removePopUp(this);
                } else {
                    Alert.show(ResourceUtil.getInstance().getString('bbb.users.breakout.insufficientUsers'));
                }
            }
            
            protected function assignUsersForCreation():void {
                var originalUsers:ArrayCollection = UsersUtil.getUsers();
                var users:ArrayCollection = new ArrayCollection();
                var me:User2x;
                // Copy users to avoid removing the references from the original ArrayCollection
                for (var l:int = 0; l < originalUsers.length; l++) {
                    if (! UsersUtil.isMe((User2x(originalUsers[l]).intId))) {
                        users.addItem(User2x.copy(originalUsers[l]));
                    } // Put the current user to the unassigned box because he is the moderator
                    else {
                        me = originalUsers[l];
                    }
                }
                var rooms:int = roomsCombo.selectedIndex + 2;
                var perRoom:int = users.length / rooms;
                var remaining:int = users.length % rooms;
                var user:User2x;
				var listHeight : int = rooms <= 5 ? 140 : 100;
                roomsContainer.removeAllChildren();
                for (var r:int = 0; r < rooms; r++) {
                    var list:BreakoutList = roomsContainer.addChild(new BreakoutList()) as BreakoutList;
                    list.users = new ArrayCollection();
					list.height = listHeight;
                    list.roomName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r + 1).toString();
                    list.usersList.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r + 1).toString();
                    for (var i:int = 0; i < perRoom; i++) {
                        list.users.addItem(users.removeItemAt(Math.floor(Math.random() * users.length)) as User2x);
                    }
                }
                for (var j:int = 0; j < remaining; j++) {
                    BreakoutList(roomsContainer.getChildAt(j)).users.addItem(users.removeItemAt(Math.floor(Math.random() * users.length)) as User2x);
                }
                var unassignedList:BreakoutList = roomsContainer.addChild(new BreakoutList()) as BreakoutList;
                unassignedList.users = new ArrayCollection([me]);
				unassignedList.height = listHeight;
                unassignedList.roomName = ResourceUtil.getInstance().getString('bbb.users.breakout.notAssigned');
                unassignedList.usersList.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.breakout.notAssigned');
                unassignedList.notAssignedUsers = true;
                startButton.enabled = true;
            }
            
            protected function loadAssignement():void {
                var rooms:int = assignment['rooms'];
                roomsCombo.selectedIndex = assignment['rooms'] - 2;
                recordCheckbox.selected = assignment['record'];
                durationStepper.value = assignment['duration'];
				freeJoinCheckbox.selected = assignment['freeJoin'];
                var user:User2x;
                var currentUsers:ArrayCollection = UsersUtil.getUsers();
                // Create breakout rooms boxes
                for (var r:int = 1; r <= rooms; r++) {
                    var list:BreakoutList = roomsContainer.addChild(new BreakoutList()) as BreakoutList;
                    list.users = new ArrayCollection();
                    list.roomName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r).toString();
                    list.usersList.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r).toString();
                }
				// Load user assignment from the previous action
				var unassignedUsers:ArrayCollection = new ArrayCollection();
				for (var u:int = 0; u < currentUsers.length; u++) {
					user = currentUsers.getItemAt(u) as User2x;
					if (assignment.hasOwnProperty(user.intId)) {
						BreakoutList(roomsContainer.getChildAt(assignment[user.intId])).users.addItem(User2x.copy(user));
					} else {
						unassignedUsers.addItem(User2x.copy(user));
					}
				}
				// Create not assigned users list
				createUnassignedList(unassignedUsers);
            }
            
            protected function assignUsersForInvitation():void {
                var originalUsers:ArrayCollection = UsersUtil.getUsers();
                var users:ArrayCollection = new ArrayCollection();
                // Copy users to avoid removing the references from the original ArrayCollection
                for (var l:int = 0; l < originalUsers.length; l++) {
                    users.addItem(User2x.copy(originalUsers[l]));
                }
                // Create breakout rooms lists
                var rooms:int = LiveMeeting.inst().breakoutRooms.breakoutRooms.length;
                var user:User2x;
                roomsContainer.removeAllChildren();
                for (var r:int = 0; r < rooms; r++) {
                    var list:BreakoutList = roomsContainer.addChild(new BreakoutList()) as BreakoutList;
                    list.roomName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r + 1).toString()
                    list.usersList.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r + 1).toString()
                    list.users = new ArrayCollection();
                    list.mode = mode;
                }
                var unassignedUsers:ArrayCollection = new ArrayCollection();
                for (var j:int = 0; j < users.length; j++) {
                    user = users[j] as User2x;
                    if (user.breakoutRooms.length > 0) {
                        for (var b:int = 0; b < user.breakoutRooms.length; b++) {
                            BreakoutList(roomsContainer.getChildAt(user.breakoutRooms[b] - 1)).users.addItem(user as User2x);
                        }
                    } else {
                        unassignedUsers.addItem(user);
                    }
                }
                createUnassignedList(unassignedUsers);
                startButton.enabled = true;
            }
            
            private function createUnassignedList(dataProvider:ArrayCollection):void {
                var unassignedList:BreakoutList = roomsContainer.addChild(new BreakoutList()) as BreakoutList;
                unassignedList.users = dataProvider;
                unassignedList.roomName = ResourceUtil.getInstance().getString('bbb.users.breakout.notAssigned');
                unassignedList.usersList.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.breakout.notAssigned');
                unassignedList.notAssignedUsers = true;
            }
            
            private function storeAssignment():void {
                assignment = new Dictionary(true);
                assignment['rooms'] = roomsCombo.selectedIndex + 2;
                assignment['record'] = recordCheckbox.selected;
                assignment['duration'] = durationStepper.value;
				assignment['freeJoin'] = freeJoinCheckbox.selected;
				for (var r:int = 0; r < assignment['rooms']; r++) {
					var users:ArrayCollection = BreakoutList(roomsContainer.getChildAt(r)).users;
					for (var u:int = 0; u < users.length; u++) {
						// We store pairs { userID : roomNumber } to be easier to check later
						assignment[User2x(users[u]).intId] = r;
					}
				}	
            }
            
            public function initCreateBreakoutRooms(mode:String, record:Boolean):void {
                dispatcher = new Dispatcher();
                roomsProvider = new Array();
                this.mode = mode;
                this.recordingEnabled = record;
                for (var i:int = 2; i <= 8; i++) {
                    roomsProvider.push(i.toString() + " " + ResourceUtil.getInstance().getString('bbb.users.breakout.rooms'));
                }
                roomsCombo.selectedIndex = 0;
                if (this.mode == "create") {
                    startButton.label = ResourceUtil.getInstance().getString('bbb.users.breakout.start');
                    textArea.text = ResourceUtil.getInstance().getString('bbb.users.breakout.breakoutRooms');
                    if (assignment == null) {
                        assignUsersForCreation();
                    } else {
                        loadAssignement();
                    }
                    visible = true;
                } else {
                    startButton.label = ResourceUtil.getInstance().getString('bbb.users.breakout.invite');
                    roomsBox.visible = durationBox.visible = recordBox.visible = 
                    roomsBox.includeInLayout = durationBox.includeInLayout = recordBox.includeInLayout =
					freeJoinBox.visible = freeJoinBox.includeInLayout = false;
                    textArea.text = ResourceUtil.getInstance().getString('bbb.users.breakout.updateBreakoutRooms');
                    assignUsersForInvitation();
                    visible = true;
                }
				PopUpManager.centerPopUp(this);
            }
		]]>
    </fx:Script>
    
    <mx:VBox width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" horizontalAlign="center">
		<common:AdvancedLabel maxWidth="550"
							  id="textArea"
							  text="{ResourceUtil.getInstance().getString('bbb.users.breakout.breakoutRooms')}"
							  styleName="titleWindowStyle" />
        <mx:Canvas width="100%" styleName="breakoutTipBox" verticalScrollPolicy="off" horizontalScrollPolicy="off">
            <mx:Text horizontalCenter="0" text="{ResourceUtil.getInstance().getString('bbb.users.breakout.dragAndDropToolTip')}"/>
        </mx:Canvas>
		
		<mx:Form paddingTop="20" width="100%" verticalGap="12">
			<mx:FormItem id="roomsBox" label="{ResourceUtil.getInstance().getString('bbb.users.breakout.rooms')}" width="60%">
				<mx:ComboBox id="roomsCombo" width="60%" change="{assignUsersForCreation()}" dataProvider="{roomsProvider}"
							 accessibilityName="{ResourceUtil.getInstance().getString('bbb.users.breakout.roomsCombo.accessibilityName')}" />
			</mx:FormItem>
			
			<mx:FormItem id="durationBox" label="{ResourceUtil.getInstance().getString('bbb.users.breakout.timeLimit')}" direction="horizontal">
				<common:AccessibleNumericStepper id="durationStepper" value="15" minimum="1" maximum="600" 
												 toolTip="{ResourceUtil.getInstance().getString('bbb.users.breakout.durationStepper.accessibilityName')}"/>
				<mx:Label text="{ResourceUtil.getInstance().getString('bbb.users.breakout.minutes')}"/>	
			</mx:FormItem>
			
			<mx:FormItem id="freeJoinBox" direction="horizontal">
				<mx:CheckBox id="freeJoinCheckbox"
							 accessibilityName="{ResourceUtil.getInstance().getString('bbb.users.breakout.freeJoinCheckbox.accessibilityName')}"/>
				<mx:Label text="{ResourceUtil.getInstance().getString('bbb.users.breakout.freeJoin')}" />	
			</mx:FormItem>
			
			<mx:FormItem id="recordBox" visible="{recordingEnabled}" includeInLayout="{recordingEnabled}" direction="horizontal">
				<mx:CheckBox id="recordCheckbox"
							 accessibilityName="{ResourceUtil.getInstance().getString('bbb.users.breakout.recordCheckbox.accessibilityName')}"/>
				<mx:Label text="{ResourceUtil.getInstance().getString('bbb.users.breakout.record')}"/>	
			</mx:FormItem>
		</mx:Form>
        
        <mx:Tile id="roomsContainer" styleName="roomsContainer" width="100%" height="100%"/>
        
        <mx:HBox width="100%" horizontalAlign="right" horizontalGap="15">
            <mx:Button id="startButton"
					   styleName="mainActionButton"
                       click="this.mode == 'create' ? createBreakoutRooms() : inviteUsersToBreakoutRooms()"/>
            <mx:Button label="{ResourceUtil.getInstance().getString('bbb.users.breakout.close')}" click="onCloseClicked()"/>
        </mx:HBox>
    </mx:VBox>
    
</mx:TitleWindow>
