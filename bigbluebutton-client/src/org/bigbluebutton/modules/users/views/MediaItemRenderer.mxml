<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:HBox xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mate="http://mate.asfusion.com/"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	creationComplete="onCreationComplete()" > 

	<fx:Declarations>
		<mate:Listener type="{UsersRollEvent.USER_ROLL_OVER}" method="onRollOver" />
		<mate:Listener type="{UsersRollEvent.USER_ROLL_OUT}" method="onRollOut" />
		<mate:Listener type="{ChangeMyRole.CHANGE_MY_ROLE_EVENT}" method="onChangeMyRole"/>
		<mate:Listener type="{BBBEvent.CHANGE_WEBCAMS_ONLY_FOR_MODERATOR}" method="onChangeWebcamsOnlyForModerator"/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import flash.filters.BitmapFilterQuality;
			import flash.filters.GlowFilter;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Menu;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			
			import org.bigbluebutton.common.Role;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.events.LockControlEvent;
			import org.bigbluebutton.core.events.VoiceConfEvent;
			import org.bigbluebutton.core.model.LiveMeeting;
			import org.bigbluebutton.core.vo.LockSettingsVO;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.model.users.events.ChangeMyRole;
			import org.bigbluebutton.main.model.users.events.ChangeRoleEvent;
			import org.bigbluebutton.main.model.users.events.KickUserEvent;
			import org.bigbluebutton.modules.users.events.UsersRollEvent;
			import org.bigbluebutton.modules.users.events.ViewCameraEvent;
			import org.bigbluebutton.modules.users.model.UsersOptions;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable]
			private var rolledOver:Boolean = false;
			
			[Bindable]
			private var webcamsOnlyForModerator:Boolean;
			
			private var moderator:Boolean = false;

			private var rolledOverMute:Boolean = false;
			private var rolledOverLock:Boolean = false;
			
			private var muteRolled:Boolean = false;
			private var lockRolled:Boolean = false;
			
			private var options:UsersOptions;
			private var actionsMenu:Menu = null;

			private function onCreationComplete():void {
				options = Options.getOptions(UsersOptions) as UsersOptions;

				refreshRole(UsersUtil.amIModerator());

				this.addEventListener(FlexEvent.DATA_CHANGE, dataChangeHandler);

				BindingUtils.bindSetter(updateButtons, listenOnlyInd, "visible");
				BindingUtils.bindSetter(updateButtons, voiceJoinedInd, "visible");
				BindingUtils.bindSetter(updateButtons, muteInd, "visible");
				BindingUtils.bindSetter(updateButtons, userLockedInd, "visible");
				BindingUtils.bindSetter(updateButtons, hasStreamInd, "visible");
				BindingUtils.bindSetter(updateButtons, viewingStreamInd, "visible");
			}

			private function dataChangeHandler(e:Event):void {
				//rest rolledOver when the data changes because onRollOut wont be called if the row moves
				if (data != null) {
					updateButtons();
					validateNow();
				}
			}
			
			private function onRollOver(e:UsersRollEvent):void{
				if ((moderator || UsersUtil.isMe(e.userID)) && (e.userID == data.userId)) {
					rolledOver = true;
					updateButtons();
				}
			}
			
			private function onRollOut(e:UsersRollEvent):void{
				if ((moderator || UsersUtil.isMe(e.userID)) && rolledOver) {
					rolledOver = false;
					updateButtons();
				}
			}

			private function onChangeMyRole(e:ChangeMyRole):void {
				rolledOver = false;
				updateButtons();
				// close the menu if it was opened
				closeActionsMenu();

				refreshRole(e.role == Role.MODERATOR);
			}
			
			private function onChangeWebcamsOnlyForModerator(e:BBBEvent):void {
				webcamsOnlyForModerator = LiveMeeting.inst().meeting.webcamsOnlyForModerator;

				if (data != null) {
					updateButtons();
				}
			}

			private function refreshRole(amIModerator:Boolean):void {
				lockBtn.enabled = settingsBtn.enabled = moderator = amIModerator;
			}
			
			private function muteMouseOverHandler():void {
				rolledOverMute = true;
				updateButtons();
			}
			
			private function muteMouseOutHandler():void {
				rolledOverMute = false;
				updateButtons();
			}
			
			private function lockMouseOverHandler():void {
				rolledOverLock = true;
				updateButtons();
			}
			
			private function lockMouseOutHandler():void {
				rolledOverLock = false;
				updateButtons();
			}
			
			private function viewCamera():void {
				dispatchEvent(new ViewCameraEvent(data.userId));
   			}	
			
			private function kickUser():void{
				if (data.role == Role.VOICE_ONLY ) {
					var e:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.EJECT_USER);
					e.userid = data.userId;
					dispatchEvent(e);
				} else {
					dispatchEvent(new KickUserEvent(data.userId));
				}
			}
			
			private function toggleMuteState():void {
				var e:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_USER);
				e.userid = data.userId;
				e.mute = !data.muted;
				dispatchEvent(e);
			}
			
			public function toggleLockState():void {
				var e:LockControlEvent;
				
				if(data.locked) {
					e = new LockControlEvent(LockControlEvent.UNLOCK_USER);
				} else {
					e = new LockControlEvent(LockControlEvent.LOCK_USER);
				}
				
				e.internalUserID = data.userId;
				dispatchEvent(e);
			}

			private function updateButtons(voiceMuted:Boolean = false):void {
				// reset the mute image filter so the talking indicator doesn't stick
				muteImg.filters = null;

				var ls:LockSettingsVO = UsersUtil.getLockSettings();
				var amIMod:Boolean = UsersUtil.amIModerator();
				
				if (data != null) {
					settingsBtn.visible = rolledOver && !data.me && !UsersUtil.isBreakout();

					if ( !data.inVoiceConf || ( options.moderatorUnmute == false && amIMod && !UsersUtil.isMe(data.userId) ) ) {
						muteImg.visible = false;
						muteImg.includeInLayout = false;
						muteBtn.visible = false;
						muteBtn.includeInLayout = true;
					} else {
						if (data.listenOnly) {
							muteImg.source = getStyle("iconSound");
							muteImg.visible = true;
							muteImg.includeInLayout = true;
							muteBtn.visible = false;
							muteBtn.includeInLayout = false;
						} else if (!amIMod && data.locked && ls.getDisableMic()) {
							muteImg.visible = true;
							muteImg.includeInLayout = true;
							muteBtn.visible = false;
							muteBtn.includeInLayout = false;

							if (data.talking && !rolledOver) {
								muteImg.filters = [new GlowFilter(getStyle("glowFilterColor"), 1, 6, 6, 2, BitmapFilterQuality.HIGH, false, false)];
							} else {
								muteImg.filters = [];
							}
						} else {
							muteImg.visible = !rolledOver;
							muteImg.includeInLayout = !rolledOver;
							muteBtn.visible = rolledOver;
							muteBtn.includeInLayout = rolledOver;
							muteBtn.enabled = true;

							if (data.talking && !rolledOver) {
								muteImg.filters = [new GlowFilter(getStyle("glowFilterColor"), 1, 6, 6, 2, BitmapFilterQuality.HIGH, false, false)];
							} else {
								muteImg.filters = [];
							}
						}
					}

					if (data.role == Role.MODERATOR) {
						lockImg.visible = false;
						lockImg.includeInLayout = true;
						lockBtn.visible = false;
						lockBtn.includeInLayout = false;
					} else if (moderator && ls.isAnythingLocked()) {
						lockImg.visible = !rolledOver;
						lockImg.includeInLayout = !rolledOver;
						lockBtn.visible = rolledOver;
						lockBtn.includeInLayout = rolledOver;
					} else {
						//If it can't be clicked, only show image
						lockImg.visible = true;
						lockImg.includeInLayout = true;
						lockBtn.visible = false;
						lockBtn.includeInLayout = false;
					}

					if (data.hasStream) {
						if (!webcamsOnlyForModerator || UsersUtil.amIModerator()) {
							// if it's myself or if I'm watching all the streams from the given user, then don't activate the button
							if (data.me || data.isViewingAllStreams()) {
								webcamImg.visible = webcamImg.includeInLayout = true;
								webcamBtn.visible = webcamBtn.includeInLayout= false;
							} else {
								webcamImg.visible = webcamImg.includeInLayout = false;
								webcamBtn.visible = webcamBtn.includeInLayout = true;
							}
						}
						else {
							if (data.me || data.isViewingAllStreams() && data.role == Role.MODERATOR) {
								webcamImg.visible = webcamImg.includeInLayout = true;
								webcamBtn.visible = webcamBtn.includeInLayout= false;
							} else if (data.role != Role.MODERATOR) {
								webcamImg.visible = false;
								webcamImg.includeInLayout = true;
								webcamBtn.visible = webcamBtn.includeInLayout = false;
							}
							else {
								webcamImg.visible = webcamImg.includeInLayout = false;
								webcamBtn.visible = webcamBtn.includeInLayout = true;
							}
						}
					} else {
						webcamImg.visible = false;
						webcamImg.includeInLayout = true;
						webcamBtn.visible = webcamBtn.includeInLayout = false;
					}

					if (!rolledOver) {
						if (data.inVoiceConf) {
							if (data.listenOnly) {
								muteImg.source = getStyle("iconSound");
							} else if (data.muted) {
								muteImg.source = getStyle("iconAudioMuted");
							} else {
								muteImg.source = getStyle("iconAudio");
							}
						}

						if (data.locked && !data.presenter && ls.isAnythingLocked() || (!data.presenter && webcamsOnlyForModerator)) {
							lockImg.source = getStyle("iconLock");
						} else {
							lockImg.source = null;
						}
					} else {
						if (data.muted == rolledOverMute)
							muteBtn.setStyle("icon", getStyle("iconAudio"));
						else
							muteBtn.setStyle("icon", getStyle("iconAudioMuted"));

						if (data.locked == rolledOverLock)
							lockBtn.setStyle("icon", getStyle("iconUnlock"));
						else
							lockBtn.setStyle("icon", getStyle("iconLock"));
					}
				}
			}

			private function promoteUser():void {
				changeUserRole(Role.MODERATOR);
			}

			private function demoteUser():void {
				changeUserRole(Role.VIEWER);
			}

			private function changeUserRole(role:String):void {
				var changeRoleEvent:ChangeRoleEvent = new ChangeRoleEvent(data.userId, role);
				dispatchEvent(changeRoleEvent);
			}

			private function openSettings():void {
				if (data != null) {
					var actionsMenuData:Array = [];

					if (data.role != Role.VOICE_ONLY) {
						if (data.role == Role.MODERATOR) {
							actionsMenuData.push({
								label: ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.demoteUser',[data.name]),
								icon: getStyle('iconDemote'),
								callback: demoteUser
							});
						} else {
							actionsMenuData.push({
								label: ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.promoteUser',[data.name]),
								icon: getStyle('iconPromote'),
								callback: promoteUser
							});
						}
					}

					if (options.allowKickUser) {
						actionsMenuData.push({
							label: ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.kickUser',[data.name]),
							icon: getStyle('iconEject'),
							callback: kickUser
						});
					}

					// make sure the previous menu is closed before opening a new one
					// This could be improved to include a flag that tells if the menu is open,
					// but it would require an extra listener for the MenuCloseEvent.
					closeActionsMenu();

					actionsMenu = Menu.createMenu(null, actionsMenuData, true);
					actionsMenu.variableRowHeight = true;

					var settingsBtnPos:Point = settingsBtn.localToGlobal(new Point(0,0));

					var actionsMenuPos:Point = new Point();
					actionsMenuPos.x = settingsBtnPos.x + settingsBtn.width;
					actionsMenuPos.y = settingsBtnPos.y;

					actionsMenu.addEventListener(MenuEvent.ITEM_CLICK, menuClickHandler);
					actionsMenu.show(actionsMenuPos.x, actionsMenuPos.y);
					actionsMenu.setFocus();
				}
			}

			private function closeActionsMenu():void{
				if (actionsMenu) actionsMenu.hide();
			}
			
			private function menuClickHandler(e:MenuEvent):void {
				e.item.callback();
			}
		]]>
	</fx:Script>
	<mx:Canvas id="webcamCanvas" width="28" height="20" visible="{webcamImg.visible || webcamBtn.visible}">
		<mx:Image id="webcamImg" visible="false" source="{getStyle('iconWebcam')}"
				  horizontalCenter="0" verticalCenter="0"
				  toolTip="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.webcam')}" />
		<mx:Button id="webcamBtn" visible="false" includeInLayout="false" icon="{getStyle('iconWebcam')}"
				   width="28" height="20" horizontalCenter="0" verticalCenter="0"
				   enabled="true" click="viewCamera()"
				   toolTip="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.webcamBtn')}" />
	</mx:Canvas>
	
	<mx:Canvas id="muteCanvas" width="20" height="20" visible="{muteImg.visible || muteBtn.visible}">
		<mx:Image id="muteImg" visible="false" includeInLayout="true"
				  horizontalCenter="0" verticalCenter="0" />
		<mx:Button id="muteBtn" visible="false" includeInLayout="false" enabled="false" icon="{getStyle('iconAudio')}"
				   width="20" height="20"  horizontalCenter="0" verticalCenter="0"
				   click="toggleMuteState()"
				   mouseOver="muteMouseOverHandler()"
				   mouseOut="muteMouseOutHandler()"
				   toolTip="{data.muted ? ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.pushToTalk',[data.name]) : ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.pushToMute',[data.name])}" />
	</mx:Canvas>
	
	<mx:Canvas id="lockCanvas" width="20" height="20" visible="{lockImg.visible || lockBtn.visible}">
		<mx:Image id="lockImg" visible="false" includeInLayout="false"
				  horizontalCenter="0" verticalCenter="0" />
		<mx:Button id="lockBtn" visible="false" includeInLayout="false" enabled="false"
				   width="20" height="20" horizontalCenter="0" verticalCenter="0" click="toggleLockState()"
				   mouseOver="lockMouseOverHandler()"
				   mouseOut="lockMouseOutHandler()"
				   toolTip="{data.locked ? ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.pushToUnlock',[data.name]) : ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.pushToLock',[data.name])}" />		
	</mx:Canvas>

	<mx:Button id="settingsBtn"
			   visible="false"
			   width="20"
			   height="20"
			   click="openSettings()"
			   icon="{getStyle('iconSettings')}"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.users.settings.buttonTooltip')}"/>
	<!-- Helper objects because using BindingUtil with data break when the itemRenderer is recycled -->
	<mx:Image id="muteInd" includeInLayout="false" visible="{data.muted}" />
	<mx:Image id="voiceJoinedInd" includeInLayout="false" visible="{data.inVoiceConf}" />
	<mx:Image id="userLockedInd" includeInLayout="false" visible="{data.locked}" />
	<mx:Image id="hasStreamInd" includeInLayout="false" visible="{data.hasStream}" />
	<mx:Image id="viewingStreamInd" includeInLayout="false" visible="{data.viewingStream}" />
	<mx:Image id="listenOnlyInd" includeInLayout="false" visible="{data.listenOnly}" />
</mx:HBox>
