<?xml version="1.0" encoding="utf-8"?>

<!--
BigBlueButton open source conferencing system - http://www.bigbluebutton.org

Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).

BigBlueButton is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2.1 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

$Id: $
-->

<mdi:CustomMdiWindow xmlns:mx="library://ns.adobe.com/flex/mx"
                     xmlns:fx="http://ns.adobe.com/mxml/2009"
                     xmlns:mdi="org.bigbluebutton.common.*"
                     xmlns:flc="flexlib.controls.*"
                     implements="org.bigbluebutton.common.IBbbModuleWindow"
                     xmlns:mate="http://mate.asfusion.com/"
                     xmlns:views="org.bigbluebutton.main.views.*"
                     creationComplete="onCreationComplete()"
                     title="{ResourceUtil.getInstance().getString('bbb.users.title')}"
                     showCloseButton="false">
  
  <fx:Declarations>
    <mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
    <mate:Listener type="{ShortcutEvent.RAISE_HAND}" method="remoteRaiseHand" />
    <mate:Listener type="{ShortcutEvent.FOCUS_USERS_WINDOW}" method="focusWindow" />
    <mate:Listener type="{ShortcutEvent.MUTE_ALL_BUT_PRES}" method="remoteMuteAllButPres" />
    <mate:Listener type="{ShortcutEvent.OPEN_BREAKOUT_ROOMS}" method="handleOpenBreakoutRooms" />
    <mate:Listener type="{MeetingMutedEvent.MEETING_MUTED}" method="handleMeetingMuted" />
    <mate:Listener type="{LockControlEvent.CHANGED_LOCK_SETTINGS}" method="setRoomLocked" />
	<mate:Listener type="{BBBEvent.CHANGE_WEBCAMS_ONLY_FOR_MODERATOR}" method="setRoomLocked"/>
    <mate:Listener type="{BreakoutRoomEvent.UPDATE_REMAINING_TIME_PARENT}" method="handleRemainingTimeUpdate" />
    <mate:Listener type="{BreakoutRoomEvent.BREAKOUT_JOIN_URL}" method="handleBreakoutJoinUrl" />
    <mate:Listener type="{ChangeMyRole.CHANGE_MY_ROLE_EVENT}" method="onChangeMyRole" />
    <mate:Listener type="{UserJoinedEvent.JOINED}" method="handleUserJoinedEvent" />    
    <mate:Listener type="{BreakoutRoomsListUpdatedEvent.BREAKOUT_ROOMS_LIST_UPDATED_EVENT}" method="handleBreakoutRoomsListUpdatedEvent" />
	<mate:Listener type="{BreakoutRoomsUsersListUpdatedEvent.BREAKOUT_ROOMS_LIST_UPDATED_EVENT}" method="handleBreakoutRoomsUsersListUpdatedEvent" />
    <mate:Listener type="{UserStatusChangedEvent.USER_STATUS_CHANGED}" method="handleUserStatusChangedEvent" />
    <mate:Listener type="{BBBEvent.USER_VOICE_JOINED}" method="handleUserJoinedVoiceConfEvent" />
    <mate:Listener type="{BBBEvent.USER_VOICE_LEFT}" method="handleUserLeftVoiceConfEvent" />
    <mate:Listener type="{BBBEvent.USER_VOICE_MUTED}" method="handleUserMutedEvent" />
    <mate:Listener type="{EventConstants.USER_TALKING}" method="handleUserTalkingEvent" />
    <mate:Listener type="{UserLeftEvent.LEFT}" method="handleUserLeftEvent" />
    <mate:Listener type="{UserEmojiChangedEvent.USER_EMOJI_CHANGED}" method="handleUserEmojiChangedEvent" />
    <mate:Listener type="{SwitchedPresenterEvent.SWITCHED_PRESENTER}" method="handleSwitchedPresenterEvent" />
    <mate:Listener type="{StoppedViewingWebcamEvent.STOPPED_VIEWING_WEBCAM}" method="handleStoppedViewingWebcamEvent" />
    <mate:Listener type="{StartedViewingWebcamEvent.STARTED_VIEWING_WEBCAM}" method="handleStartedViewingWebcamEvent" />
    <mate:Listener type="{StreamStartedEvent.STREAM_STARTED}" method="handleStreamStartedEvent" />
    <mate:Listener type="{StreamStoppedEvent.STREAM_STOPPED}" method="handleStreamStoppedEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="handleMadeViewerEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="handleMadePresenterEvent" />

  </fx:Declarations>
  <fx:Script>
    <![CDATA[
		import com.asfusion.mate.events.Dispatcher;
		
		import flash.net.navigateToURL;
		
		import mx.binding.utils.BindingUtils;
		import mx.collections.ArrayCollection;
		import mx.controls.Menu;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.controls.listClasses.IListItemRenderer;
		import mx.core.FlexGlobals;
		import mx.core.mx_internal;
		import mx.events.CollectionEvent;
		import mx.events.ListEvent;
		import mx.events.MenuEvent;
		import mx.managers.PopUpManager;
		
		import org.as3commons.logging.api.ILogger;
		import org.as3commons.logging.api.getClassLogger;
		import org.bigbluebutton.common.IBbbModuleWindow;
		import org.bigbluebutton.common.Role;
		import org.bigbluebutton.common.events.LocaleChangeEvent;
		import org.bigbluebutton.core.EventConstants;
		import org.bigbluebutton.core.KeyboardUtil;
		import org.bigbluebutton.core.PopUpUtil;
		import org.bigbluebutton.core.TimerUtil;
		import org.bigbluebutton.core.UsersUtil;
		import org.bigbluebutton.core.events.BreakoutRoomsListUpdatedEvent;
		import org.bigbluebutton.core.events.BreakoutRoomsUsersListUpdatedEvent;
		import org.bigbluebutton.core.events.CoreEvent;
		import org.bigbluebutton.core.events.LockControlEvent;
		import org.bigbluebutton.core.events.UserEmojiChangedEvent;
		import org.bigbluebutton.core.events.UserStatusChangedEvent;
		import org.bigbluebutton.core.events.VoiceConfEvent;
		import org.bigbluebutton.core.model.LiveMeeting;
		import org.bigbluebutton.core.model.users.User2x;
		import org.bigbluebutton.core.vo.LockSettingsVO;
		import org.bigbluebutton.main.events.BBBEvent;
		import org.bigbluebutton.main.events.BreakoutRoomEvent;
		import org.bigbluebutton.main.events.MadePresenterEvent;
		import org.bigbluebutton.main.events.ShortcutEvent;
		import org.bigbluebutton.main.events.StartedViewingWebcamEvent;
		import org.bigbluebutton.main.events.StoppedViewingWebcamEvent;
		import org.bigbluebutton.main.events.SwitchedPresenterEvent;
		import org.bigbluebutton.main.events.UserJoinedEvent;
		import org.bigbluebutton.main.events.UserLeftEvent;
		import org.bigbluebutton.main.model.users.BreakoutRoom;
		import org.bigbluebutton.main.model.users.events.ChangeMyRole;
		import org.bigbluebutton.main.model.users.events.EmojiStatusEvent;
		import org.bigbluebutton.main.model.users.events.KickUserEvent;
		import org.bigbluebutton.main.model.users.events.RoleChangeEvent;
		import org.bigbluebutton.main.model.users.events.StreamStartedEvent;
		import org.bigbluebutton.main.model.users.events.StreamStoppedEvent;
		import org.bigbluebutton.main.views.MainCanvas;
		import org.bigbluebutton.main.views.WellPositionedMenu;
		import org.bigbluebutton.modules.users.events.MeetingMutedEvent;
		import org.bigbluebutton.modules.users.events.UsersRollEvent;
		import org.bigbluebutton.modules.users.model.BreakoutRoomsOptions;
		import org.bigbluebutton.modules.users.model.UsersOptions;
		import org.bigbluebutton.modules.users.views.model.BBBUser2x;
		import org.bigbluebutton.util.i18n.ResourceUtil;
      
      private static const LOGGER:ILogger = getClassLogger(UsersWindow);
      
      private var dispatcher:Dispatcher;
      
      private var keyCombos:Object;
      private var modifier:String;
      
      [Bindable]
      private var roomMuted:Boolean = false;
      
      [Bindable]
      private var roomLocked:Boolean = false;
      
      private var paramsMenu:Menu;
      private var paramsMenuData:Array = [];
      
      [Bindable]
      public var partOptions:UsersOptions;
      
      [Bindable]
      public var breakoutOptions:BreakoutRoomsOptions;
      
      [Bindable]
      private var users:ArrayCollection = new ArrayCollection();
      
      [Bindable]
      private var breakoutRoomsList:ArrayCollection = new ArrayCollection();
      
      [Bindable]
      private var amIModerator:Boolean = false;
      
      [Bindable]
      private var amIPresenter:Boolean = false;
      
      private var joinWindow : JoinBreakoutRoomWindow;
      
      private const MAKE_PRESENTER:String = "Make Presenter";
      private const KICK_USER:String = "Kick User";
      private const MUTE_USER:String = "Mute User";
      private const MUTE_ALL_USER:String = "Mute All User";
      private const FOCUS_BREAKOUT_ROOMS_LIST:String = "Focus Breakout Rooms";
      private const LISTEN_TO_BREAKOUT_ROOM:String = "Listen To Breakout Room";
      private const JOIN_BREAKOUT_ROOM:String = "Join Breakout Room";
      
      private const STATUS_GRID_WIDTH:int = 50;
      private const NAME_GRID_MIN_WIDTH:int = 80;
      private const MEDIA_GRID_WIDTH:int = 100;
      
      private var muteMeRolled:Boolean = false;
      
      private var handler: UsersWindowEventHandler = new UsersWindowEventHandler();
      
      private function handleMadePresenterEvent(event: MadePresenterEvent): void {
        handler.handleMadePresenterEvent(event.userID);
      }
      
      private function handleMadeViewerEvent(event: MadePresenterEvent): void {
        handler.handleMadeVieweEvent(event.userID);
      }
      
      private function handleUserEmojiChangedEvent(event: UserEmojiChangedEvent):void {
        handler.handleUserEmojiChangedEvent(event.userId, event.emoji);
      }
      
      private function handleSwitchedPresenterEvent(event: SwitchedPresenterEvent):void {
        handler.handleSwitchedPresenterEvent(event.amIPresenter, event.newPresenterUserID);
      }
      
      private function handleUserJoinedVoiceConfEvent(event: BBBEvent): void {
        handler.handleUserJoinedVoiceConfEvent(event.payload.userID);  
      }
      
      private function handleUserLeftVoiceConfEvent(event: BBBEvent): void {
        handler.handleUserLeftVoiceConfEvent(event.payload.userID);  
      }
      
      private function handleUserMutedEvent(event: BBBEvent): void {
        handler.handleUserMutedEvent(event.payload.userID, event.payload.muted);  
      }
      
      private function handleUserTalkingEvent(event: CoreEvent): void {
        handler.handleUserTalkingEvent(event.message.userID, event.message.talking);  
      }
      
      private function handleUserLeftEvent(event: UserLeftEvent): void {
        handler.handleUserLeftEvent(event.userID);  
      }
      
      private function handleStoppedViewingWebcamEvent(event: StoppedViewingWebcamEvent): void {
        handler.handleStoppedViewingWebcamEvent(event);  
      }
      
      private function handleStartedViewingWebcamEvent(event: StartedViewingWebcamEvent): void {
        handler.handleStartedViewingWebcamEvent(event);  
      }
      
      private function handleStreamStartedEvent(event: StreamStartedEvent): void {
        handler.handleStreamStartedEvent(event);  
      }
      
      private function handleStreamStoppedEvent(event: StreamStoppedEvent): void {
        handler.handleStreamStoppedEvent(event);  
      }
      
      private function handleUserJoinedEvent(event: UserJoinedEvent):void {
        handler.handleUserJoinedEvent(event);
      }
      
      private function handleUserStatusChangedEvent(event: UserStatusChangedEvent): void {
        handler.userStatusChanged(event.userId);
      }
      
      private function onChangeMyRole(e:ChangeMyRole):void {
        refreshRole(e.role == Role.MODERATOR);
      }
      
      private function onCreationComplete():void {
        dispatcher = new Dispatcher();
        
        handler.populateAllUsers(usersGrid)
        users = handler.users;
        
        breakoutRoomsList = LiveMeeting.inst().breakoutRooms.breakoutRooms;
        breakoutRoomsList.addEventListener(CollectionEvent.COLLECTION_CHANGE, breakoutRoomsListChangeListener);
        
        amIModerator = UsersUtil.amIModerator();
        amIPresenter = UsersUtil.amIPresenter();
        
        settingsBtn.visible = settingsBtn.includeInLayout = partOptions.enableSettingsButton && amIModerator;
        closeRoomsBtn.visible = closeRoomsBtn.includeInLayout = amIModerator;
        refreshRole(UsersUtil.amIModerator());
        emojiStatusBtn.visible = emojiStatusBtn.includeInLayout = partOptions.enableEmojiStatus;
        
        BindingUtils.bindSetter(updateNumberofUsers, users, "length");
        
        this.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
        ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
        
        modifier = ExternalInterface.call("determineModifier");
        loadKeyCombos(modifier);
        
        resourcesChanged();
        
        roomMuted = LiveMeeting.inst().meetingStatus.isMeetingMuted;
        setRoomLocked();
        
        titleBarOverlay.tabIndex = partOptions.baseTabIndex;
        minimizeBtn.tabIndex = partOptions.baseTabIndex+1;
        maximizeRestoreBtn.tabIndex = partOptions.baseTabIndex+2;
        closeBtn.tabIndex = partOptions.baseTabIndex+3;
        
        stage.addEventListener(MouseEvent.MOUSE_OVER, handleStageMouseOver);
        usersGrid.addEventListener(MouseEvent.MOUSE_OVER, handleUsersGridMouseOver);
        
        addContextMenuItems();
      }
      
      private function refreshRole(moderator:Boolean = true):void {
        amIModerator = moderator;
        
        settingsBtn.visible = settingsBtn.includeInLayout = partOptions.enableSettingsButton && amIModerator;
        
        changeButtons(UsersUtil.amIPresenter());
        
        if (paramsMenu) paramsMenu.hide();
      }
      
      public function getPrefferedPosition():String {
        return MainCanvas.TOP_LEFT;
      }
      
      private function addContextMenuItems():void {
        var contextMenuItems:Array = new Array();
        
        var exportUsersItem:ContextMenuItem = new ContextMenuItem(ResourceUtil.getInstance().getString("bbb.users.usersGrid.contextmenu.exportusers"));
        exportUsersItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, exportUsersItemHandler);
        contextMenuItems.push(exportUsersItem);
        
        this.customContextMenuItems = contextMenuItems;
      }
      
      private function exportUsersItemHandler(e:ContextMenuEvent):void {
        if (e.target.caption == ResourceUtil.getInstance().getString("bbb.users.usersGrid.contextmenu.exportusers")) {
          var userNames:String = "";
          var returnStr:String = (Capabilities.os.indexOf("Windows") >= 0 ? "\r\n" : "\r");
          for (var i:int = 0; i < users.length; i++) {
            userNames += users[i].name + returnStr;
          }
          System.setClipboard(userNames);
        }
      }
      
      private function updateNumberofUsers(numUsers:int):void {
        if (numUsers > 8)
          this.title = ResourceUtil.getInstance().getString('bbb.users.title', [":", numUsers]);
        else
          this.title = ResourceUtil.getInstance().getString('bbb.users.title', ["", ""]);
      }
      
      private function localeChanged(e:Event):void {
        updateNumberofUsers(users.length);
        resourcesChanged();
      }
      
      private function changeButtons(presenter:Boolean):void {
        emojiStatusBtn.visible = emojiStatusBtn.includeInLayout = partOptions.enableEmojiStatus;
      }
      
      /*
      * Work around for a bug with the users grid. When you click on one of the buttons in an item renderer the client
      * locks up briefly and any mouse movements while the client is locked up are ignored. This means that roll outs
      * aren't fired if the mouse is moved quickly while the client is updating. This block of code watches for
      * anything outside of the usersGrid being rolled over and notifies the item renders that they should reset.
      *
      *  - Chad
      */
      private var rolledOver:Boolean = false;
      
      private var o:Object;
      
      private function handleUsersGridMouseOver(e:MouseEvent):void {
        rolledOver = true;
        o = e.target;
      }
      
      private function handleStageMouseOver(e:MouseEvent):void {
        if (rolledOver && o != e.target) {
          rolledOver = false;
          o = null;
          var rollEvent:UsersRollEvent = new UsersRollEvent(UsersRollEvent.USER_ROLL_OUT, null);
          dispatcher.dispatchEvent(rollEvent);
        }
      }
      
      /*
      * End of the work around.
      */
      private function onItemRollOver(event:ListEvent):void {
        var item:IListItemRenderer = event.itemRenderer;
        var user:BBBUser2x = item.data as BBBUser2x;
        var rollEvent:UsersRollEvent = new UsersRollEvent(UsersRollEvent.USER_ROLL_OVER, user.userId);
        dispatcher.dispatchEvent(rollEvent);
      }
      
      private function onItemRollOut(event:ListEvent):void {
        var item:IListItemRenderer = event.itemRenderer;
        var user:BBBUser2x = item.data as BBBUser2x;
        var rollEvent:UsersRollEvent = new UsersRollEvent(UsersRollEvent.USER_ROLL_OUT, user.userId);
        dispatcher.dispatchEvent(rollEvent);
      }
      
      private function openEmojiStatusMenu():void {
        var moodMenu:MoodMenu = PopUpUtil.createNonModalPopUp(DisplayObject(FlexGlobals.topLevelApplication), MoodMenu, false) as MoodMenu;
        moodMenu.btn = emojiStatusBtn;
        moodMenu.show();
      }
      
      private function openSettings():void {
        paramsMenuData = [];
        paramsMenuData.push({label: ResourceUtil.getInstance().getString('bbb.users.settings.clearAllStatus'), icon: getStyle('iconClearStatus'), handler: resetEmojiStatuses});
        
		if (partOptions.moderatorUnmute == true) {
	      if (!roomMuted) {
	        paramsMenuData.push({label: ResourceUtil.getInstance().getString('bbb.users.settings.muteAll'), icon: getStyle('iconAudioMuted'), handler: muteAll});
	        var presenter:User2x = UsersUtil.getPresenter();
	        if (presenter != null)
	          paramsMenuData.push({label: ResourceUtil.getInstance().getString('bbb.users.settings.muteAllExcept') + ": " + presenter.name, icon: getStyle('iconAudioMuted'), handler: muteAlmostAll});
	      } else
	        paramsMenuData.push({label: ResourceUtil.getInstance().getString('bbb.users.settings.unmuteAll'), icon: getStyle('iconAudio'), handler: muteAll});
		}
        
        paramsMenuData.push({label: ResourceUtil.getInstance().getString('bbb.users.settings.lockSettings'), icon: getStyle('iconLock'), handler: lockSettings});
        if (breakoutOptions.enabled && amIModerator && !UsersUtil.isBreakout()) {
          if (breakoutRoomsList.length == 0) {
            paramsMenuData.push({label: ResourceUtil.getInstance().getString('bbb.users.settings.breakoutRooms'), icon: getStyle('iconRooms'), handler: breakoutRooms});
          } else {
            paramsMenuData.push({label: ResourceUtil.getInstance().getString('bbb.users.settings.sendBreakoutRoomsInvitations'), handler: sendBreakoutRoomsInvitations});
          }
        }
        
        // make sure the previous menu is closed before opening a new one
        // This could be improved to include a flag that tells if the menu is open,
        // but it would require an extra listener for the MenuCloseEvent.
        if (paramsMenu) {
          paramsMenu.removeEventListener(MenuEvent.ITEM_CLICK, menuClickHandler);
          paramsMenu.hide();
        }
        paramsMenu = WellPositionedMenu.createMenu(null, paramsMenuData, settingsBtn, true);
        paramsMenu.addEventListener(MenuEvent.ITEM_CLICK, menuClickHandler);
        paramsMenu.show();
      }
      
      private function menuClickHandler(e:MenuEvent):void {
        if (paramsMenuData[e.index] != undefined && paramsMenuData[e.index].handler != undefined) {
          paramsMenuData[e.index].handler();
        }
      }
      
	  private function setRoomLocked(e:Event = null):void {
		  var lockSettings:LockSettingsVO = UsersUtil.getLockSettings();
		  roomLocked = (lockSettings.isAnythingLocked() || LiveMeeting.inst().meeting.webcamsOnlyForModerator) && (lockSettings.getLockOnJoin() || UsersUtil.isAnyoneLocked());
	  }
      
      private function lockSettings():void {
        var event:LockControlEvent = new LockControlEvent(LockControlEvent.OPEN_LOCK_SETTINGS);
        dispatcher.dispatchEvent(event);
      }
      private function breakoutRooms():void {
        var event:BreakoutRoomEvent = new BreakoutRoomEvent(BreakoutRoomEvent.OPEN_BREAKOUT_ROOMS_PANEL);
        event.joinMode = "create";
        event.record = breakoutOptions.record;
        dispatcher.dispatchEvent(event);
      }
      
      private function sendBreakoutRoomsInvitations():void {
        var event:BreakoutRoomEvent = new BreakoutRoomEvent(BreakoutRoomEvent.OPEN_BREAKOUT_ROOMS_PANEL);
        event.joinMode = "invite";
        event.record = breakoutOptions.record;
        dispatcher.dispatchEvent(event);
      }
      
      private function handleRemainingTimeUpdate(event:BreakoutRoomEvent):void {
				// The label.id is used to determine message to display. So make sure
				// you change in the TimerUtil if you change the label.
        TimerUtil.setCountDownTimer(breakoutTimeLabel, event.durationInMinutes);
      }
      
      private function breakoutRoomsListChangeListener(event:CollectionEvent):void {
        if (breakoutRoomsList.length == 0) {
          breakoutTimeLabel.text = "...";
					// The label.id is used to determine message to display. So make sure
					// you change in the TimerUtil if you change the label.
          TimerUtil.stopTimer(breakoutTimeLabel.id);
          // All breakout rooms were close we don't need to display the join URL alert anymore
          removeJoinWindow();
        }
      }
      
      private function handleBreakoutRoomsListUpdatedEvent(event: BreakoutRoomsListUpdatedEvent):void {
        breakoutRoomsList = LiveMeeting.inst().breakoutRooms.breakoutRooms;
        breakoutRoomsList.refresh();
      }
		
	  private function handleBreakoutRoomsUsersListUpdatedEvent(event:BreakoutRoomsUsersListUpdatedEvent) : void {
		  handler.handleBreakoutRoomsUsersListUpdatedEvent();
	  }
      
      private function handleBreakoutJoinUrl(event:BreakoutRoomEvent):void {
		if (!LiveMeeting.inst().breakoutRooms.joinRequestedByUser) {
			// We display only one alert
			removeJoinWindow();
			joinWindow = PopUpUtil.createModalPopUp(FlexGlobals.topLevelApplication as DisplayObject, JoinBreakoutRoomWindow, true) as JoinBreakoutRoomWindow;
			joinWindow.setBreakoutRoomSettings(event.breakoutMeetingSequence, event.joinURL);
		}
		else {
			LiveMeeting.inst().breakoutRooms.joinRequestedByUser = false;
			navigateToURL(new URLRequest(event.joinURL), "_blank");
		}
      }
		
      private function removeJoinWindow():void {
        if (joinWindow != null) {
          // @todo: any way using PopUpUtil ?
          PopUpManager.removePopUp(joinWindow);
        }
      }
      
      private function handleMeetingMuted(e:MeetingMutedEvent):void {
        roomMuted = LiveMeeting.inst().meetingStatus.isMeetingMuted;
      }
      
      private function muteAll():void {
        if (amIModerator) {
          if (!roomMuted) {
            var muteCommand:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_ALL);
            dispatchEvent(muteCommand);
            roomMuted = true;
          } else {
            var unmuteCommand:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.UNMUTE_ALL);
            dispatchEvent(unmuteCommand);
            roomMuted = false;
          }
        }
      }
      
      private function muteAlmostAll():void {
        if (amIModerator) {
          if (!roomMuted) {
            var muteCommand:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_ALMOST_ALL);
            dispatchEvent(muteCommand);
            roomMuted = true;
          }
        }
      }
      
      private function resetEmojiStatuses():void {
        for (var i:int = 0; i < users.length; i++) {
          var p:BBBUser2x = users.getItemAt(i) as BBBUser2x;
          if (p.hasEmojiStatus)
            dispatchEvent(new EmojiStatusEvent(EmojiStatusEvent.EMOJI_STATUS, "none", p.userId));
        }
      }
      
      override protected function resourcesChanged():void {
        super.resourcesChanged();
        if (users.length > 8)
          this.title = ResourceUtil.getInstance().getString('bbb.users.title', [":", users.length]);
        else
          this.title = ResourceUtil.getInstance().getString('bbb.users.title', ["", ""]);
        
        if (titleBarOverlay != null) {
          titleBarOverlay.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.titleBar');
        }
        
        if (windowControls != null) {
          minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
          minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.users.minimizeBtn.accessibilityName");
          
          maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
          maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.users.maximizeRestoreBtn.accessibilityName");
        }
        
        if (emojiStatusBtn) {
          emojiStatusBtn.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.emojiStatusBtn.toolTip');
        }
        
        addContextMenuItems();
      }
      
      private function loadKeyCombos(modifier:String):void {
        keyCombos = new Object(); // always start with a fresh array bbb.shortcutkey.users.muteall
        keyCombos[modifier + (ResourceUtil.getInstance().getString('bbb.shortcutkey.users.makePresenter') as String)] = MAKE_PRESENTER;
        if (! UsersUtil.isBreakout()) {
          keyCombos[modifier + (ResourceUtil.getInstance().getString('bbb.shortcutkey.users.kick') as String)] = KICK_USER;
        }
        keyCombos[modifier + (ResourceUtil.getInstance().getString('bbb.shortcutkey.users.mute') as String)] = MUTE_USER;
        keyCombos[modifier + (ResourceUtil.getInstance().getString('bbb.shortcutkey.users.muteall') as String)] = MUTE_ALL_USER;
        keyCombos[modifier + (ResourceUtil.getInstance().getString('bbb.shortcutkey.users.focusBreakoutRooms') as String)] = FOCUS_BREAKOUT_ROOMS_LIST;
        keyCombos[modifier + (ResourceUtil.getInstance().getString('bbb.shortcutkey.users.listenToBreakoutRoom') as String)] = LISTEN_TO_BREAKOUT_ROOM;
        keyCombos[modifier + (ResourceUtil.getInstance().getString('bbb.shortcutkey.users.joinBreakoutRoom') as String)] = JOIN_BREAKOUT_ROOM;
        //TODO Include shortcuts to lock control
        keyCombos[modifier + (ResourceUtil.getInstance().getString('bbb.shortcutkey.general.maximize') as String)] = ShortcutEvent.MAXIMIZE_USERS;
        keyCombos[modifier + (ResourceUtil.getInstance().getString('bbb.shortcutkey.general.minimize') as String)] = ShortcutEvent.MINIMIZE_USERS;
      }
      
      // Handle general-access hotkeys, regardless of what window the user is focused in
      private function handleKeyDown(e:KeyboardEvent):void {
        if (keyCombos == null) loadKeyCombos(modifier);
        var keyPress:String = KeyboardUtil.buildPressedKeys(e);
        if (keyCombos[keyPress]) {
          switch (keyCombos[keyPress]) {
            case MAKE_PRESENTER:
              remoteMakePresenter();
              break;
            case KICK_USER:
              remoteKickUser();
              break;
            case MUTE_USER:
              remoteMuteUser();
              break;
            case MUTE_ALL_USER:
              muteAll();
              break;
            case ShortcutEvent.MAXIMIZE_USERS:
              remoteMaximize();
              break;
            case ShortcutEvent.MINIMIZE_USERS:
              remoteMinimize();
              break;
          }
        }
      }
      
      private function endAllBreakoutRoomsHandler(event:MouseEvent):void {
        dispatcher.dispatchEvent(new BreakoutRoomEvent(BreakoutRoomEvent.END_ALL_BREAKOUT_ROOMS));
      }
      
      private function focusWindow(e:ShortcutEvent):void {
        if (this.visible) {
          focusManager.setFocus(titleBarOverlay);
        }
      }
      
      public function remoteRaiseHand(e:ShortcutEvent):void{
        if (UsersUtil.myEmoji() == "raiseHand")
          dispatchEvent(new EmojiStatusEvent(EmojiStatusEvent.EMOJI_STATUS, "none"));
        else 
          dispatchEvent(new EmojiStatusEvent(EmojiStatusEvent.EMOJI_STATUS, "raiseHand"));
      }
      
      private function remoteMinimize():void {
        if (!minimized) {
          this.minimize();
        }
      }
      
      private function remoteMaximize():void {
        if (!maximized && !minimized) {
          this.maximize();
        } else {
          this.restore();
        }
      }
      
      public function remoteMakePresenter():void {
        if (amIModerator && usersGrid.selectedIndex != -1) {
          var selData:Object = usersGrid.selectedItem;
          
          if (!selData.presenter && !selData.phoneUser) {
            var e:RoleChangeEvent = new RoleChangeEvent(RoleChangeEvent.ASSIGN_PRESENTER);
            e.userid = selData.userID;
            e.username = selData.name;
            dispatchEvent(e);
          }
        }
      }
      
      public function remoteKickUser():void {
        if (amIModerator && usersGrid.selectedIndex != -1 && partOptions.allowKickUser && !UsersUtil.isBreakout()) {
          var selData:Object = usersGrid.selectedItem;
          
          if (!selData.me)
            dispatchEvent(new KickUserEvent(selData.userID));
        }
      }
      
      public function remoteMuteUser():void {
        if (amIModerator && usersGrid.selectedIndex != -1) {
          var selData:BBBUser2x = (usersGrid.selectedItem) as BBBUser2x;
          
          if (selData.inVoiceConf) {
            var e:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_USER);
            e.userid = selData.userId;
            e.mute = !selData.muted;
            dispatchEvent(e);
          }
        }
      }
      
      public function remoteFocusBreakoutRooms() : void {
        if (roomsGrid && roomsBox.visible) {
          focusManager.setFocus(roomsGrid);
          roomsGrid.drawFocus(true);			
        }
      }
      
      public function listenToBreakoutRoom() : void {
        if (roomsGrid && roomsBox.visible && roomsGrid.selectedIndex > -1) {
          // roomsGrid.selectedIndex + 1 is needed as the first index of rendererArray contains the header renderes
          var renderer : RoomActionsRenderer = roomsGrid.mx_internal::rendererArray[roomsGrid.selectedIndex + 1][2];
          if (renderer.listenBtn.visible) {
            renderer.listenBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
          }
        }
      }
      
      public function joinBreakoutRoom() : void {
        if (roomsGrid && roomsBox.visible && roomsGrid.selectedIndex > -1) {
          // roomsGrid.selectedIndex + 1 is needed as the first index of rendererArray contains the header renderes
          var renderer : RoomActionsRenderer = roomsGrid.mx_internal::rendererArray[roomsGrid.selectedIndex + 1][2];
          if (renderer.joinBtn.visible) {
            renderer.joinBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
          }
        }
      }
      
      private function remoteMuteAllButPres(e:ShortcutEvent):void{
        if (!roomMuted) {
          muteAlmostAll();
        } else {
          muteAll();
        }
      }
      
      private function handleOpenBreakoutRooms(e:ShortcutEvent):void{
        if (breakoutOptions.enabled && amIModerator && !UsersUtil.isBreakout()) {
          breakoutRooms();
        }
      }
      
      private function breakoutRoomNameLabelFunction(item:Object, column:DataGridColumn) : String {
        return ResourceUtil.getInstance().getString('bbb.users.roomsGrid.room') + " " + item.sequence;
      }
      
      private function breakoutRoomsToolTip(item:Object):String {
        var room:BreakoutRoom = item as BreakoutRoom;
        var names:Array = [];
        for (var i:int = 0; i < room.users.length; i++) {
          names.push(room.users.getItemAt(i)["name"]);
        }
        return names.join("\n");
      }
    ]]>
  </fx:Script>
  
  <fx:Declarations>
    <mdi:TabIndexer id="tabIndexer" startIndex="{partOptions.baseTabIndex + 5}" tabIndices="{[usersGrid, roomsGrid, closeRoomsBtn, emojiStatusBtn, settingsBtn]}"/>
  </fx:Declarations>
  
  <views:BBBDataGrid id="usersGrid" dataProvider="{users}" editable="false" sortableColumns="true"
                     dragEnabled="false" width="100%" height="100%" draggableColumns="false" styleName="usersGridStyle"
                     itemRollOver="onItemRollOver(event)"
                     itemRollOut="onItemRollOut(event)"
                     showHeaders="false"
                     rowHeight="35"
                     minWidth="{STATUS_GRID_WIDTH + NAME_GRID_MIN_WIDTH + MEDIA_GRID_WIDTH}"
                     accessibilityName="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.accessibilityName')}" >
    <views:columns>
      <mx:DataGridColumn dataField="userStatus" headerText="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer')}" editable="false" width="{STATUS_GRID_WIDTH}" resizable="false"
                         itemRenderer="org.bigbluebutton.modules.users.views.StatusItemRenderer" sortable="false" />
      <mx:DataGridColumn dataField="name" headerText="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.nameItemRenderer')}" editable="false" sortable="false"
                         itemRenderer="org.bigbluebutton.modules.users.views.NameItemRenderer"/>
      <mx:DataGridColumn dataField="media" headerText="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer')}" sortable="false" width="{MEDIA_GRID_WIDTH}" resizable="false"
                         itemRenderer="org.bigbluebutton.modules.users.views.MediaItemRenderer"/>
    </views:columns>
  </views:BBBDataGrid>
  
  <mx:VBox id="roomsBox" styleName="breakoutRoomsBox"
           visible="{breakoutRoomsList.length > 0}"
           includeInLayout="{breakoutRoomsList.length > 0}"
           horizontalScrollPolicy="off"
		   verticalScrollPolicy="off"
           width="100%">
    <mx:HBox width="100%">
      <mx:Label styleName="breakoutRoomUserWindowHeadingStyle" text="{ResourceUtil.getInstance().getString('bbb.users.breakout.breakoutRooms')}"/>
      <mx:Label styleName="breakoutRoomUserWindowHeadingStyle" width="100%" textAlign="right" id="breakoutTimeLabel"
                text="..." toolTip="{ResourceUtil.getInstance().getString('bbb.users.breakout.timer.toolTip')}"/>
    </mx:HBox>
    
    <views:BBBDataGrid id="roomsGrid" editable="false" sortableColumns="false"
					   rowCount="{breakoutRoomsList.length &lt; 6 ? breakoutRoomsList.length : 5}"
                       dataProvider="{breakoutRoomsList}" dataTipFunction="breakoutRoomsToolTip"
                       dragEnabled="false" width="100%" height="100%" draggableColumns="false"
                       accessibilityName="{ResourceUtil.getInstance().getString('bbb.users.breakout.breakoutRooms')}">
      <views:columns>
        <mx:DataGridColumn labelFunction="breakoutRoomNameLabelFunction"
                           showDataTips="true"
                           headerText="{ResourceUtil.getInstance().getString('bbb.users.roomsGrid.room')}" />
        <mx:DataGridColumn dataField="numberOfUsers"
                           showDataTips="true"
                           headerText="{ResourceUtil.getInstance().getString('bbb.users.roomsGrid.users')}"/>
        <mx:DataGridColumn dataField="meetingId"
                           headerText="{ResourceUtil.getInstance().getString('bbb.users.roomsGrid.action')}"
                           itemRenderer="org.bigbluebutton.modules.users.views.RoomActionsRenderer"/>
      </views:columns>
    </views:BBBDataGrid>
    
    <mx:Button id="closeRoomsBtn" label="{ResourceUtil.getInstance().getString('bbb.users.breakout.closeAllRooms')}"
               click="endAllBreakoutRoomsHandler(event)" width="100%"/>
  </mx:VBox>
	
  <mx:HRule width="100%" />
  
  <mx:ControlBar width="100%" horizontalAlign="right">
	<mx:VBox>
		  <mx:Label text="{ResourceUtil.getInstance().getString('bbb.users.roomMuted.text')}" visible="{roomMuted}" includeInLayout="{roomMuted}" />
		  <mx:Label text="{ResourceUtil.getInstance().getString('bbb.users.roomLocked.text')}" visible="{roomLocked}" includeInLayout="{roomLocked}" />
	</mx:VBox>
    <mx:Button id="emojiStatusBtn" icon="{getStyle('iconMood')}" width="30" height="30"
               accessibilityName="{ResourceUtil.getInstance().getString('bbb.users.emojiStatusBtn.toolTip')}"
               toolTip="{ResourceUtil.getInstance().getString('bbb.users.emojiStatusBtn.toolTip')}" click="openEmojiStatusMenu()" />
    <mx:Button id="settingsBtn" icon="{getStyle('iconSettings')}" width="30" height="30"
               toolTip="{ResourceUtil.getInstance().getString('bbb.users.settings.buttonTooltip')}" click="openSettings()" />
  </mx:ControlBar>
  
</mdi:CustomMdiWindow>
