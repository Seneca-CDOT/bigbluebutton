<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<EventMap xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns="http://mate.asfusion.com/" >
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import org.bigbluebutton.core.events.LockControlEvent;
			import org.bigbluebutton.core.events.SetWebcamsOnlyForModeratorEvent;
			import org.bigbluebutton.core.events.TokenValidEvent;
			import org.bigbluebutton.core.events.TokenValidReconnectEvent;
			import org.bigbluebutton.core.events.VoiceConfEvent;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.BreakoutRoomEvent;
			import org.bigbluebutton.main.events.LogoutEvent;
			import org.bigbluebutton.main.events.ResponseModeratorEvent;
			import org.bigbluebutton.main.events.UserServicesEvent;
			import org.bigbluebutton.main.model.GuestManager;
			import org.bigbluebutton.main.model.users.UserService;
			import org.bigbluebutton.main.model.users.events.BroadcastStartedEvent;
			import org.bigbluebutton.main.model.users.events.BroadcastStoppedEvent;
			import org.bigbluebutton.main.model.users.events.ChangeMyRole;
			import org.bigbluebutton.main.model.users.events.ChangeRoleEvent;
			import org.bigbluebutton.main.model.users.events.EmojiStatusEvent;
			import org.bigbluebutton.main.model.users.events.KickUserEvent;
			import org.bigbluebutton.main.model.users.events.RoleChangeEvent;
			<!--TODO: Move guest events to user events? -->


		]]>
	</fx:Script>
	
	<fx:Declarations>
		<EventHandlers type="{FlexEvent.APPLICATION_COMPLETE}" >
	    <ObjectBuilder generator="{UserService}" cache="global" />
	    <ObjectBuilder generator="{GuestManager}" cache="global" />
		</EventHandlers>
		
	  <EventHandlers type="{LogoutEvent.USER_LOGGED_OUT}" >
	    <MethodInvoker generator="{UserService}" method="logoutUser" />
	  </EventHandlers>
	
	  <EventHandlers type="{LogoutEvent.DISCONNECT_TEST}" >
	    <MethodInvoker generator="{UserService}" method="disconnectTest" />
	  </EventHandlers>
	  
	  <EventHandlers type="{UserServicesEvent.START_USER_SERVICES}" >
	    <MethodInvoker generator="{UserService}" method="startService" arguments="{event}" />
	  </EventHandlers>
	  

		
	  <!-- Breakout Room Stuff -->
	
	  <EventHandlers type="{BreakoutRoomEvent.CREATE_BREAKOUT_ROOMS}" >
	    <MethodInvoker generator="{UserService}" method="createBreakoutRooms" arguments="{event}" />
	  </EventHandlers>
	
	  <EventHandlers type="{BreakoutRoomEvent.REQUEST_BREAKOUT_JOIN_URL}" >
	    <MethodInvoker generator="{UserService}" method="requestBreakoutJoinUrl" arguments="{event}" />
	  </EventHandlers>
	
	  <EventHandlers type="{BreakoutRoomEvent.LISTEN_IN}" >
	    <MethodInvoker generator="{UserService}" method="listenInOnBreakout" arguments="{event}" />
	  </EventHandlers>
	
	  <EventHandlers type="{BreakoutRoomEvent.END_ALL_BREAKOUT_ROOMS}" >
	    <MethodInvoker generator="{UserService}" method="endAllBreakoutRooms" arguments="{event}" />
	  </EventHandlers>
	
	  <!-- Viewers Stuff -->
	  <EventHandlers type="{EmojiStatusEvent.EMOJI_STATUS}" >
	    <MethodInvoker generator="{UserService}" method="emojiStatus" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{BroadcastStartedEvent.BROADCAST_STARTED_EVENT}" >
	    <MethodInvoker generator="{UserService}" method="addStream" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{BroadcastStoppedEvent.BROADCAST_STOPPED}" >
	    <MethodInvoker generator="{UserService}" method="removeStream" arguments="{event}" />
	  </EventHandlers>
	  <!-- End Viewers Stuff -->
	  
	  <EventHandlers type="{KickUserEvent.KICK_USER}" >
	    <MethodInvoker generator="{UserService}" method="kickUser" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{BBBEvent.CHANGE_RECORDING_STATUS}">
	    <MethodInvoker generator="{UserService}" method="changeRecordingStatus" arguments="{event}" />
	  </EventHandlers>

		<EventHandlers type="{BBBEvent.RECORD_AND_CLEAR_PREVIOUS_MARKERS}">
			<MethodInvoker generator="{UserService}" method="recordAndClearPreviousMarkers" arguments="{event}" />
		</EventHandlers>

	  <EventHandlers type="{BBBEvent.ACTIVITY_RESPONSE_EVENT}">
	    <MethodInvoker generator="{UserService}" method="activityResponse" />
	  </EventHandlers>

    <EventHandlers type="{TokenValidEvent.TOKEN_VALID_EVENT}" >
      <MethodInvoker generator="{UserService}" method="tokenValidEventHandler" arguments="{event}" />
    </EventHandlers>

	<EventHandlers type="{TokenValidReconnectEvent.TOKEN_VALID_RECONNECT_EVENT}" >
		<MethodInvoker generator="{UserService}" method="tokenValidReconnectEventHandler" arguments="{event}" />
	</EventHandlers>

	  <EventHandlers type="{ChangeRoleEvent.CHANGE_ROLE_EVENT}" >
	    <MethodInvoker generator="{UserService}" method="changeRole" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{VoiceConfEvent.EJECT_USER}" >
	    <MethodInvoker generator="{UserService}" method="ejectUser" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{VoiceConfEvent.MUTE_USER}" >
	    <MethodInvoker generator="{UserService}" method="muteUnmuteUser" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{VoiceConfEvent.MUTE_ALL}" >
	    <MethodInvoker generator="{UserService}" method="muteAllUsers" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{VoiceConfEvent.UNMUTE_ALL}" >
	    <MethodInvoker generator="{UserService}" method="unmuteAllUsers" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{VoiceConfEvent.MUTE_ALMOST_ALL}" >
	    <MethodInvoker generator="{UserService}" method="muteAllUsersExceptPresenter" arguments="{event}" />
	  </EventHandlers>
	  
	  <!-- Lock Events -->
	  <EventHandlers type="{LockControlEvent.LOCK_ALL}" >
	    <MethodInvoker generator="{UserService}" method="lockAllUsers" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{LockControlEvent.UNLOCK_ALL}" >
	    <MethodInvoker generator="{UserService}" method="unlockAllUsers" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{LockControlEvent.LOCK_ALMOST_ALL}" >
	    <MethodInvoker generator="{UserService}" method="lockAlmostAllUsers" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{LockControlEvent.LOCK_USER}" >
	    <MethodInvoker generator="{UserService}" method="lockUser" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{LockControlEvent.UNLOCK_USER}" >
	    <MethodInvoker generator="{UserService}" method="unlockUser" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{LockControlEvent.SAVE_LOCK_SETTINGS}" >
	    <MethodInvoker generator="{UserService}" method="saveLockSettings" arguments="{event}" />
	  </EventHandlers>
		
	  <EventHandlers type="{SetWebcamsOnlyForModeratorEvent.UPDATE_WEBCAMS_ONLY_FOR_MODERATOR}" >
	    <MethodInvoker generator="{UserService}" method="updateWebcamsOnlyForModerator" arguments="{event}" />
	  </EventHandlers>
	  
	  <EventHandlers type="{RoleChangeEvent.ASSIGN_PRESENTER}">
	    <MethodInvoker generator="{UserService}" method="assignPresenter" arguments="{event}" />
	  </EventHandlers>
	
	  <EventHandlers type="{BBBEvent.RECONNECT_DISCONNECTED_EVENT}">
	    <MethodInvoker generator="{UserService}" method="onReconnecting"  arguments="{event}" />
	  </EventHandlers>
	  <!-- End Lock Events -->
	
	  <!-- Guest Events -->
	  <EventHandlers type="{BBBEvent.ADD_GUEST_TO_LIST}" >
	    <MethodInvoker generator="{GuestManager}" method="addGuest" arguments="{event}" />
	  </EventHandlers>
	
	  <EventHandlers type="{BBBEvent.REMOVE_GUEST_FROM_LIST}" >
	    <MethodInvoker generator="{GuestManager}" method="removeGuest" arguments="{event.payload.userId}" />
	  </EventHandlers>
	
	  <EventHandlers type="{LogoutEvent.MODERATOR_DENIED_ME}" >
	    <MethodInvoker generator="{UserService}" method="guestDisconnect" />
	    <MethodInvoker generator="{UserService}" method="logoutUser" />
	  </EventHandlers>
	
	  <EventHandlers type="{ResponseModeratorEvent.RESPONSE}" >
	    <MethodInvoker generator="{UserService}" method="responseToGuest" arguments="{event}" />
	    <!-- MethodInvoker generator="{GuestManager}" method="removeGuest" arguments="{event.userid}" /-->
	  </EventHandlers>
	
	  <EventHandlers type="{ResponseModeratorEvent.RESPONSE_ALL}" >
	    <MethodInvoker generator="{UserService}" method="responseToAllGuest" arguments="{event}" />
	  </EventHandlers>
	
	  <EventHandlers type="{BBBEvent.BROADCAST_GUEST_POLICY}" >
	    <MethodInvoker generator="{UserService}" method="setGuestPolicy" arguments="{event}" />
	  </EventHandlers>
	
	  <EventHandlers type="{BBBEvent.LOGOUT_END_MEETING_EVENT}" >
	    <MethodInvoker generator="{UserService}" method="logoutEndMeeting" />
	  </EventHandlers>
	
	  <EventHandlers type="{ChangeMyRole.CHANGE_MY_ROLE_EVENT}" >
	    <MethodInvoker generator="{GuestManager}" method="refreshGuestView" />
	  </EventHandlers>
	  <!-- End Guest Events -->
	</fx:Declarations>
</EventMap>
