<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<EventMap xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns="http://mate.asfusion.com/">
	<fx:Script>
		<![CDATA[
      import mx.events.FlexEvent;
      
      import org.bigbluebutton.core.EventConstants;
      import org.bigbluebutton.core.events.LockControlEvent;
      import org.bigbluebutton.main.model.users.events.ChangeMyRole;
      import org.bigbluebutton.modules.layout.events.ChangeLayoutEvent;
      import org.bigbluebutton.modules.layout.events.LayoutEvent;
      import org.bigbluebutton.modules.layout.events.LayoutFromRemoteEvent;
      import org.bigbluebutton.modules.layout.events.RemoteSyncLayoutEvent;
      import org.bigbluebutton.modules.layout.events.StartLayoutModuleEvent;
      import org.bigbluebutton.modules.layout.events.SyncLayoutEvent;
      import org.bigbluebutton.modules.layout.events.ViewInitializedEvent;
      import org.bigbluebutton.modules.layout.managers.LayoutManager;
      import org.bigbluebutton.modules.layout.services.LayoutService;
      import org.bigbluebutton.modules.layout.services.MessageReceiver;
      import org.bigbluebutton.modules.layout.services.MessageSender;
		]]>
	</fx:Script>

	<fx:Declarations>
		<EventHandlers type="{FlexEvent.PREINITIALIZE}">
			<ObjectBuilder generator="{LayoutEventMapDelegate}" constructorArguments="{scope.dispatcher}" />
			<ObjectBuilder generator="{LayoutManager}" />
		</EventHandlers>
		
		<EventHandlers type="{StartLayoutModuleEvent.START_LAYOUT_MODULE_EVENT}">        
			<ObjectBuilder generator="{LayoutService}"  />
	   		<MethodInvoker generator="{LayoutEventMapDelegate}" method="startModule" arguments="{event.attributes}" />
	   		<MethodInvoker generator="{LayoutManager}" method="loadServerLayouts" arguments="{event.attributes.layoutConfig}" />
	    </EventHandlers>
	    
		<EventHandlers type="{ViewInitializedEvent.VIEW_INITIALIZED_EVENT}">
	   		<MethodInvoker generator="{LayoutManager}" method="setCanvas" arguments="{event.canvas}" />
	    <MethodInvoker generator="{LayoutService}" method="getCurrentLayout"/>
	    </EventHandlers>
	       
	    <EventHandlers type="{LayoutEvent.STOP_LAYOUT_MODULE_EVENT}">
	   		<MethodInvoker generator="{LayoutEventMapDelegate}" method="stopModule" />
	    </EventHandlers>
	            
	    <EventHandlers type="{ChangeMyRole.CHANGE_MY_ROLE_EVENT}">
	      <MethodInvoker generator="{LayoutEventMapDelegate}" method="refreshRole" arguments="{event}"/>
	    </EventHandlers>
	
	    <EventHandlers type="{LayoutEvent.APPLY_DEFAULT_LAYOUT_EVENT}">
	   		<MethodInvoker generator="{LayoutManager}" method="applyDefaultLayout" />
	    </EventHandlers>
	
	  <EventHandlers type="{EventConstants.LOCK_LAYOUT_REQ}">
	    <MethodInvoker generator="{LayoutManager}" method="lockLayout"/>
	  </EventHandlers>
	
	  <EventHandlers type="{EventConstants.UNLOCK_LAYOUT_REQ}">
	    <MethodInvoker generator="{LayoutService}" method="unlockLayout"/>
	  </EventHandlers>
	  
	    <EventHandlers type="{LayoutEvent.BROADCAST_LAYOUT_EVENT}">
	      <MethodInvoker generator="{LayoutManager}" method="broadcastLayout" />
	    </EventHandlers>
	
	  <EventHandlers type="{SyncLayoutEvent.SYNC_LAYOUT_EVENT}">
	    <MethodInvoker generator="{LayoutService}" method="broadcastLayout" arguments="{event.layout}" />
	  </EventHandlers>
	  
	    <EventHandlers type="{LayoutFromRemoteEvent.LAYOUT_FROM_REMOTE}">
	   		<MethodInvoker generator="{LayoutManager}" method="applyRemoteLayout" arguments="{event}" />
	    </EventHandlers>
	
	  <EventHandlers type="{LayoutEvent.SYNC_LAYOUT_EVENT}">
	    <MethodInvoker generator="{LayoutManager}" method="syncLayout" />
	  </EventHandlers>
	  
	    <EventHandlers type="{LayoutEvent.SAVE_LAYOUTS_EVENT}">
	   		<MethodInvoker generator="{LayoutManager}" method="saveLayoutsToFile" />
	    </EventHandlers>
		
	    <EventHandlers type="{LayoutEvent.SAVE_LAYOUTS_WINDOW_EVENT}">
	      <MethodInvoker generator="{LayoutManager}" method="saveLayoutsWindow" />
	    </EventHandlers>
	
	    <EventHandlers type="{LayoutEvent.LOAD_LAYOUTS_EVENT}">
	      <MethodInvoker generator="{LayoutManager}" method="loadLayoutsFromFile" />
	    </EventHandlers>
	
	    <EventHandlers type="{LayoutEvent.ADD_CURRENT_LAYOUT_EVENT}">
	      <MethodInvoker generator="{LayoutManager}" method="addCurrentLayoutToList" arguments="{event}"/>
	    </EventHandlers>
	  
	  <EventHandlers type="{EventConstants.SWITCH_LAYOUT_REQ}">
	    <MethodInvoker generator="{LayoutManager}" method="switchToLayout" arguments="{event.message.layoutName}"/>
	  </EventHandlers>
	
	  <EventHandlers type="{ChangeLayoutEvent.CHANGE_LAYOUT}">
	    <MethodInvoker generator="{LayoutManager}" method="switchToLayout" arguments="{event.layoutName}"/>
	  </EventHandlers>
	  
	  <EventHandlers type="{RemoteSyncLayoutEvent.REMOTE_SYNC_LAYOUT_EVENT}">
	    <MethodInvoker generator="{LayoutManager}" method="remoteSyncLayout" arguments="{event}"/>
	  </EventHandlers>
	
	  <EventHandlers type="{LockControlEvent.CHANGED_LOCK_SETTINGS}">
	    <MethodInvoker generator="{LayoutManager}" method="lockSettingsChanged"/>
	  </EventHandlers>
	
	  <Injectors target="{LayoutService}">
	    <PropertyInjector targetKey="receiver" source="{MessageReceiver}"/>
	    <PropertyInjector targetKey="sender" source="{MessageSender}"/>
	  </Injectors>
	</fx:Declarations>
</EventMap>