<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns="flexlib.containers.*" 
    xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:view="org.bigbluebutton.modules.whiteboard.views.*"
    xmlns:wbBtns="org.bigbluebutton.modules.whiteboard.views.buttons.*"
	xmlns:common="org.bigbluebutton.common.*"
    xmlns:mate="http://mate.asfusion.com/"
    creationComplete="onCreationComplete()"
    visible="{showWhiteboardToolbar}" 
    includeInLayout="{showWhiteboardToolbar}"
    hideEffect="{fadeOut}" showEffect="{fadeIn}" xmlns:s="library://ns.adobe.com/flex/spark">

	<fx:Declarations>
	  <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="presenterMode" />
	  <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="viewerMode" />
	  <mate:Listener type="{StopWhiteboardModuleEvent.STOP_HIGHLIGHTER_MODULE_EVENT}" method="closeToolbar" />
	  <mate:Listener type="{ShortcutEvent.UNDO_WHITEBOARD}" method="undoShortcut" />
	  <mate:Listener type="{ChangeMyRole.CHANGE_MY_ROLE_EVENT}" method="refreshRole" />
	</fx:Declarations>
    
  <fx:Script>
    <![CDATA[
		import com.asfusion.mate.core.GlobalDispatcher;
		
		import mx.events.MoveEvent;
		import mx.events.ResizeEvent;
		
		import flexlib.mdi.containers.MDIWindow;
		
		import org.as3commons.logging.api.ILogger;
		import org.as3commons.logging.api.getClassLogger;
		import org.bigbluebutton.core.Options;
		import org.bigbluebutton.core.UsersUtil;
		import org.bigbluebutton.main.events.MadePresenterEvent;
		import org.bigbluebutton.main.events.ShortcutEvent;
		import org.bigbluebutton.main.model.users.events.ChangeMyRole;
		import org.bigbluebutton.modules.whiteboard.business.shapes.WhiteboardConstants;
		import org.bigbluebutton.modules.whiteboard.events.StopWhiteboardModuleEvent;
		import org.bigbluebutton.modules.whiteboard.events.WhiteboardAccessEvent;
		import org.bigbluebutton.modules.whiteboard.events.WhiteboardButtonEvent;
		import org.bigbluebutton.modules.whiteboard.models.AnnotationType;
		import org.bigbluebutton.modules.whiteboard.views.models.WhiteboardOptions;
		import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable] public var wbOptions:WhiteboardOptions;
			
			[Bindable] private var showWhiteboardToolbar:Boolean = false;

			private static const LOGGER:ILogger = getClassLogger(WhiteboardToolbar);
		
			private static const BUTTON_SIZE : int = 36;
      
			private var mousedOver:Boolean = false;
			private var whiteboardIdExists:Boolean = false;
			
			private var canvas:WhiteboardCanvas;
			private var containerToOverlay:MDIWindow;
			
			[Bindable]
			private var multiUser:Boolean = false;
		
			[Bindable] private var colorPickerColours:Array = ['0x000000', '0xFFFFFF' , '0xFF0000', '0xFF8800',
                '0xCCFF00', '0x00FF88', '0x00FFFF', '0x0088FF', '0x0000FF', '0x8800FF', '0xFF00FF', '0xC0C0C0'];

			private var _hideToolbarTimer:Timer = new Timer(500, 1);

      private function onCreationComplete():void {
		  showMultiUserBtn(UsersUtil.amIPresenter());
        
        setToolType(WhiteboardConstants.TYPE_ZOOM, null);
        _hideToolbarTimer.addEventListener(TimerEvent.TIMER, onHideToolbarTimerComplete);
        addEventListener(WhiteboardButtonEvent.WHITEBOARD_BUTTON_PRESSED, handleWhiteboardButtonPressed);
        
        if (canvas) {
          changeThickness();
          changeColor();
        }

        penOnlyMultiUser();
      }
      
      public function setCanvas(c:WhiteboardCanvas):void {
        wbOptions = Options.getOptions(WhiteboardOptions) as WhiteboardOptions;

        canvas = c;
        
        if (cpik) {
          changeThickness();
          changeColor();
        }
      }

      private function handleWhiteboardButtonPressed(e:WhiteboardButtonEvent):void {
        setToolType(e.graphicType, e.toolType);
      }

			private function setToolType(graphicType:String, toolType:String):void {
				if (graphicType == WhiteboardConstants.TYPE_CLEAR) {
					canvas.sendClearToServer();
				} else if (graphicType == WhiteboardConstants.TYPE_UNDO) {
					sendUndoCommand();
				} else {
					canvas.setGraphicType(graphicType);
					canvas.setTool(toolType);

					if (panzoomBtn != null) {
						panzoomBtn.setTool(graphicType, toolType);
					}

					if (scribbleBtn != null) {
						scribbleBtn.setTool(graphicType, toolType);
					}

					if (rectangleBtn != null) {
						rectangleBtn.setTool(graphicType, toolType);
					}

					if (circleBtn != null) {
						circleBtn.setTool(graphicType, toolType);
					}

					if (triangleBtn != null) {
						triangleBtn.setTool(graphicType, toolType);
					}

					if (lineBtn != null) {
						lineBtn.setTool(graphicType, toolType);
					}

					if (textBtn != null) {
						textBtn.setTool(graphicType, toolType);
					}
				}
			}

			protected function changeColor(e:Event=null):void {
				canvas.changeColor(cpik.selectedColor);
			}
			
			protected function changeThickness(e:Event=null):void {
				canvas.changeThickness(sld.value);
			}
		
			protected function changeMultiUser():void {
				if (!isPresenter) return;
				
				var dispatcher:GlobalDispatcher = new GlobalDispatcher();
				
				var event:WhiteboardAccessEvent = new WhiteboardAccessEvent(WhiteboardAccessEvent.MODIFY_WHITEBOARD_ACCESS);
				event.multiUser = !multiUser;
				dispatcher.dispatchEvent(event);
			}
						
			private function presenterMode(e:MadePresenterEvent):void {
				showMultiUserBtn(true);
				checkVisibility();
			}
			
			private function viewerMode(e:MadePresenterEvent):void {
				showMultiUserBtn(false);
				checkToolReset();
				checkVisibility();
			}
		
			private function showMultiUserBtn(visible:Boolean):void{
				multiUserBtn.enabled = multiUserBtn.visible = multiUserBtn.includeInLayout = visible;
			}
		
			public function whiteboardAccessModified(mu:Boolean):void {
				multiUser = mu;
				checkToolReset();
				checkVisibility();
			}
			
			private function undoShortcut(e:ShortcutEvent):void{
				LOGGER.debug("Ctrl-Z got into undoShortcut");
				sendUndoCommand();
			}
			
			private function sendUndoCommand():void {
				canvas.sendUndoToServer();
			}
			
			public function positionToolbar(container:MDIWindow):void {
        		LOGGER.debug("Positioning whiteboard toolbar");
				containerToOverlay = container;
				containerToOverlay.addEventListener(MoveEvent.MOVE, setPositionAndDepth);
				containerToOverlay.addEventListener(ResizeEvent.RESIZE, setPositionAndDepth);
				containerToOverlay.addEventListener(MouseEvent.CLICK, setPositionAndDepth);
				
				if (!wbOptions.keepToolbarVisible) {
					//containerToOverlay.presCtrlBar.addEventListener(MouseEvent.ROLL_OVER, handleMouseOut);
					//containerToOverlay.presCtrlBar.addEventListener(MouseEvent.ROLL_OUT, handleMouseIn);
					
					containerToOverlay.addEventListener(MouseEvent.ROLL_OVER, handleMouseIn);
					containerToOverlay.addEventListener(MouseEvent.ROLL_OUT, handleMouseOut);
					
					this.addEventListener(MouseEvent.ROLL_OVER, handleMouseIn);
					this.addEventListener(MouseEvent.ROLL_OUT, handleMouseOut);
				}
			}
			
			private function refreshRole(e:ChangeMyRole):void {
				checkVisibility();
			}

            private function checkVisibility(e:MadePresenterEvent = null):void {
                if (containerToOverlay && toolbarAllowed() && whiteboardIdExists && (wbOptions.keepToolbarVisible || mousedOver) && !containerToOverlay.minimized) {
                    setPositionAndDepth();
                    showToolbar();
                } else {
                    hideToolbar();
                }
                penOnlyMultiUser();
            }

            private function penOnlyMultiUser() : void {
				if (multiUser && wbOptions.onlyPenMUW && !isPresenter) {
					setToolType(WhiteboardConstants.TYPE_SHAPE, AnnotationType.PENCIL);
				}
            }
            
			private function showToolbar():void {
				_hideToolbarTimer.reset();
				if (fadeOut.isPlaying) {
					fadeOut.end();
				}
				showWhiteboardToolbar = true;
			}

			private function hideToolbar():void {
				_hideToolbarTimer.reset();
				_hideToolbarTimer.start();
			}

			private function onHideToolbarTimerComplete(event:TimerEvent):void {
				if (fadeIn.isPlaying) {
					fadeIn.end();
				}
				showWhiteboardToolbar = false;
			}

			private function setPositionAndDepth(e:Event = null):void {
				if (parent == null) return;
				this.x = containerToOverlay.x + containerToOverlay.width - 43;
				this.y = containerToOverlay.y + 30;
				parent.setChildIndex(this, parent.numChildren - 1);
			}
		
			private function checkToolReset():void {
				if (!multiUser && !isPresenter) {
					setToolType(WhiteboardConstants.TYPE_ZOOM, null);
				}
			}
			
			private function closeToolbar(e:StopWhiteboardModuleEvent):void {
				if (parent) {
					parent.removeChild(this);
				}
			}
			
			private function handleMouseIn(e:MouseEvent):void {
				mousedOver = true;
				checkVisibility();
			}
			
			private function handleMouseOut(e:MouseEvent = null):void {
				mousedOver = false;
				checkVisibility();
			}
			
			public function whiteboardIdSet():void {
				whiteboardIdExists = true;
				checkVisibility();
			}
      
      private function toolbarAllowed():Boolean {
        return (multiUser && !wbOptions.onlyPenMUW? true : isPresenter);
      }
      
      /** Helper method to test whether this user is the presenter */
      private function get isPresenter():Boolean {
        return UsersUtil.amIPresenter();
      }
      
      private function get isModerator():Boolean {
        return UsersUtil.amIModerator();
      }

		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:Fade id="fadeOut" duration="200" alphaFrom="1.0" alphaTo="0.0" />
		<mx:Fade id="fadeIn" duration="200" alphaFrom="0.0" alphaTo="1.0" />
		<common:TabIndexer startIndex="{wbOptions.baseTabIndex}"
						   tabIndices="{[panzoomBtn, scribbleBtn, rectangleBtn, circleBtn, triangleBtn, lineBtn, textBtn, clearBtn, undoBtn, cpik, sld]}"/>
	</fx:Declarations>
	
	<!-- Now, every 'tool' has two types of identifiers, one is found in WhiteboardConstants
	that identifies the "category" of the tool (ex. shape vs text), and the other specifies the 
	tool itself (ex. line tool vs triangle tool, even though both are "shapes")
	-->
    <wbBtns:PanZoomButton id="panzoomBtn" width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"/>
	<wbBtns:ScribbleButton id="scribbleBtn" width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"/>
	<wbBtns:RectangleButton id="rectangleBtn" width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"/>
	<wbBtns:CircleButton id="circleBtn" width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"/>
	<wbBtns:TriangleButton id="triangleBtn" width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"/>
	<wbBtns:LineButton id="lineBtn" width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"/>
	<wbBtns:TextButton id="textBtn" width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"/>
	<wbBtns:ClearButton id="clearBtn" width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"/>
	<wbBtns:UndoButton id="undoBtn" width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"/>
	
	<!--
	Properties that were removed from original color picker:
	
	swatchPanelStyleName="colorPickerStyle" 
	dataProvider="{colorPickerColours}"
	-->
	
	<!-- Layout is really bad right now, and is confusing. Basically, there are two 
	of ColorPickers, one for the "line" color for the outlines of shapes, and the other for
	the "fill" color that is used only if "fill" is enabled in WhiteboardCanvasModel
	-->
	<mx:ColorPicker change="changeColor(event)" id="cpik"
                  selectedColor="0x000000" width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"
 				  dataProvider="{colorPickerColours}" swatchPanelStyleName="colorPickerStyle"
                  toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.color')}"
				  accessibilityName="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.color')}"/>
   
	<!--mx:Spacer height="2"/-->
  <mx:VBox backgroundColor="#FFFFFF" horizontalAlign="center">
    <mx:Image source="{getStyle('iconWhiteboardThick')}" horizontalAlign="center" width="{BUTTON_SIZE}"/>
    <mx:VSlider height="50" id="sld" change="changeThickness(event)"
                toolTip="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.thickness.accessibilityName')}" 
                minimum="1" maximum="30" 
                useHandCursor="true" value="3" showDataTip="true" snapInterval="1" dataTipOffset="0" labelOffset="0" 
                accessibilityName="{ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.thickness.accessibilityName')}" />
    <mx:Image source="{getStyle('iconWhiteboardThin')}" horizontalAlign="center" width="{BUTTON_SIZE}"/>
  </mx:VBox>

	<mx:Button id="multiUserBtn" enabled="false" visible="false" 
			   click="changeMultiUser()" 
			   width="{BUTTON_SIZE}" height="{BUTTON_SIZE}"
			   selected="{multiUser}"
			   styleName="{multiUser ? 'multiUserWhiteboardOnButtonStyle' : 'multiUserWhiteboardOffButtonStyle'}"
			   toolTip="{!multiUser ? ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.multiuser.start') : ResourceUtil.getInstance().getString('bbb.highlighter.toolbar.multiuser.stop')}" />
</mx:VBox>
