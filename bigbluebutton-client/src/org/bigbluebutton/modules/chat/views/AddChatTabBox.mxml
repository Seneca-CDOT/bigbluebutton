<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mate="http://mate.asfusion.com/"
		 xmlns:common="org.bigbluebutton.common.*"
         implements="org.bigbluebutton.modules.chat.views.IChatTab"
         creationComplete="onCreationComplete()">
  
	<fx:Declarations>
  		<mate:Listener type="{LockControlEvent.CHANGED_LOCK_SETTINGS}" method="lockSettingsChanged" />
		<mate:Listener type="{UserStatusChangedEvent.USER_STATUS_CHANGED}" method="refreshRole" />
    <mate:Listener type="{UserJoinedEvent.JOINED}" method="handleUserJoinedEvent" /> 
    <mate:Listener type="{UserLeftEvent.LEFT}" method="handleUserLeftEvent" />
	</fx:Declarations>
  
    <fx:Script>
        <![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.EventConstants;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.events.CoreEvent;
			import org.bigbluebutton.core.events.LockControlEvent;
			import org.bigbluebutton.core.events.UserStatusChangedEvent;
			import org.bigbluebutton.core.model.LiveMeeting;
			import org.bigbluebutton.main.events.UserJoinedEvent;
			import org.bigbluebutton.main.events.UserLeftEvent;
			import org.bigbluebutton.modules.chat.events.ChatNoiseEnabledEvent;
			import org.bigbluebutton.modules.chat.events.ChatOptionsEvent;
			import org.bigbluebutton.modules.chat.events.ChatToolbarButtonEvent;
			import org.bigbluebutton.modules.chat.model.ChatOptions;
			import org.bigbluebutton.modules.users.model.BreakoutRoomsOptions;
			import org.bigbluebutton.util.i18n.ResourceUtil;
            
			private static const LOGGER:ILogger = getClassLogger(AddChatTabBox);      
			
            [Bindable] public var users:ArrayCollection;
            [Bindable] public var chatView:ChatView;
            [Bindable] private var fontSizes:Array = ['8', '10', '12', '14', '16', '18'];
            
			[Bindable] public var chatOptions:ChatOptions;		
			[Bindable] public var breakoutOptions:BreakoutRoomsOptions;		
          [Bindable] private var clrBtnVisible:Boolean = false;
          
          private var globalDispatcher:Dispatcher = new Dispatcher();
          
          private var handler: ChatWindowEventHandler = new ChatWindowEventHandler();
          
          private function handleUserLeftEvent(event: UserLeftEvent): void {
            handler.handleUserLeftEvent(event.userID);  
          }
          
          
          private function handleUserJoinedEvent(event: UserJoinedEvent):void {
            handler.handleUserJoinedEvent(event);
          }
          
            private function onCreationComplete():void{
              clrBtnVisible = UsersUtil.amIModerator();
              
              handler.populateAllUsers()
                users = handler.users;
                chatOptions = Options.getOptions(ChatOptions) as ChatOptions;
				breakoutOptions = Options.getOptions(BreakoutRoomsOptions) as BreakoutRoomsOptions;

                if ((!UsersUtil.isBreakout() && !chatOptions.privateEnabled) ||
					(UsersUtil.isBreakout() && !breakoutOptions.privateChateEnabled )
				) {
                    usersList.includeInLayout = usersList.visible = false;
					lblSelect.includeInLayout = lblSelect.visible = false;
                }

                if (fontSizes.indexOf(chatOptions.fontSize) != -1) {
                    cmbFontSize.selectedItem = chatOptions.fontSize;
                    changeFontSize(); // have to manually call it because the change event doesn't fire
                } else {
                    LOGGER.debug("fontSize in config.xml not found: {0}", [chatOptions.fontSize]);
                }
                chatNoiseCheckBox.selected = Accessibility.active;
                changeChatNoise();
                
                lockSettingsChanged();
            }
            
            public function onUserListKeyDown(event:KeyboardEvent):void{
                if (event.keyCode == 32){
                    openPrivateChat(event);
                }
            }
            
            private function changeFontSize():void {
				LOGGER.debug("sending change font size")
                var e:ChatOptionsEvent = new ChatOptionsEvent(ChatOptionsEvent.CHANGE_FONT_SIZE);
                e.fontSize = int(cmbFontSize.selectedItem);
                dispatchEvent(e);
            }
            
            private function changeChatNoise():void {
                LOGGER.debug("changing chat noise, active=" + chatNoiseCheckBox.selected);
                dispatchEvent(new ChatNoiseEnabledEvent(chatNoiseCheckBox.selected));
            }
			
            protected function openPrivateChat(event:Event):void{
                if (usersList.selectedIndex == -1) return;
                
                if (!usersList.visible || !usersList.enabled) return;
                
                var chatWithIntId:String = usersList.selectedItem.userId;
                
                // Don't want to be chatting with ourself.
                if (UsersUtil.isMe(chatWithIntId)) return;
                
                usersList.selectedIndex = -1;
                
                var e:CoreEvent = new CoreEvent(EventConstants.START_PRIVATE_CHAT);
                e.message.chatWith = chatWithIntId;
                var gd:Dispatcher = new Dispatcher();
                gd.dispatchEvent(e);
                
            }
            
            /**
            * For the Options tab focus the users list instead of the text area.
            **/
            public function focusToTextMessageArea():void {
              if (usersList.visible) {
                usersList.setFocus();
                usersList.drawFocus(true);
              } else {
                cmbFontSize.setFocus();
                cmbFontSize.drawFocus(true);
              }
            }
          
          private function lockSettingsChanged(e:Event = null):void {
              refreshListStatus();
          }

          private function refreshRole(e:Event):void {
            clearBtn.visible = clearBtn.enabled = clearBtn.includeInLayout = clrBtnVisible = UsersUtil.amIModerator();
              refreshListStatus();
          }

          private function refreshListStatus():void {
            
			handler.disableModeratorsFilter();
			  
            if (UsersUtil.amIModerator() || UsersUtil.amIPresenter()) return; // Settings only affect viewers.
            
			if (LiveMeeting.inst().me.disableMyPrivateChat) {
				handler.enableModeratorsFilter();
			}
          }
            
          public function sendSaveEvent():void{
            var saveEvent:ChatToolbarButtonEvent = new ChatToolbarButtonEvent(ChatToolbarButtonEvent.SAVE_CHAT_TOOLBAR_EVENT);
            globalDispatcher.dispatchEvent(saveEvent);
          }
          
          public function sendCopyEvent():void{
            var copyEvent:ChatToolbarButtonEvent = new ChatToolbarButtonEvent(ChatToolbarButtonEvent.COPY_CHAT_TOOLBAR_EVENT);
            globalDispatcher.dispatchEvent(copyEvent);
          }
          
          public function sendClearEvent():void{
            var clearChatHistoryAlert:Alert = Alert.show(ResourceUtil.getInstance().getString('bbb.chat.clearBtn.alert.text'),
              ResourceUtil.getInstance().getString('bbb.chat.clearBtn.alert.title'),
              Alert.YES | Alert.NO, null, handleClearChatHistoryAlert, null, Alert.YES);
          }
          
          private function handleClearChatHistoryAlert(e:CloseEvent):void {
            if (e.detail == Alert.YES) {
              var clearEvent:ChatToolbarButtonEvent = new ChatToolbarButtonEvent(ChatToolbarButtonEvent.CLEAR_PUBLIC_CHAT_TOOLBAR_EVENT);
              globalDispatcher.dispatchEvent(clearEvent);
            }
          }
        ]]>
    </fx:Script>
    
	<fx:Declarations>
		<common:TabIndexer id="tabIndexer" startIndex="1" tabIndices="{[usersList, cmbFontSize, chatNoiseCheckBox, saveBtn, copyBtn, clearBtn]}"/>
	</fx:Declarations>
    
    <common:AdvancedLabel id="lblSelect" styleName="chatOptionsLabel" width="100%"
			  text="{ResourceUtil.getInstance().getString('bbb.chat.privateChatSelect')}" />
    <mx:List id="usersList" height="50%" width="100%" dataProvider="{users}" dragEnabled="false" 
             itemRenderer="org.bigbluebutton.modules.chat.views.UserRenderer"
             labelField="name"
             itemClick="openPrivateChat(event)"
             keyDown="onUserListKeyDown(event)"
             toolTip="{ResourceUtil.getInstance().getString('bbb.chat.usersList.toolTip')}"
             accessibilityName="{ResourceUtil.getInstance().getString('bbb.chat.usersList.accessibilityName')}"/>
    <mx:Label styleName="chatOptionsLabel" width="100%" fontWeight="bold" text="{ResourceUtil.getInstance().getString('bbb.chat.chatOptions')}" />
    <mx:HBox width="100%">
        <mx:Label styleName="chatOptionsLabel" text="{ResourceUtil.getInstance().getString('bbb.chat.fontSize')}" width="100%"/>
        <mx:ComboBox width="60" id="cmbFontSize" dataProvider="{fontSizes}" change="changeFontSize()" 
                     selectedIndex="1" toolTip="{ResourceUtil.getInstance().getString('bbb.chat.cmbFontSize.toolTip')}" />
    </mx:HBox>
	<mx:HBox width="100%">
		<mx:Label styleName="chatOptionsLabel" 
              text="{ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatwindow.audibleChatNotification')}" 
              width="100%"/>
		<mx:CheckBox id="chatNoiseCheckBox" change="changeChatNoise()" accessibilityName="{ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatwindow.audibleChatNotification')}" />
	</mx:HBox>
  <mx:HBox width="100%">
    <mx:Label styleName="chatOptionsLabel" 
              text="{ResourceUtil.getInstance().getString('bbb.accessibility.chat.chatwindow.publicChatOptions')}" 
              width="100%"/>
    <mx:Button id="saveBtn"
               styleName="chatSaveButtonStyle"
               width="22"
               height="22"
               toolTip="{ResourceUtil.getInstance().getString('bbb.chat.saveBtn.toolTip')}"
               click="sendSaveEvent()"
               accessibilityName="{ResourceUtil.getInstance().getString('bbb.chat.saveBtn.accessibilityName')}"/>
    
    <mx:Button id="copyBtn"
               styleName="chatCopyButtonStyle"
               width="22"
               height="22"
               toolTip="{ResourceUtil.getInstance().getString('bbb.chat.copyBtn.toolTip')}"
               click="sendCopyEvent()"
               accessibilityName="{ResourceUtil.getInstance().getString('bbb.chat.copyBtn.accessibilityName')}"/>
    
    <mx:Button id="clearBtn"
               styleName="chatClearButtonStyle"
               width="22"
               height="22"
               visible = "{clrBtnVisible}"
               enabled = "{clrBtnVisible}"
               includeInLayout = "{clrBtnVisible}"
               toolTip="{ResourceUtil.getInstance().getString('bbb.chat.clearBtn.toolTip')}"
               click="sendClearEvent()"
               accessibilityName="{ResourceUtil.getInstance().getString('bbb.chat.clearBtn.accessibilityName')}"/>
  </mx:HBox>

</mx:VBox>
