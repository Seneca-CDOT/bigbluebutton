<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:common="org.bigbluebutton.common.*"
		 verticalScrollPolicy="off" horizontalScrollPolicy="off"
		 dataChange="dataChangeHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.core.UITextField;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			
			private static const LOGGER:ILogger = getClassLogger(ChatMessageRenderer);      

			private function onLinkClick(e:TextEvent):void{
				LOGGER.debug("Clicked on link[{0}] from chat", [e.text]);
				if (ExternalInterface.available) {
					ExternalInterface.call("chatLinkClicked", e.text);
				}
			}

			private function onKeyDown(event:KeyboardEvent):void{
				if(event.ctrlKey == true && event.keyCode == Keyboard.C){
					System.setClipboard(UITextField(txtMessage.mx_internal::getTextField()).selectedText);
				}
			}

			protected function dataChangeHandler(event:FlexEvent):void {
				// If you remove this some of the chat messages will fail to render
				validateNow();
				
				if (data != null) {
					var sameSender:Boolean = data.sameLastSender();
					var sameTime:Boolean = data.sameLastTime();
					var isMod:Boolean = data.isModerator();
					
					hbHeader.visible = hbHeader.includeInLayout = !sameSender || !sameTime;
					lblName.visible = !sameSender;
					lblName.styleName = (isMod ? 'chatMessageHeaderModerator' : '');
					moderatorIcon.visible = lblName.visible && isMod;
					lblTime.visible = !sameSender || !sameTime;
				}
				
			}
		]]>
	</fx:Script>
	
  <mx:Canvas width="100%" id="hbHeader" styleName="chatMessageHeader" verticalScrollPolicy="off" horizontalScrollPolicy="off"
			 visible="false" includeInLayout="false">
    <mx:Label id="lblName" text="{data.name}" visible="false"
			  verticalCenter="0" textAlign="left" left="0" maxWidth="{this.width - lblTime.width - moderatorIcon.width - 22}" />
	<mx:Image id="moderatorIcon" visible="false"
			  source="{getStyle('moderatorIcon')}" x="{lblName.width + 4}" verticalCenter="0"/>
    <mx:Text id="lblTime" visible="true" htmlText="{data.time}" textAlign="right"
			 verticalCenter="0"
             right="4" />
  </mx:Canvas>
  <mx:Text id="txtMessage" htmlText="{data.text}" link="onLinkClick(event)" color="{data.senderColor}"
           keyDown="onKeyDown(event)" paddingLeft="5" width="100%" selectable="true"/>
</mx:VBox>
