<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:TitleWindow xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:mate="http://mate.asfusion.com/"
				xmlns:common="org.bigbluebutton.common.*"
				xmlns:s="library://ns.adobe.com/flex/spark"
                width="580"
				verticalScrollPolicy="off"
				horizontalScrollPolicy="off"
				layout="absolute"
				close="onCancelClicked()"
                initialize="initData()"
				creationComplete="onCreationComplete(event)">
	
	<fx:Declarations>
		<mate:Dispatcher id="globalDispatch" />
		<mate:Listener type="{UploadProgressEvent.UPLOAD_PROGRESS_UPDATE}" method="handleUploadProgressUpdate" />
		<mate:Listener type="{UploadCompletedEvent.UPLOAD_COMPLETED}" method="handleUploadCompletedEvent" />
		<mate:Listener type="{UploadIoErrorEvent.UPLOAD_IO_ERROR}" method="handleUploadIoError" />
		<mate:Listener type="{UploadSecurityErrorEvent.UPLOAD_SECURITY_ERROR}" method="handleUploadSecurityError" />
		<mate:Listener type="{ConversionCompletedEvent.CONVERSION_COMPLETED}" method="handleConversionCompleted" />
		<mate:Listener type="{ConversionUpdateEvent.CONVERSION_UPDATE}" method="handleConvertUpdate" />
		<mate:Listener type="{CreatingThumbnailsEvent.CREATING_THUMBNAILS}" method="handleThumbnailsProgressEvent" />
		<mate:Listener type="{OfficeDocConvertFailedEvent.OFFICE_DOC_CONVERT_FAILED}" method="handleOfficeDocumentConversionFailed"/>
		<mate:Listener type="{OfficeDocConvertInvalidEvent.OFFICE_DOC_CONVERT_INVALID}" method="handleOfficeDocumentConversionInvalid"/>
		<mate:Listener type="{OfficeDocConvertSuccessEvent.OFFICE_DOC_CONVERT_SUCCESS}" method="handleOfficeDocumentConversionSuccess"/>
		<mate:Listener type="{ConversionSupportedDocEvent.SUPPORTED_DOC}" method="handleSupportedDocument"/>	
		<mate:Listener type="{ConversionUnsupportedDocEvent.UNSUPPORTED_DOC}" method="handleUnsupportedDocument"/>
		<mate:Listener type="{ConversionPageCountError.PAGE_COUNT_ERROR}" method="handlePageCountFailed"/>
		<mate:Listener type="{ConversionPageCountMaxed.PAGE_COUNT_MAXED}" method="handlePageCountExceeded"/>
		<mate:Listener type="{RemovePresentationEvent.PRESENTATION_REMOVED_EVENT}" method="handlePresentationRemoved" />	
	</fx:Declarations>
  <fx:Script>
    <![CDATA[
		import flash.utils.setTimeout;
		
		import flashx.textLayout.formats.Direction;
		
		import mx.collections.ArrayCollection;
		import mx.controls.listClasses.IListItemRenderer;
		import mx.core.mx_internal;
		import mx.events.FlexEvent;
		import mx.events.ListEvent;
		import mx.managers.PopUpManager;
		import mx.utils.StringUtil;
		
		import org.as3commons.lang.StringUtils;
		import org.as3commons.logging.api.ILogger;
		import org.as3commons.logging.api.getClassLogger;
		import org.bigbluebutton.core.Options;
		import org.bigbluebutton.core.UsersUtil;
		import org.bigbluebutton.modules.present.commands.ChangePresentationCommand;
		import org.bigbluebutton.modules.present.commands.UploadFileCommand;
		import org.bigbluebutton.modules.present.events.ConversionCompletedEvent;
		import org.bigbluebutton.modules.present.events.ConversionPageCountError;
		import org.bigbluebutton.modules.present.events.ConversionPageCountMaxed;
		import org.bigbluebutton.modules.present.events.ConversionSupportedDocEvent;
		import org.bigbluebutton.modules.present.events.ConversionUnsupportedDocEvent;
		import org.bigbluebutton.modules.present.events.ConversionUpdateEvent;
		import org.bigbluebutton.modules.present.events.CreatingThumbnailsEvent;
		import org.bigbluebutton.modules.present.events.OfficeDocConvertFailedEvent;
		import org.bigbluebutton.modules.present.events.OfficeDocConvertInvalidEvent;
		import org.bigbluebutton.modules.present.events.OfficeDocConvertSuccessEvent;
		import org.bigbluebutton.modules.present.events.PresentationRollEvent;
		import org.bigbluebutton.modules.present.events.RemovePresentationEvent;
		import org.bigbluebutton.modules.present.events.UploadCompletedEvent;
		import org.bigbluebutton.modules.present.events.UploadEvent;
		import org.bigbluebutton.modules.present.events.UploadIoErrorEvent;
		import org.bigbluebutton.modules.present.events.UploadProgressEvent;
		import org.bigbluebutton.modules.present.events.UploadSecurityErrorEvent;
		import org.bigbluebutton.modules.present.model.PresentOptions;
		import org.bigbluebutton.modules.present.model.Presentation;
		import org.bigbluebutton.modules.present.model.PresentationModel;
		import org.bigbluebutton.util.browser.BrowserCheck;
		import org.bigbluebutton.util.i18n.ResourceUtil;
		
		use namespace mx_internal;
      
		private static const LOGGER:ILogger = getClassLogger(FileUploadWindow);      
        
      [Bindable] private var presentationNamesAC:ArrayCollection;
	    [BIndable] public var maxFileSize:Number;
		
		private var dispatcher:Dispatcher;

      private var thumbnailTimer:Timer = new Timer(5000);
      private var genThumbText:String = ResourceUtil.getInstance().getString('bbb.fileupload.genThumbText');
      private var genThumbDots:String = ".";

      private var fileToUpload:FileReference = new FileReference();
      [Bindable] private var presentOptions:PresentOptions;
		
		protected function onCreationComplete(event:FlexEvent):void
		{
			dispatcher = new Dispatcher();
			updateStyles();
			
			// For an unknown reason this popup cannot be centred directly using PopUpUtil
			PopUpManager.centerPopUp(this);
			
			// All of the code around the "firefox60" state is just a temporary stop gap to mitigate a regression 
			// in file uploading in Firefox 60+
			if (presentOptions.disableFirefoxF60Upload && Capabilities.os.indexOf("Windows") != -1 &&
				BrowserCheck.isFirefox() && BrowserCheck.browserFullVersion == "60.0" && BrowserCheck.isWin64()) {
				currentState = "firefox60";
			}
		}
		
		private function updateStyles() : void {
			var styleNameExt : String = "";
			if (ResourceUtil.getInstance().isRTLEnabled() && ResourceUtil.getInstance().getCurrentLanguageDirection() == Direction.RTL) {
				styleNameExt = "RTL";
			}
			
			uploadBtn.styleName = "uploadFileButton" + styleNameExt;
		}
		
			private function initData():void {
				presentOptions = Options.getOptions(PresentOptions) as PresentOptions;
				presentationNamesAC = PresentationModel.getInstance().getPresentations();
				if (presentationNamesAC.length <= 0) {
					selectFile();
				}
			}

      private function handleThumbnailsProgressEvent(event:CreatingThumbnailsEvent):void {	
        genThumbDots = ".";

        thumbnailTimer.repeatCount = 20;
        thumbnailTimer.addEventListener(TimerEvent.TIMER, timerHandler);
        thumbnailTimer.addEventListener(TimerEvent.TIMER_COMPLETE, completeHandler);           
        thumbnailTimer.start();				
      }

      private function handleConvertSuccessEvent(event:Event):void {
        thumbnailTimer.stop();
      }

      private function timerHandler(e:TimerEvent):void{
        displayGeneratingThumbnailsMessage();
      }

      private function completeHandler(e:TimerEvent):void {
        displayGeneratingThumbnailsMessage();
        thumbnailTimer.stop();
      }

      private function displayGeneratingThumbnailsMessage():void {
        genThumbDots += ".";
		buildProgressLabel(genThumbText + genThumbDots);
      }

      private function selectFile():void{
        fileToUpload.addEventListener(Event.SELECT, onSelectFile);	
        fileToUpload.browse([
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.presentationfile'), "*.pdf;*.doc;*.docx;*.xls;*.xlsx;*.ppt;*.pptx;*.txt;*.rtf;*.odt;*.ods;*.odp;*.odg;*.odc;*.odi;*.jpg;*.png"), 
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.pdf'), "*.pdf"),
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.word'), "*.doc;*.docx;*.odt;*.rtf;*.txt"), 
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.excel'), "*.xls;*.xlsx;*.ods"),
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.powerpoint'), "*.ppt;*.pptx;*.odp"),
          new FileFilter(ResourceUtil.getInstance().getString('bbb.presentation.uploadwindow.image'), "*.jpg;*.jpeg;*.png")]);
      }

      private function onSelectFile(e:Event):void{
        lblFileName.text = fileToUpload.name;
        uploadBtn.enabled = true;
      }

      private function startUpload():void {
		currentState = "uploading";

        var fileSize:Number = fileToUpload.size;
        var maxFileSizeBytes:Number = maxFileSize * 1000000;

	    uploadedFilesList.enabled = false;

        progressReportBox.visible = true;
        progressBar.visible = true;
		progressBarLabel.visible = true;
        
        disableClosing();
        
        selectBtn.enabled = false;
        uploadBtn.enabled = false;		
        
        if (fileSize > maxFileSizeBytes) {     
          // Hardcode for now to 30M limit. 
          // This should be configurable to match what's allowed in nginx. (ralam feb 23, 2010) 
            var logData:Object = UsersUtil.initLogData();
            logData.tags = ["presentation"];
            logData.logCode = "presentation_upload_exceeds_max_limit"; 
            logData.fileSizeBytes = fileSize;
						logData.filename = fileToUpload.name;
            logData.maxFileSizeBytes = maxFileSizeBytes;
            LOGGER.error(JSON.stringify(logData));
                
          enableClosing();
          displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.maxUploadFileExceededAlert'));
        } else {
          var presentationName:String = StringUtil.trim(fileToUpload.name);

          lblFileName.enabled = false;

          var isDownloadable:Boolean = new Boolean(letUserDownload.selected);
          
          var uploadCmd:UploadFileCommand = new UploadFileCommand();
          uploadCmd.filename = presentationName;
          uploadCmd.file = fileToUpload;
          uploadCmd.isDownloadable = isDownloadable;
          globalDispatch.dispatchEvent(uploadCmd);
          letUserDownload.visible = false;
        }       		
      }

      private function handleUploadProgressUpdate(e:UploadProgressEvent):void{
        var progress:Number = e.percentUploaded;
		buildProgressLabel(progress + "% " + ResourceUtil.getInstance().getString('bbb.presentation.uploaded'));
        progressBar.setProgress(progress, 100);
        progressBar.validateNow();
      }

      private function handleUploadCompletedEvent(e:UploadCompletedEvent):void{
		buildProgressLabel(ResourceUtil.getInstance().getString('bbb.presentation.uploadcomplete'));
        progressBar.setProgress(0, 100);
        progressBar.validateNow();

        selectBtn.visible = false;
        uploadBtn.visible = false;
        selectBtn.enabled = false;
        uploadBtn.enabled = false;	
        lblFileName.visible = false;
      }

      private function handleOfficeDocumentConversionFailed(e:OfficeDocConvertFailedEvent):void {
        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["presentation-conversion"];
        logData.filename = fileToUpload.name;
        logData.logCode = "presentation_conversion_failed";
        LOGGER.warn(JSON.stringify(logData));

        enableClosing();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.document.convert.failed'));
      }

      private function handleOfficeDocumentConversionInvalid(e:OfficeDocConvertInvalidEvent):void {
        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["presentation-conversion"];
        logData.filename = fileToUpload.name;
        logData.logCode = "presentation_conversion_invalid";
        LOGGER.warn(JSON.stringify(logData));

        enableClosing();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.document.convert.failed'));
      }

      private function handleOfficeDocumentConversionSuccess(e:OfficeDocConvertSuccessEvent):void {
		buildProgressLabel(ResourceUtil.getInstance().getString('bbb.presentation.document.converted'));
        progressBar.setProgress(0, 100);
        progressBar.validateNow();
      }

      private function handleSupportedDocument(e:ConversionSupportedDocEvent):void {

		buildProgressLabel(ResourceUtil.getInstance().getString('bbb.presentation.document.supported'));
        progressBar.setProgress(0, 100);
        progressBar.validateNow();
      }

      private function handleUnsupportedDocument(e:ConversionUnsupportedDocEvent):void {
        enableClosing();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.notsupported'));
      }

      private function handlePageCountFailed(e:ConversionPageCountError):void {
        enableClosing();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.nbpage'));
      }

      private function handlePageCountExceeded(e:ConversionPageCountMaxed):void {

        enableClosing();
        var message:String = " Maximum supported is " + e.maxPages;
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.convert.maxnbpagereach'), message);
      }

      private function handleUploadIoError(e:UploadIoErrorEvent):void{
        enableClosing();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.io'));
      }

      private function handleUploadSecurityError(e:UploadSecurityErrorEvent):void{
        enableClosing();
        displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.error.security'));
      }

		private function displayAlert(error:String, message:String = null):void {
			currentState = "error";
			progressErrorLbl.text = error;
			if (!StringUtils.isEmpty(message)) {
				progressErrorLbl.text += message;
			}
		}

      private function handleConvertUpdate(e:ConversionUpdateEvent):void{
		buildProgressLabel(ResourceUtil.getInstance().getString('bbb.presentation.converted',[e.numPagesDone, e.totalPages]));
        progressBar.setProgress(e.numPagesDone, e.totalPages);
        progressBar.validateNow();
      }
		
	  private function buildProgressLabel(value:String) : void {
		  progressBarLabel.text = ResourceUtil.getInstance().getString('bbb.fileupload.progBarLbl') + " " + value;
	  }

      private function handleConversionCompleted(e:ConversionCompletedEvent):void{
        enableClosing();
		globalDispatch.dispatchEvent(new ChangePresentationCommand(e.presId));
        globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
      }

		private function disableClosing():void {
			this.closeButton2.enabled = false;
		}

		private function enableClosing():void {
			uploadedFilesList.enabled = true;
			this.closeButton2.enabled = true;
		}

		private function handlePresentationRemoved(e:RemovePresentationEvent):void {
			for(var i:int = 0; i < presentationNamesAC.length; i++) {
				if(e.presentationName == presentationNamesAC.getItemAt(i).id) {
					presentationNamesAC.removeItemAt(i);
					return;
				}
			}
		}
		
		private function onItemRollOver(event:ListEvent):void {
			var item:IListItemRenderer = event.itemRenderer;
			var presentation:Presentation = item.data as Presentation;
			var rollEvent:PresentationRollEvent = new PresentationRollEvent(PresentationRollEvent.PRESENTATION_ROLL_OVER, presentation.id);
			dispatcher.dispatchEvent(rollEvent);
		}
		
		private function onItemRollOut(event:ListEvent):void {
			var item:IListItemRenderer = event.itemRenderer;
			var presentation:Presentation = item.data as Presentation;
			var rollEvent:PresentationRollEvent = new PresentationRollEvent(PresentationRollEvent.PRESENTATION_ROLL_OUT, presentation.id);
			dispatcher.dispatchEvent(rollEvent);
		}
		
		private function onCancelClicked():void {
			globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
		}
		
		private function retryButtonClikcHandler(event:MouseEvent):void {
			globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW))
			setTimeout(function():void {
				globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.OPEN_UPLOAD_WINDOW))
			}, 100);
		}
	]]>

  </fx:Script>
	
	<mx:states>
		<mx:State name="normal" />
		<mx:State name="uploading" />
		<mx:State name="error" />
		<mx:State name="firefox60" />
	</mx:states>
	

  <mx:VBox width="100%" height="100%" verticalAlign="top" horizontalAlign="center" top="15">
    <common:AdvancedLabel text="{ResourceUtil.getInstance().getString('bbb.fileupload.title')}"
						  styleName="titleWindowStyle"
						  maxWidth="550" />

	<mx:Box width="100%" height="100%" paddingLeft="5" paddingRight="5" includeIn="normal">
	  <mx:Box width="100%" height="100%" styleName="presentationUploadFileFormatHintBoxStyle">
		  <mx:Text width="100%" id="fileFormatHintLbl" textAlign="center" text="{ResourceUtil.getInstance().getString('bbb.fileupload.fileFormatHint')}" styleName="presentationUploadFileFormatHintTextStyle"/>
		</mx:Box>
	</mx:Box>

    <mx:HBox id="fileUploadBox" width="100%" paddingLeft="5" paddingRight="5" paddingTop="5" verticalAlign="middle" includeIn="normal"> 
      <mx:Label id="lblFileName" truncateToFit="true" width="{fileUploadBox.width-selectBtn.width-uploadBtn.width-30}" selectable="false" click="selectFile()" text="{ResourceUtil.getInstance().getString('bbb.fileupload.lblFileName.defaultText')}" />
	  <mx:Button id="selectBtn" label="{ResourceUtil.getInstance().getString('bbb.fileupload.selectBtn.label')}" 
				   toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.selectBtn.toolTip')}" 
				   click="selectFile()" styleName="presentationUploadChooseFileButtonStyle"/>
      <mx:Button id="uploadBtn" label="{ResourceUtil.getInstance().getString('bbb.fileupload.uploadBtn')}"
				 styleName="uploadFileButton"
                 toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.uploadBtn.toolTip')}"  click="startUpload()"
                 enabled="false"/>
    </mx:HBox>

    <mx:CheckBox id="letUserDownload" label="{ResourceUtil.getInstance().getString('bbb.fileupload.letUserDownload')}" selected="false" excludeFrom="error, firefox60"
				 toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.letUserDownload.tooltip')}"
				 paddingLeft="5" paddingTop="5" visible="{presentOptions.enableDownload}" includeInLayout="{presentOptions.enableDownload}"/>
	  
    <mx:VBox id="progressReportBox" width="100%" paddingLeft="10" paddingRight="10" paddingTop="5" paddingBottom="5" verticalAlign="middle"
			 includeInLayout="true" visible="false" excludeFrom="error, firefox60">
	  <mx:Text id="progressBarLabel" styleName="presentationUploadProgressBarLabel"
			   visible="{progressBar.visible}" width="100%" text="{ResourceUtil.getInstance().getString('bbb.fileupload.progBarLbl')}" />
      <mx:ProgressBar id="progressBar" mode="manual"
                      styleName="presentationUploadProgressBar" width="100%" visible="false"/>
    </mx:VBox>
	
	<mx:VBox id="errorBox" paddingTop="5" paddingBottom="5" width="100%" horizontalAlign="center" includeIn="error">
		<s:Label id="progressErrorLbl" styleName="progressErrorLblStyle" width="540"/>
		<mx:Button id="retryButton" styleName="retryUploadButton"
				  label="{ResourceUtil.getInstance().getString('bbb.fileupload.retry')}" click="retryButtonClikcHandler(event)"/>
	</mx:VBox>

	  <!-- ** Temporary warning due to file upload regression in Firefox 60+ ** -->
	  <mx:Box width="100%" height="100%" paddingLeft="5" paddingRight="5" includeIn="firefox60">
		  <mx:Box width="100%" height="100%" styleName="presentationUploadFileFormatHintBoxStyle">
			  <mx:Text width="100%" id="firefox60WarnLbl" textAlign="center" text="{ResourceUtil.getInstance().getString('bbb.fileupload.firefox60Warning.temp')}" styleName="presentationUploadFileFormatHintTextStyle"/>
		  </mx:Box>
	  </mx:Box>
	  <!-- ******************************************************************** -->
	  
    <mx:List id="uploadedFilesList" rowCount="{presentationNamesAC.length > 3 ? Math.min(6, presentationNamesAC.length) : 3}" width="100%" styleName="presentationFilesList"
             itemRenderer="org.bigbluebutton.modules.present.ui.views.UploadedPresentationRenderer"
		     itemRollOver="onItemRollOver(event)" itemRollOut="onItemRollOut(event)"
			 allowMultipleSelection="false" dragEnabled="false" dataProvider="{presentationNamesAC}">
    </mx:List>
  </mx:VBox>
	
	<mx:Button id="closeButton2" click="onCancelClicked()" styleName="titleWindowCloseButton"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.close.tooltip')}"
			   top="15" right="10"
			   accessibilityName="{ResourceUtil.getInstance().getString('bbb.fileupload.close.accessibilityName')}" />

</mx:TitleWindow> 
