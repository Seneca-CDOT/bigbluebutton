<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mate="http://mate.asfusion.com/"
		 width="90%"
		 paddingLeft="12"
		 paddingRight="12"
		 verticalScrollPolicy="off"
		 horizontalScrollPolicy="off"
		 toolTip="{data as String}"
		 verticalAlign="middle">

	<fx:Declarations>
		<mate:Listener type="{PresentationRollEvent.PRESENTATION_ROLL_OVER}"
					   method="onRollOver" />
		<mate:Listener type="{PresentationRollEvent.PRESENTATION_ROLL_OUT}"
					   method="onRollOut" />
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;

			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.modules.present.commands.ChangePresentationCommand;
			import org.bigbluebutton.modules.present.events.DownloadEvent;
			import org.bigbluebutton.modules.present.events.PresentationRollEvent;
			import org.bigbluebutton.modules.present.events.RemovePresentationEvent;
			import org.bigbluebutton.modules.present.events.UploadEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;


			private static const LOGGER:ILogger = getClassLogger(UploadedPresentationRenderer);

			private var globalDispatch:Dispatcher = new Dispatcher();

			[Bindable]
			private var rolledOver:Boolean = false;

			private function showPresentation():void {
				var changePresCommand:ChangePresentationCommand = new ChangePresentationCommand(data.id);
				globalDispatch.dispatchEvent(changePresCommand);

				globalDispatch.dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
			}

			private function deletePresentation():void {
				LOGGER.debug("FileUploadWindow.mxml::deletePresentation() {0}", [data.id]);

				var rEvent:RemovePresentationEvent = new RemovePresentationEvent(RemovePresentationEvent.REMOVE_PRESENTATION_EVENT);
				rEvent.presentationName = data.id as String;
				dispatchEvent(rEvent);
			}

			private function onRollOver(e:PresentationRollEvent):void {
				if (e.presentationId == data.id) {
					rolledOver = true;
				} else {
					rolledOver = false;
				}
			}

			private function onRollOut(e:PresentationRollEvent):void {
				rolledOver = false;
			}

			private function downloadPresentation():void {
				var downloadEvent:DownloadEvent = new DownloadEvent(DownloadEvent.DOWNLOAD_PRESENTATION);
				downloadEvent.fileNameToDownload = data.id as String;
				globalDispatch.dispatchEvent(downloadEvent);
			}
		]]>
	</fx:Script>
	<mx:Label id="presentationNameLabel"
			  width="{this.width-downloadButton.width-showBtn.width-deleteBtn.width-50}"
			  truncateToFit="true"
			  styleName="presentationNameLabel"
			  text="{data.name as String}" />
	<mx:Button id="downloadButton"
			   height="32"
			   visible="{data.downloadable as Boolean}"
			   styleName="presentationUploadDownloadButtonStyle"
			   click="downloadPresentation()"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.filedownload.thisFileIsDownloadable')}" />
	<mx:Button id="showBtn"
			   height="32"
			   label="{ResourceUtil.getInstance().getString('bbb.fileupload.showBtn')}"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.showBtn.toolTip')}"
			   styleName="presentationUploadShowButtonStyle"
			   click="showPresentation()"
			   enabled="{!data.current}" />
	<mx:Button id="deleteBtn"
			   height="32"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.fileupload.deleteBtn.toolTip')}"
			   styleName="presentationUploadDeleteButtonStyle"
			   click="deletePresentation()"
			   visible="{String(data.name) != 'default.pdf'}" />

</mx:HBox>
