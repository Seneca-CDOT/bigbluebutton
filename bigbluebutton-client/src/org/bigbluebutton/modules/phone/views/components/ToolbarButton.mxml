<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Button xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mate="http://mate.asfusion.com/"
           styleName="voiceConfDefaultButtonStyle" click="startPhone()"
	mouseOver = "mouseOverHandler(event)"
	mouseOut = "mouseOutHandler(event)"
	move="handleMove()"
	creationComplete="onCreationComplete()"
	height="30"
	width="40"
	toolTip="{ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start')}"
	implements="org.bigbluebutton.common.IBbbToolbarComponent">

	<fx:Declarations>
		<mate:Listener type="{FlashLeftVoiceConferenceEvent.LEFT_VOICE_CONFERENCE}" method="handleFlashLeftVoiceConferenceEvent" />
		<mate:Listener type="{FlashJoinedVoiceConferenceEvent.JOINED_VOICE_CONFERENCE}" method="handleFlashJoinedVoiceConferenceEvent" />
		<mate:Listener type="{FlashJoinedListenOnlyVoiceConferenceEvent.JOINED_LISTEN_ONLY_VOICE_CONFERENCE}" method="handleFlashJoinedListenOnlyConferenceEvent" />
		<mate:Listener type="{FlashEchoTestStoppedEvent.ECHO_TEST_STOPPED}" method="handleStopEchoTestEvent" />
		<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_STARTED}" method="handleWebRTCCallStartedEvent" />
		<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_ENDED}" method="handleWebRTCCallEndedEvent" />
		<mate:Listener type="{AudioSelectionWindowEvent.CLOSED_AUDIO_SELECTION}" method="handleClosedAudioSelectionWindowEvent" />
	</fx:Declarations>  
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.controls.ToolTip;
			import mx.managers.ToolTipManager;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.model.LiveMeeting;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.modules.phone.events.AudioSelectionWindowEvent;
			import org.bigbluebutton.modules.phone.events.FlashEchoTestStoppedEvent;
			import org.bigbluebutton.modules.phone.events.FlashJoinedListenOnlyVoiceConferenceEvent;
			import org.bigbluebutton.modules.phone.events.FlashJoinedVoiceConferenceEvent;
			import org.bigbluebutton.modules.phone.events.FlashLeftVoiceConferenceEvent;
			import org.bigbluebutton.modules.phone.events.JoinVoiceConferenceCommand;
			import org.bigbluebutton.modules.phone.events.LeaveVoiceConferenceCommand;
			import org.bigbluebutton.modules.phone.events.WebRTCCallEvent;
			import org.bigbluebutton.modules.phone.models.PhoneOptions;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private static const LOGGER:ILogger = getClassLogger(ToolbarButton);      
      
			private var dispatcher:Dispatcher = new Dispatcher();
			private var mic:Microphone;
			
			public const DEFAULT_STATE:Number = 0;
			public const ACTIVE_STATE:Number = 1;
			private var _currentState:Number = DEFAULT_STATE;
			
			private var notificationTimer:Timer;
			private var notification:ToolTip;
			
			[Bindable] public var phoneOptions:PhoneOptions;
			
			private function startPhone():void {
				LOGGER.debug("startPhone 1 enabled=[{0}] selected=[{1}]", [enabled, selected]);
				// Disable the button right away to prevent the user from clicking
				// multiple times.
				this.enabled = false;
				
				hideNotification();
				
				LOGGER.debug("startPhone 2 enabled=[{0}] selected=[{1}]", [enabled, selected]);
				if (this.selected) {
					joinAudio();
				} else {
					leaveAudio();
				}
			}

			private function get disableMyMic():Boolean {
				return LiveMeeting.inst().me.disableMyMic;
			}

			private function get defaultListenOnlyMode():Boolean {
				return (phoneOptions.listenOnlyMode && phoneOptions.forceListenOnly);
			}

			public function remoteClick(event:ShortcutEvent):void {
				this.selected = true;
				startPhone();
			}

			private function mouseOverHandler(event:MouseEvent):void {
				if (_currentState == ACTIVE_STATE)
					this.styleName = "voiceConfInactiveButtonStyle";
				else
					this.styleName = "voiceConfOverButtonStyle";
			}

			private function mouseOutHandler(event:MouseEvent):void {
				if (_currentState == ACTIVE_STATE)
					this.styleName = "voiceConfActiveButtonStyle";
				else
					this.styleName = "voiceConfDefaultButtonStyle";
			}

			private function joinAudio():void {
				LiveMeeting.inst().me.breakoutEjectFromAudio = false;

				if (phoneOptions.skipCheck || disableMyMic || defaultListenOnlyMode) {
					var command:JoinVoiceConferenceCommand = new JoinVoiceConferenceCommand();
					command.mic = !disableMyMic;
					dispatcher.dispatchEvent(command);
				} else {
					LOGGER.debug("Sending Show Audio Selection command");
					dispatcher.dispatchEvent(new AudioSelectionWindowEvent(AudioSelectionWindowEvent.SHOW_AUDIO_SELECTION));
				}
			}

			private function leaveAudio():void {
				LOGGER.debug("Sending Leave Conference command");
				dispatcher.dispatchEvent(new LeaveVoiceConferenceCommand());
			}

			private function onCreationComplete():void {

				phoneOptions = Options.getOptions(PhoneOptions) as PhoneOptions;

				notificationTimer = new Timer(15000, 1); // 15 second timer
				notificationTimer.addEventListener(TimerEvent.TIMER, hideNotification);
				
				// when the button is added to the stage display the audio selection window if auto join is true
				if (phoneOptions.autoJoin) {
					if (phoneOptions.skipCheck || LiveMeeting.inst().me.disableMyMic) {
						var command:JoinVoiceConferenceCommand = new JoinVoiceConferenceCommand();
						if (LiveMeeting.inst().me.disableMyMic) {
							command.mic = false;
						} else {
							command.mic = true;
						}

						dispatcher.dispatchEvent(command);
					} else {
						LOGGER.debug("Sending Show Audio Selection command");
						dispatcher.dispatchEvent(new AudioSelectionWindowEvent(AudioSelectionWindowEvent.SHOW_AUDIO_SELECTION));
					}
				} else {
					showNotification();
				}
			}

      private function onUserJoinedConference():void {
        PhoneOptions.firstAudioJoin = false;

        this.selected = true;
        this.enabled = true;

        LOGGER.debug("onUserJoinedConference enabled=[{0}] selected=[{1}]", [enabled, selected]);
        _currentState = ACTIVE_STATE;
        this.styleName = "voiceConfActiveButtonStyle";
        this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.stop');
      }
      
      private function onUserJoinedListenOnlyConference():void {
        LOGGER.debug("onUserJoinedListenOnlyConference enabled=[" + enabled + "] selected=[" + selected + "]");

        resetButtonState();
      }

      private function onUserLeftConference():void {
        this.selected = false;
        this.enabled = true;
		LOGGER.debug("onUserLeftConference enabled=[{0}] selected=[{1}]", [enabled, selected]);
        _currentState = DEFAULT_STATE;
        this.styleName = "voiceConfDefaultButtonStyle";
        this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
        LiveMeeting.inst().breakoutRooms.resetBreakoutRooms();
      }
      
      private function joinDefaultListenOnlyMode(micLeft:Boolean = true):void {
        if (defaultListenOnlyMode && micLeft) {
          var command:JoinVoiceConferenceCommand = new JoinVoiceConferenceCommand();
          command.mic = false;
          dispatcher.dispatchEvent(command);
        }
      }

      private function handleFlashJoinedVoiceConferenceEvent(event:FlashJoinedVoiceConferenceEvent):void {
        LOGGER.debug("User has joined the conference using flash");
        onUserJoinedConference();
      }
      	
      private function handleFlashJoinedListenOnlyConferenceEvent(event:FlashJoinedListenOnlyVoiceConferenceEvent):void {
		LOGGER.debug("User has joined the listen only conference using flash");
        if (defaultListenOnlyMode) {
          onUserJoinedListenOnlyConference();
        } else {
          onUserJoinedConference();
        }
      }
      
      private function handleFlashLeftVoiceConferenceEvent(event:FlashLeftVoiceConferenceEvent):void {
		LOGGER.debug("User has left the conference using flash");
        var micLeft:Boolean = (_currentState == ACTIVE_STATE);
        onUserLeftConference();
        joinDefaultListenOnlyMode(micLeft);
      }
      
      private function handleWebRTCCallStartedEvent(event: WebRTCCallEvent):void {
		LOGGER.debug("User has joined the conference using webrtc");
        onUserJoinedConference();
      }
						
	  private function handleWebRTCCallEndedEvent(event:WebRTCCallEvent):void {
		LOGGER.debug("User has left the conference using webrtc");
        onUserLeftConference();
        joinDefaultListenOnlyMode();
	  }
			
			private function handleStopEchoTestEvent(event:Event):void {
				resetButtonState();
				joinDefaultListenOnlyMode();
			}

			private function resetButtonState():void {
				this.selected = false;
				this.enabled = true;
				_currentState = DEFAULT_STATE;
				this.styleName = "voiceConfDefaultButtonStyle";
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
			}

			private function handleClosedAudioSelectionWindowEvent(event:AudioSelectionWindowEvent):void {
				this.selected = false;
				this.enabled = true;
				LOGGER.debug("onClosedAudioSelection enabled=[{0}] selected=[{1}]", [enabled, selected]);
				_currentState = DEFAULT_STATE;
        		this.styleName = "voiceConfDefaultButtonStyle";
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
				joinDefaultListenOnlyMode();
				
				if (event.closedWithoutJoin) {
					showNotification();
				}
			}
				
			//For whatever reason the tooltip does not update when localization is changed dynamically. Overrideing it here
			override protected function resourcesChanged():void {
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
			}
			
			public function getAlignment():String{
				return MainToolbar.ALIGN_LEFT;
			}
			
			public function theory():String{
				return "Audio button";
			}
			
			private function joinVoiceFocusHead(e:BBBEvent):void{
				this.setFocus();
			}
			
			private function showNotification():void {
				if (parent && parent.visible) {
					visible = includeInLayout = true;
					
					if (notificationTimer.running) notificationTimer.reset();
					notificationTimer.start();
					
					if (!notification) {
						notification = ToolTipManager.createToolTip(ResourceUtil.getInstance().getString('bbb.toolbar.phone.callout.didntjoin'), 100, 100, "callOutTipBelow", this) as ToolTip;
						handleMove();
					}
				}
			}
			
			private function handleMove():void {
				if (notification) {
					var location:Point = localToGlobal(new Point(0,0));
					notification.move(location.x - notification.width/2 + this.width/2, location.y + this.height + 10);
				}
			}
			
			private function hideNotification(e:Event=null):void {
				if (notification) {
					ToolTipManager.destroyToolTip(notification);
					notification = null;
				}
			}
		]]>
	</fx:Script>
</mx:Button>
