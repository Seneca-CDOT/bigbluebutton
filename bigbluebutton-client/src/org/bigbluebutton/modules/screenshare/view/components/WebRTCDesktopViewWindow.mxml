<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2015 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<CustomMdiWindow xmlns="org.bigbluebutton.common.*"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:common="org.bigbluebutton.common.*"
	xmlns:ss="org.bigbluebutton.modules.screenshare.view.components.*"
	width="600" height="400"
	initialize="init()"
	layout="absolute"
	creationComplete="onCreationComplete()"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
	title="{ResourceUtil.getInstance().getString('bbb.screenshareView.title')}"
	showCloseButton="false"
	resize="fitToWindow()" >

	<fx:Declarations>
		<mate:Listener type="{ViewStreamEvent.STOP}" method="onStopViewStreamEvent" />
		<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
		<mate:Listener type="{BBBEvent.RECONNECT_DISCONNECTED_EVENT}" method="handleDisconnectedEvent" />

	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.core.ScrollPolicy;
			import mx.core.UIComponent;
			import mx.utils.ObjectUtil;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.managers.ReconnectionManager;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.screenshare.events.ViewStreamEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCViewWindowEvent;
			import org.bigbluebutton.modules.screenshare.model.ScreenshareOptions;
			import org.bigbluebutton.modules.screenshare.services.red5.WebRTCConnectionEvent;
			import org.bigbluebutton.util.ConnUtil;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			public static const LOG:String = "Deskshare::DesktopViewWindow - ";

			private var streamAvailable:Boolean = false;
			
			private var video:Video;
			private var nc:NetConnection;
			private var ns:NetStream;
			private var videoHolder:UIComponent = new UIComponent();
			private var stream:String;
			private var streamID:String;
			private var streamHeight:Number;
			private var streamWidth:Number;

			private static const LOGGER:ILogger = getClassLogger(WebRTCDesktopViewWindow);

			private static const VIDEO_WIDTH_PADDING:int = 7;
			private static const VIDEO_HEIGHT_PADDING:int = 30;

			[Bindable] private var baseIndex:int;

			[Bindable] private var dsOptions:ScreenshareOptions;
			
			private function init():void {
				dsOptions = Options.getOptions(ScreenshareOptions) as ScreenshareOptions;
			}
			
			private function resizeVideoCanvas():void {
				videoCanvas.width = this.width - VIDEO_WIDTH_PADDING;
				videoCanvas.height = this.height - VIDEO_HEIGHT_PADDING;
			}
			
			private function onCreationComplete():void {
				resizeVideoCanvas();
				
				video = new Video();
				videoHolder.addChild(video);
				videoCanvas.addChild(videoHolder);
				
				videoHolder.addEventListener(MouseEvent.MOUSE_OVER, videoHolder_mouseOverHanlder);
				videoHolder.addEventListener(MouseEvent.MOUSE_OUT, videoHolder_mouseOutHanlder);
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEndEvent);
				
				resourcesChanged();
			}

			private function onResizeEndEvent(event:MDIWindowEvent):void {
				if (event.window == this && streamAvailable) {
					fitToWindow();
				}
			}
			
			private function videoHolder_mouseOverHanlder(event:MouseEvent):void {
				btnActualSize.alpha = 1;
			}
			
			private function videoHolder_mouseOutHanlder(event:MouseEvent):void {
				btnActualSize.alpha = 0;
			}

			public function startVideo(rtmp:String, width:Number, height:Number):void{
				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["screenshare"];
				logData.width = width;
				logData.height = height;
				logData.streamId = streamID;
				
				LOGGER.info(JSON.stringify(logData) + " ** Dimensions are probably not correct **");
				
				// start stream width/height at potential (but probably wrong) values
				// NOTE: The width and height here are probably wrong for the WebRTC stream. Accurate 
				// values will be in the meta data
				streamWidth = width;
				streamHeight = height;

				var myArray :Array = rtmp.split('/');
				// myArray.forEach ( function ( item:*, i:int, arr:Array) : void { JSLog.debug("^^^^" + i +"aa=" + item, logData); } );

				streamID = myArray[5]; // Grab the streamID from the end of the rtmp string
				var videoURL:String = rtmp.substring(0, rtmp.lastIndexOf('/'));

				connect(videoURL);
			}

			public function connect(rtmpUrl: String):void {
				if (nc) {
					nc.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
					nc.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				}
				
				nc = new NetConnection();
				
				var pattern:RegExp = /(?P<protocol>.+):\/\/(?P<serverAndApp>.+)/;
				var result:Array = pattern.exec(rtmpUrl);
				
				var useRTMPS: Boolean = result.protocol == ConnUtil.RTMPS;
				var ssAppUrl: String = null;
				
				if (BBB.initConnectionManager().isTunnelling) {
					var tunnelProtocol: String = ConnUtil.RTMPT;
				
					if (useRTMPS) {
						nc.proxyType = ConnUtil.PROXY_NONE;
						tunnelProtocol = ConnUtil.RTMPS;
					}
					
					
					ssAppUrl = tunnelProtocol + "://" + result.serverAndApp;
					LOGGER.debug("WEBRTC SSHARE CONNECT tunnel = TRUE " + "url=" +  ssAppUrl);
				} else {
					var nativeProtocol: String = ConnUtil.RTMP;
					if (useRTMPS) {
						nc.proxyType = ConnUtil.PROXY_BEST;
						nativeProtocol = ConnUtil.RTMPS;
					}
				
					ssAppUrl = nativeProtocol + "://" + result.serverAndApp;
					LOGGER.debug("WEBRTC SSHARE CONNECT tunnel = FALSE " + "url=" +  ssAppUrl);
				}
				
				nc.objectEncoding = ObjectEncoding.AMF3;
				nc.client = this;

				nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				nc.connect(ssAppUrl);
			}

			public function connectionSuccessHandler():void{
				LOGGER.debug("SUCCESS  DesktopViewWindow::connectionSuccessHandler   SUCCESS [streamId: " + streamID + "]");
				if (ns) {
					ns.removeEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
					ns.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				}
				
				ns = new NetStream(nc);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;

				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);

				video.width = streamWidth;
				video.height = streamHeight;

				video.attachNetStream(ns);
				
				ns.play(streamID);
				
				connectingDots.startAnimation();
				
				streamAvailable = true;
				
				fitToWindow();
			}

			private function netStatusHandler(event:NetStatusEvent):void {
//				trace(LOG + "Connected to [" + getURI() + "]. [" + event.info.code + "]");
				var ce:WebRTCConnectionEvent = new WebRTCConnectionEvent();

				switch(event.info.code){
					case "NetConnection.Connect.Failed":
						ce.status = WebRTCConnectionEvent.FAILED;
						break;

					case "NetConnection.Connect.Success":
						ce.status = WebRTCConnectionEvent.SUCCESS;
						connectionSuccessHandler();
						break;

					case "NetConnection.Connect.Rejected":
						ce.status = WebRTCConnectionEvent.REJECTED;
						break;

					case "NetConnection.Connect.Closed":
						trace(LOG + "Deskshare connection closed.");
						ce.status = WebRTCConnectionEvent.CLOSED;
						break;

					case "NetConnection.Connect.InvalidApp":
						ce.status = WebRTCConnectionEvent.INVALIDAPP;
						break;

					case "NetConnection.Connect.AppShutdown":
						ce.status = WebRTCConnectionEvent.APPSHUTDOWN;
						break;

					case "NetConnection.Connect.NetworkChange":
						LOGGER.debug(LOG + "Detected network change. User might be on a wireless and temporarily dropped connection. Doing nothing. Just making a note.");
						break;
				}
			}

			private function securityErrorHandler(event:SecurityErrorEvent):void {
				LOGGER.debug("ERROR DesktopViewWindow::securityErrorHandler ");
			}

			public function stopViewing():void {
				ns.close();
				closeWindow();
			}

			private function onStopViewStreamEvent(event:ViewStreamEvent):void {
				stopViewing();
			}

			private function onAsyncError(e:AsyncErrorEvent):void {
				LOGGER.debug("VIdeoWindow::asyncerror {0}", [e.toString()]);
			}

			private function onNetStatus(e:NetStatusEvent):void {
				LOGGER.debug("onNetStatus info.code={0}", [e.info.code]);

				switch(e.info.code){
				case "NetStream.Play.Start":
					LOGGER.debug("NetStream.Play.Start for broadcast stream {0}", [stream]);
					LOGGER.debug("Dispatching start viewing event");

					// TODO - do we want to know when a client has displayed ds view?
					// var dispatcher: Dispatcher  = new Dispatcher();
					// var viewEvent:StartedViewingEvent = new StartedViewingEvent(StartedViewingEvent.STARTED_VIEWING_EVENT);

					// viewEvent.stream = stream;
					// dispatcher.dispatchEvent(viewEvent);
					break;
				case "NetStream.Play.UnpublishNotify":
					LOGGER.debug("NetStream.Play.UnpublishNotify for broadcast stream {0}", [stream]);
					stopViewing();
					break;
				}
			}
			
			public function onMetaData(info:Object):void {
				LOGGER.debug("onMetaData: " + ObjectUtil.toString(info));
				if (info.hasOwnProperty("encoder")) {
					// The encoder is sent to the client when the stream has actually started sending data. We can use 
					// it to know when the video is actually playing
					connectingDots.endAnimation();
					
					if (info.hasOwnProperty("width")) {
						streamWidth = info.width;
					}
					if (info.hasOwnProperty("height")) {
						streamHeight = info.height;
					}
					
					// force a video size recalculation once we know actual source size
					fitToWindow();
				}
			}

			public function onBWCheck(... rest):Number {
				return 0;
			}

			public function onBWDone(... rest):void {
				var p_bw:Number;
				if (rest.length > 0) p_bw = rest[0];
				// your application should do something here
				// when the bandwidth check is complete
				trace("bandwidth = " + p_bw + " Kbps.");
			}

			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_VIEW;
			}

			/**
			 * Resizes the desktop sharing video to fit to this window
			 */
			private function fitToWindow():void {
				resizeVideoCanvas();
				
				if (!streamAvailable)
					return;
				
				if (videoIsSmallerThanWindow()) {
					fitWindowToVideo();
				}
				
				// Ignore if we are displaying the actual size of the video
				if (!btnActualSize.selected) {
					fitVideoToWindow();
				}
			}
			
			private function fitVideoToWindow():void {
				var maxWidth:Number = videoCanvas.width;//this.width - VIDEO_WIDTH_PADDING;
				var maxHeight:Number = videoCanvas.height;//this.height - VIDEO_HEIGHT_PADDING;
				var aspectRatio:Number = streamWidth / streamHeight;
				var newVidWidth:Number, newVidHeight:Number;
				
				newVidWidth = maxWidth;
				newVidHeight = newVidWidth * 1/aspectRatio;
				if (newVidHeight > maxHeight) {
					newVidHeight = maxHeight;
					newVidWidth = newVidHeight * aspectRatio;
				}
				videoHolder.width = video.width = newVidWidth;
				videoHolder.height = video.height = newVidHeight;
				
				videoHolder.verticalCenter = 0;
				videoHolder.horizontalCenter = 0;
				
				videoCanvas.verticalScrollPolicy = ScrollPolicy.OFF;
				videoCanvas.horizontalScrollPolicy = ScrollPolicy.OFF;
			}
			
			private function fitWindowToVideo():void {
				video.width = streamWidth;
				videoHolder.width = streamWidth;
				video.height = streamHeight;
				videoHolder.height = streamHeight;
				
				videoHolder.verticalCenter = undefined;
				videoHolder.horizontalCenter = undefined;
				videoHolder.x = 0;
				videoHolder.y = 0;
			}
			
			private function videoIsSmallerThanWindow():Boolean {
				return (streamHeight < this.height) && (streamWidth < this.width);
			}
			
			/**
			 * resizes the desktop sharing video to actual video resolution
			 */
			private function fitToActualSize():void {
				if (videoIsSmallerThanWindow()) {
					fitVideoToWindow();
				} else {
					fitWindowToVideo();
				}
				
				videoCanvas.verticalScrollPolicy = ScrollPolicy.AUTO;
				videoCanvas.horizontalScrollPolicy = ScrollPolicy.AUTO;
			}

			private function determineHowToDisplayVideo():void {
				if (btnActualSize.selected) {
					fitToActualSize();
					btnActualSize.toolTip = ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow');
					btnActualSize.label = ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow');
				} else {
					fitToWindow();
					btnActualSize.toolTip = ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize');
					btnActualSize.label = ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize');
				}
			}

			private function closeWindow():void {
				dispatchEvent(new WebRTCViewWindowEvent(WebRTCViewWindowEvent.CLOSE));
			}

			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.screenshareView.title');

				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screenshareView.minimizeBtn.accessibilityName");

					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screenshareView.maximizeRestoreBtn.accessibilityName");

					closeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.closeBtn.toolTip");
					closeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screenshareView.closeBtn.accessibilityName");
				}
			}

			private function localeChanged(e:Event):void{
				resourcesChanged();
			}

			public function handleDisconnectedEvent(event:BBBEvent):void {
				if (event.payload.type == ReconnectionManager.DESKSHARE_CONNECTION) {
					closeWindow();
				}
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<common:TabIndexer startIndex="{dsOptions.baseTabIndex + 1}" tabIndices="{[minimizeBtn, maximizeRestoreBtn, closeBtn, btnActualSize]}"/>
	</fx:Declarations>

	<mx:Canvas id="videoCanvas" width="100%" height="100%">
		<ss:AnimatedDots id="connectingDots" horizontalCenter="0" verticalCenter="0" styleName="animatedDotsStyle" />
	</mx:Canvas>
	
	<mx:Button id="btnActualSize"
			   styleName="screenShareActualizeButton"
			   toggle="true"
			   horizontalCenter="0"
			   top="{VIDEO_HEIGHT_PADDING}"
			   click="determineHowToDisplayVideo()"
			   selected="false"
			   mouseOver="btnActualSize.alpha = 1"
			   label="{    btnActualSize.selected ? ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize')    }"
			   toolTip="{    btnActualSize.selected ? ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize')    }"/>

</CustomMdiWindow>
