<?xml version="1.0" encoding="utf-8"?>

<!--

     BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

     Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

     This program is free software; you can redistribute it and/or modify it under the
     terms of the GNU Lesser General Public License as published by the Free Software
     Foundation; either version 3.0 of the License, or (at your option) any later
     version.

     BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
     PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License along
     with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<common:CustomMdiWindow
           xmlns:common="org.bigbluebutton.common.*"
           xmlns:mx="library://ns.adobe.com/flex/mx"
           xmlns:fx="http://ns.adobe.com/mxml/2009"
           width="600"
           height="400"
           initialize="init()"
		   layout="absolute"
           creationComplete="onCreationComplete()"
		   verticalScrollPolicy="off"
		   horizontalScrollPolicy="off"
           implements="org.bigbluebutton.common.IBbbModuleWindow"
           xmlns:mate="http://mate.asfusion.com/"
           title="{    ResourceUtil.getInstance().getString('bbb.screenshareView.title')    }"
           showCloseButton="false"
           resize="fitToWindow()">
 
  <fx:Declarations>
    <mate:Listener type="{    ViewStreamEvent.STOP    }" method="onStopViewStreamEvent" />
    <mate:Listener type="{    LocaleChangeEvent.LOCALE_CHANGED    }" method="localeChanged" />
    <mate:Listener type="{    BBBEvent.RECONNECT_DISCONNECTED_EVENT    }" method="handleDisconnectedEvent" />
  </fx:Declarations>

    <fx:Script>
        <![CDATA[
			import mx.core.ScrollPolicy;
			import mx.core.UIComponent;
			
			import flexlib.mdi.events.MDIWindowEvent;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.managers.ReconnectionManager;
			import org.bigbluebutton.main.api.JSLog;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.screenshare.events.ViewStreamEvent;
			import org.bigbluebutton.modules.screenshare.events.ViewWindowEvent;
			import org.bigbluebutton.modules.screenshare.model.ScreenshareModel;
			import org.bigbluebutton.modules.screenshare.model.ScreenshareOptions;
			import org.bigbluebutton.modules.screenshare.services.red5.Connection;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			

            private static const LOG:String = "SC::ScreenshareViewWIndow - ";
            private static const LOGGER:ILogger = getClassLogger(ScreenshareViewWindow);

			private var streamAvailable:Boolean = false;

			private var video:Video;
			private var connection:Connection;
			private var ns:NetStream;
			private var videoHolder:UIComponent = new UIComponent();
			private var streamId:String;
			private var videoHeight:Number = 1;
			private var videoWidth:Number = 1;

			private static const VIDEO_WIDTH_PADDING:int = 7;
			private static const VIDEO_HEIGHT_PADDING:int = 40;

			[Bindable] private var dsOptions:ScreenshareOptions;

			private function init():void{
				dsOptions = Options.getOptions(ScreenshareOptions) as ScreenshareOptions;
			}

			private function resizeVideoCanvas() : void {
				videoCanvas.width = this.width - VIDEO_WIDTH_PADDING;
				videoCanvas.height = this.height - VIDEO_HEIGHT_PADDING;
			}
			
			private function onCreationComplete():void{
				viewScreenshareStream();

				resizeVideoCanvas();
				
				videoHolder.addChild(video);
				videoCanvas.addChildAt(videoHolder, 0);

				videoHolder.addEventListener(MouseEvent.MOUSE_OVER, videoHolder_mouseOverHanlder);
				videoHolder.addEventListener(MouseEvent.MOUSE_OUT, videoHolder_mouseOutHanlder);
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEndEvent);
				fitToActualSize();

				resourcesChanged();

				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["screenshare"];
				logData.width = videoWidth;
				logData.height = videoHeight;
				logData.streamId = streamId;
				logData.logCode = "screenshare_stream_info";
				LOGGER.info(JSON.stringify(logData));
			}

			private function onResizeEndEvent(event:MDIWindowEvent):void {
				if (event.window == this && streamAvailable) {
					fitToWindow();
				}
			}
			
			private function videoHolder_mouseOverHanlder(event:MouseEvent) : void {
				btnActualSize.alpha = 1;
			}
			
			private function videoHolder_mouseOutHanlder(event:MouseEvent) : void {
				btnActualSize.alpha = 0;
			}

			public function startVideo(connection:Connection):void {

				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["screenshare"];
				logData.width = ScreenshareModel.getInstance().width;;
				logData.height = ScreenshareModel.getInstance().height;
				logData.streamId = ScreenshareModel.getInstance().streamId;
				logData.logCode = "screenshare_stream_info_received";

				this.connection = connection;
			}

      private function viewScreenshareStream():void{
        videoWidth = ScreenshareModel.getInstance().width;
        videoHeight = ScreenshareModel.getInstance().height;
        streamId = ScreenshareModel.getInstance().streamId;

        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["screenshare"];
        logData.width = videoWidth;
        logData.height = videoHeight;
        logData.streamId = streamId;
				logData.logCode = "screenshare_view_stream";
        LOGGER.info(JSON.stringify(logData));

        ns = new NetStream(connection.getConnection());
        ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
        ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
        ns.client = this;
        ns.bufferTime = 0;
        ns.receiveVideo(true);
        ns.receiveAudio(false);

        video = new Video(videoWidth, videoHeight);
        video.width = videoWidth;
        video.height = videoHeight;
        video.smoothing = true;
        video.attachNetStream(ns);
        ns.play(streamId);
        this.title = "Viewing Remote Desktop";
        streamAvailable = true;

        fitToWindow();
      }

      public function onMetaData(info:Object):void{
        trace("metadata: width=" + info.width + " height=" + info.height);

        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["screenshare"];
        logData.width = info.width;
        logData.height = info.height;
				logData.logCode = "screenshare_stream_metadata_received";
        LOGGER.info(JSON.stringify(logData));
      }

			public function stopViewing():void {
				ns.close();
				closeWindow();
			}

			private function onStopViewStreamEvent(event:ViewStreamEvent):void {
				stopViewing();
			}

			private function onAsyncError(e:AsyncErrorEvent):void{
        LOGGER.debug("asyncerror " + e.toString());
        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["screenshare"];
				logData.logCode = "screenshare_view_stream_async_error";
        LOGGER.info(JSON.stringify(logData));
			}

			private function onNetStatus(e:NetStatusEvent):void{
        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["screenshare"];
        logData.stream = streamId;

				switch(e.info.code){
  				case "NetStream.Play.Start":
            logData.logCode = "screenshare_play_stream_start";
            LOGGER.info(JSON.stringify(logData));
  					break;
  				case "NetStream.Play.UnpublishNotify":
						logData.logCode = "screenshare_play_stream_stop";
            LOGGER.info(JSON.stringify(logData));
  					stopViewing();
  					break;
				}
			}

			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_VIEW;
			}

            /**
             * Resizes the desktop sharing video to fit to this window
             */
            private function fitToWindow():void {
				resizeVideoCanvas();
				
                if (!streamAvailable)
                    return;

                if (videoIsSmallerThanWindow()) {
                    fitWindowToVideo();
                }

                // Ignore if we are displaying the actual size of the video
                if (!btnActualSize.selected) {
                    fitVideoToWindow();
                }
            }

			private function fitVideoToWindow():void {
				video.width=this.width - VIDEO_WIDTH_PADDING;
				video.scaleY=video.scaleX;
				if(video.height>this.height - VIDEO_HEIGHT_PADDING){
					video.height=this.height - VIDEO_HEIGHT_PADDING;
					video.scaleX=video.scaleY;
				}
				videoHolder.width = video.width;
				videoHolder.height = video.height;

				videoHolder.verticalCenter = 0;
				videoHolder.horizontalCenter = 0;
				
				videoCanvas.verticalScrollPolicy = ScrollPolicy.OFF;
				videoCanvas.horizontalScrollPolicy = ScrollPolicy.OFF;
			}

			private function fitWindowToVideo():void {
				video.width = videoWidth;
				videoHolder.width = videoWidth;
				video.height = videoHeight;
				videoHolder.height = videoHeight;
				
				videoHolder.verticalCenter = undefined;
				videoHolder.horizontalCenter = undefined;
				videoHolder.x = 0;
				videoHolder.y = 0;
			}

			private function videoIsSmallerThanWindow():Boolean {
				return (videoHeight < this.height) && (videoWidth < this.width);
			}

			/**
			 * resizes the desktop sharing video to actual video resolution
			 */
			private function fitToActualSize():void{
				if (videoIsSmallerThanWindow()) {
					fitVideoToWindow();
				} else {
					fitWindowToVideo();
				}
				
				videoCanvas.verticalScrollPolicy = ScrollPolicy.AUTO;
				videoCanvas.horizontalScrollPolicy = ScrollPolicy.AUTO;
			}

			private function determineHowToDisplayVideo():void {
				if (btnActualSize.selected) {
					fitToActualSize();
					btnActualSize.toolTip = ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow');
					btnActualSize.label = ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow');
				} else {
					fitToWindow();
					btnActualSize.toolTip = ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize');
					btnActualSize.label = ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize');
				}
			}

			private function closeWindow():void {
				dispatchEvent(new ViewWindowEvent(ViewWindowEvent.CLOSE));
			}

			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.screenshareView.title');

				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screenshareView.minimizeBtn.accessibilityName");

					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screenshareView.maximizeRestoreBtn.accessibilityName");

					closeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.closeBtn.toolTip");
					closeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screenshareView.closeBtn.accessibilityName");
				}
			}

			private function localeChanged(e:Event):void{
				resourcesChanged();
			}

            public function handleDisconnectedEvent(event:BBBEvent):void {
                if (event.payload.type == ReconnectionManager.DESKSHARE_CONNECTION) {
                    closeWindow();
                }
            }
		]]>
  </fx:Script>

	<fx:Declarations>
		<common:TabIndexer id="tabIndexer" startIndex="{dsOptions.baseTabIndex + 1}"
						   tabIndices="{[minimizeBtn, maximizeRestoreBtn, closeBtn, btnActualSize]}"/>
	</fx:Declarations>

	<mx:Canvas id="videoCanvas" width="100" height="100"/>

	<mx:Button id="btnActualSize"
			   styleName="screenShareActualizeButton"
               toggle="true"
			   horizontalCenter="0"
			   top="{VIDEO_HEIGHT_PADDING}"
               click="determineHowToDisplayVideo()"
               selected="false"
			   mouseOver="btnActualSize.alpha = 1"
               label="{    btnActualSize.selected ? ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize')    }"
               toolTip="{    btnActualSize.selected ? ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize')    }"/>

</common:CustomMdiWindow>
