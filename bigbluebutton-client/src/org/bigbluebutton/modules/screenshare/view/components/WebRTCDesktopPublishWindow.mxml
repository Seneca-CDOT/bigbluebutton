<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2015 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<dspub:CustomMdiWindow
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:dspub="org.bigbluebutton.common.*"
	xmlns:ss="org.bigbluebutton.modules.screenshare.view.components.*"
	initialize="init()"
	creationComplete="onCreationComplete()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	width="700" height="350"
	title="{ResourceUtil.getInstance().getString('bbb.screensharePublish.title')}"
	resizable="false">

	<fx:Declarations>
		<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="onChangedPresenter" />
		<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="onChangedPresenter" />
		<mate:Listener type="{WebRTCViewStreamEvent.STOP}" method="closePublishWindow" />
		<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
		<mate:Listener type="{StopSharingButtonEvent.STOP_SHARING}" method="stopSharingEvent" />
		<mate:Listener type="{ShortcutEvent.REMOTE_FOCUS_DESKTOP}" method="remoteFocus" />
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.external.ExternalInterface;
			
			import mx.core.UIComponent;
			import mx.utils.ObjectUtil;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.main.api.JSLog;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.screenshare.events.DeskshareToolbarEvent;
			import org.bigbluebutton.modules.screenshare.events.RequestToStartSharing;
			import org.bigbluebutton.modules.screenshare.events.StopSharingButtonEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCShareWindowEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCStreamEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCViewStreamEvent;
			import org.bigbluebutton.modules.screenshare.model.ScreenshareOptions;
			import org.bigbluebutton.modules.screenshare.services.red5.WebRTCConnectionEvent;
			import org.bigbluebutton.modules.screenshare.utils.WebRTCScreenshareUtility;
			import org.bigbluebutton.util.ConnUtil;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(WebRTCDesktopPublishWindow);

			public static const SCALE:Number = 5;
			private static const VID_HEIGHT_PAD:Number = 85;
			private static const VID_WIDTH_PAD:Number = 6;

			private var connection:NetConnection;
			private var uri:String;
			private var useTLS:Boolean;
			private var room:String;
			private var streaming:Boolean = false;

			private var video:Video;
			private var ns:NetStream;
			[Bindable] private var videoHolder:UIComponent;
			private var stream:String;
			private var streamHeight:Number = 100;
			private var streamWidth:Number = 100;
			private var globalDispatcher:Dispatcher = new Dispatcher();
			
			private var red5StreamTimeout:Timer = new Timer(30000, 1);

			[Bindable] private var dsOptions:ScreenshareOptions;
			
			[Embed(source="../../assets/sounds/ScreenshareOff.mp3")]
			private var noticeSoundClass:Class;
			private var noticeSound:Sound = new noticeSoundClass() as Sound;
			private var soundPlayed:Boolean = false;

			private function displayInstall():void {
				setCurrentState("displayInstall");
			}

			private function displayRetry():void {
				setCurrentState("displayRetry");
			}

			private function displayFail(message:String=null):void {
				setCurrentState("displayFail");
				if (message) {
					failLbl.text = message;
				}
				
				if (ExternalInterface.available) {
					var isIncognito:Function = function(args:Object):void {
						incognitoLbl.visible = true;
						ExternalInterface.addCallback("isIncognito", null);
						ExternalInterface.addCallback("isNotIncognito", null);
					};

					var isNotIncognito:Function = function(args:Object):void {
						ExternalInterface.addCallback("isIncognito", null);
						ExternalInterface.addCallback("isNotIncognito", null);
					};

					ExternalInterface.addCallback("isIncognito", isIncognito);
					ExternalInterface.addCallback("isNotIncognito", isNotIncognito);
					ExternalInterface.call("checkIfIncognito", "isIncognito", "isNotIncognito");
				}
			}

			private function onInstallButtonClicked():void {
				navigateToURL(new URLRequest(dsOptions.chromeExtensionLink), "_blank");
				displayRetry();
			}

			private function onRetryButtonClicked():void {
				var onSuccess:Function = function(exists:Boolean):void {
				  ExternalInterface.addCallback("onSuccess", null);
				  if (exists) {
				    // try to reset the window state when the extension is installed
				    LOGGER.debug('Screenshare extension installed, trying to publish again');
				    setCurrentState('dispFullRegionControlBar');
				    init();
				  } else {
				    displayFail();
				  }
				};
				ExternalInterface.addCallback("onSuccess", onSuccess);
				ExternalInterface.call("checkChromeExtInstalled", "onSuccess", dsOptions.chromeExtensionKey);
			}
			
			

			private function init():void {
				dsOptions = Options.getOptions(ScreenshareOptions) as ScreenshareOptions;
				
				WebRTCScreenshareUtility.canIUseWebRTCOnThisBrowser(cannotUseWebRTC, webRTCWorksButNotConfigured, webRTCWorksAndConfigured);
			}

			private function onCreationComplete():void {
				windowControls.maximizeRestoreBtn.enabled = false;

				setCurrentState("dispFullRegionControlBar"); //TODO ANTON
				resourcesChanged();

				titleBarOverlay.tabIndex = dsOptions.baseTabIndex;
				titleBarOverlay.focusEnabled = true;
			}
			
			private function cannotUseWebRTC(message:String):void {
				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["webrtc-screenshare"];
				logData.logCode = "cannot-use-webrtc-screenshare";
				logData.reason = message;
				LOGGER.info(JSON.stringify(logData));
				displayFail(message);
			};
			
			/* When WebRTC is supported in the browser, theres an extension key,
			but not configured properly (no extension for example)
			*/
			private function webRTCWorksButNotConfigured(message:String):void {
				LOGGER.debug("WebRTC Screenshare needs to be configured clientside: " + message);
				displayInstall();
			}
			
			/* WebRTC is supported and everything is configured properly (extension exists),
			attempt to share
			*/
			private function webRTCWorksAndConfigured(message:String):void {
				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["webrtc-screenshare"];
				logData.logCode = "webrtc-works-and-configured";
				logData.reason = message;
				LOGGER.info(JSON.stringify(logData));
				startWebRTCPublish();
			}
			
			private function startWebRTCPublish():void {
				LOGGER.debug("startWebRTCDeskshare");
				
				if (ExternalInterface.available) {
					var videoTag:String = "localWebRTCVideo";
					var onFail:Function = function(args:Object):void {
						var logData:Object = UsersUtil.initLogData();
						logData.tags = ["webrtc-screenshare"];
						logData.logCode = "webrtc-failed-to-publish";
						
						if (args is String) {
							logData.reason = args as String;
							displayFail(args as String);
						} else {
							displayFail();
						}
						LOGGER.info(JSON.stringify(logData));
						
						red5StreamTimeout.stop();
					};
					var onSuccess:Function = function():void {
						var logData:Object = UsersUtil.initLogData();
						logData.tags = ["webrtc-screenshare"];
						logData.logCode = "webrtc-sending-offer";
						LOGGER.info(JSON.stringify(logData));
						
						// start timeout timer
						red5StreamTimeout.addEventListener(TimerEvent.TIMER_COMPLETE, function():void {
							var logData:Object = UsersUtil.initLogData();
							logData.tags = ["webrtc-screenshare"];
							logData.logCode = "webrtc-stream-timeout";
							logData.reason = "Timeout hit waiting for the red5 stream to start";
							LOGGER.info(JSON.stringify(logData));
							
							displayFail(ResourceUtil.getInstance().getString("bbb.screensharePublish.streamTimeout.label"));
						});
						red5StreamTimeout.start();
					}
					ExternalInterface.addCallback("onFail", onFail);
					ExternalInterface.addCallback("onSuccess", onSuccess);
					
					var voiceBridge:String = UsersUtil.getVoiceBridge();
					var myUserId:String = UsersUtil.getMyUserID();
					var internalMeetingID:String = UsersUtil.getInternalMeetingID();
					
					ExternalInterface.call(
						'kurentoShareScreen',
						videoTag,
						voiceBridge,
						myUserId,
						internalMeetingID,
						"onFail",
						dsOptions.chromeExtensionKey,
						"",
						"",
						"onSuccess");
					
				}
			}

			private function remoteFocus(e:ShortcutEvent):void{
				focusManager.setFocus(minimizeBtn);
			}

			public function get defaultWidth():int{
				return this.width;
			}

			public function get defaultHeight():int{
				return this.height;
			}

			public function set defaultHeight(height:int):void{
				this.height = height;
			}

			public function set defaultWidth(width:int):void{
				this.width = width;
			}

			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_PUBLISH;
			}

			/*
			 * Implement resizeable interface.
			 */
			public function resetWidthAndHeight():void{/* do nothing */}

			public function stopSharing():void{
				if (streaming) {
					stopStream();
					var streamEvent:WebRTCStreamEvent = new WebRTCStreamEvent(WebRTCStreamEvent.STOP);
					dispatchEvent(streamEvent);
				}
				streaming = false;
				closeWindow();
			}

			public function stopSharingEvent(evt:StopSharingButtonEvent):void{
				JSLog.warn("stopSharingEvent WebRTCDesktopPublishWindow.mxml", {});
				stopSharing();
			}

			public function startVideo(rtmp:String, videoWidth:Number, videoHeight:Number):void {
				red5StreamTimeout.stop();
				
				setCurrentState("dispFullRegionControlBar");
				var myArray :Array = rtmp.split('/');
				var meetingUrl:String = rtmp.substring(0, rtmp.lastIndexOf('/'));
				stream = rtmp.substring(rtmp.lastIndexOf('/')+1, rtmp.length);
				
				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["webrtc-screenshare"];
				logData.logCode = "webrtc-screenshare-start-playing-preview";
				logData.stream = stream;
				LOGGER.info(JSON.stringify(logData));

				connection = new NetConnection();
				
				var pattern:RegExp = /(?P<protocol>.+):\/\/(?P<serverAndApp>.+)/;
				var result:Array = pattern.exec(meetingUrl);
				
				var useRTMPS: Boolean = result.protocol == ConnUtil.RTMPS;
				var ssAppUrl: String = null;
				
				if (BBB.initConnectionManager().isTunnelling) {
					var tunnelProtocol: String = ConnUtil.RTMPT;
					
					if (useRTMPS) {
						connection.proxyType = ConnUtil.PROXY_NONE;
						tunnelProtocol = ConnUtil.RTMPS;
					}
					
					
					ssAppUrl = tunnelProtocol + "://" + result.serverAndApp;
					LOGGER.debug("WEBRTC SSHARE CONNECT tunnel = TRUE " + "url=" +  ssAppUrl);
				} else {
					var nativeProtocol: String = ConnUtil.RTMP;
					if (useRTMPS) {
						connection.proxyType = ConnUtil.PROXY_BEST;
						nativeProtocol = ConnUtil.RTMPS;
					}
					
					ssAppUrl = nativeProtocol + "://" + result.serverAndApp;
					LOGGER.debug("WEBRTC SSHARE CONNECT tunnel = FALSE " + "url=" +  ssAppUrl);
				}
				
				connection.objectEncoding = ObjectEncoding.AMF3;
				connection.client = this;

				connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				connection.connect(ssAppUrl);
				
				// start stream width/height at potential (but probably wrong) values
				// NOTE: The width and height here are probably wrong for the WebRTC stream. Accurate 
				// values will be in the meta data
				streamWidth = videoWidth;
				streamHeight = videoHeight;
			}

			private function netStatusHandler(event:NetStatusEvent):void {
				var ce:WebRTCConnectionEvent = new WebRTCConnectionEvent();
				LOGGER.debug("netStatusHandler   [{0}]",[event.info.code]);
				switch(event.info.code){
					case "NetConnection.Connect.Failed":
						ce.status = WebRTCConnectionEvent.FAILED;

						break;

					case "NetConnection.Connect.Success":
						ce.status = WebRTCConnectionEvent.SUCCESS;
						startPreviewStream(stream);
						break;

					case "NetConnection.Connect.Rejected":
						ce.status = WebRTCConnectionEvent.REJECTED;
						break;

					case "NetConnection.Connect.Closed":
						LOGGER.debug("Deskshare connection closed.");
						ce.status = WebRTCConnectionEvent.CLOSED;
						break;

					case "NetConnection.Connect.InvalidApp":
						ce.status = WebRTCConnectionEvent.INVALIDAPP;
						break;

					case "NetConnection.Connect.AppShutdown":
						ce.status = WebRTCConnectionEvent.APPSHUTDOWN;
						break;

					case "NetConnection.Connect.NetworkChange":
						LOGGER.debug("Detected network change. User might be on a wireless and " +
							"temporarily dropped connection. Doing nothing. Just making a note.");
						break;
				}
			}

			private function securityErrorHandler(event:SecurityErrorEvent):void {
				LOGGER.debug("ERROR WebRTCDesktopPublishWindow::securityErrorHandler ");
			}

			private function startPreviewStream(streamName:String):void{
				streaming = true;

				videoHolder = new UIComponent();

				LOGGER.debug("Starting WebrtcDeskshare preview");
				video = new Video();

				videoHolder.addChild(video);
				mainContainer.addChildAt(videoHolder, 0);

				ns = new NetStream(connection);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				video.attachNetStream(ns);

				ns.play(stream);

				btnClosePublish.enabled = true;
				
				connectingProgress.startAnimation();
				videoHolder.includeInLayout = videoHolder.visible = false;
			}
			
			private function resizePreviewVideo():void {
				var availableWidth:Number = this.width - VID_WIDTH_PAD;
				var availableHeight:Number = this.height - VID_HEIGHT_PAD;
				var vidW:Number, vidH:Number;
				
				// With the preview stream the height will almost always be the limiter so try that first
				vidH = availableHeight;
				vidW = (streamWidth / streamHeight) * vidH;
				
				if (vidW > availableWidth) { // if attempted width ended up being too large
					vidW = availableWidth;
					vidH = (streamHeight / streamWidth) * vidW;
				}
				
				video.width = vidW;
				video.height = vidH;
				videoHolder.width = vidW;
				videoHolder.height = vidH;
				video.x = videoHolder.x = (this.width - VID_WIDTH_PAD - vidW) / 2;
				video.y = videoHolder.y = (this.height - VID_HEIGHT_PAD - vidH) / 2;
			}

			private function stopStream():void {
				streaming = false;
				
				if (ns != null) {
					ns.close();
				}
				if (connection != null) {
					connection.close();
				}
			}

			private function onAsyncError(e:AsyncErrorEvent):void{
				LOGGER.debug("VIdeoWindow::asyncerror {0}", [e.toString()]);
			}

			private function onNetStatus(e:NetStatusEvent):void{
				switch(e.info.code){
				case "NetStream.Publish.Start":
					LOGGER.debug("NetStream.Publish.Start for broadcast stream {0}", [stream]);
					break;
				case "NetStream.Play.UnpublishNotify":
					LOGGER.debug("NetStream.Play.UnpublishNotify for broadcast stream {0}", [stream]);
					stopSharing();
					break;
				case "NetStream.Play.Start":
					LOGGER.debug("Netstatus: {0}", [e.info.code]);
					globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.DESKSHARE_STARTED));
				}
			}
			
			public function onMetaData(info:Object):void {
				LOGGER.debug("onMetaData: " + ObjectUtil.toString(info));
				if (info.hasOwnProperty("encoder")) {
					// The encoder is sent to the client when the stream has actually started sending data. We can use 
					// it to know when the video is actually playing
					connectingProgress.endAnimation();
					videoHolder.includeInLayout = videoHolder.visible = true;
					
					if (info.hasOwnProperty("width")) {
						streamWidth = info.width;
					}
					if (info.hasOwnProperty("height")) {
						streamHeight = info.height;
					}
					
					resizePreviewVideo();
				}
			}

			private function onChangedPresenter(e:Event):void{
				stopSharing();
				closeWindow();
			}

			private function closeWindow():void {
				// Have to remove the callback so we can garbage collect
				ExternalInterface.addCallback("onFail", null);
				
				// LOGGER.debug("Calling stopApplet in closeWindow()");
				dispatchEvent(new WebRTCShareWindowEvent(WebRTCShareWindowEvent.CLOSE));
				globalDispatcher.dispatchEvent(new DeskshareToolbarEvent(DeskshareToolbarEvent.STOP));
				
				if (!soundPlayed) {
					trace("playing from webrtc publish window");
					var tSC:SoundChannel = noticeSound.play(0, 0, new SoundTransform(0.25));
					soundPlayed = true;
				}
			}

			/*
			 * Override the close handler. We want the Event Map to send a message to
			 * the MDIManager to close this window;
			 */
			override public function close(event:MouseEvent = null):void {
				stopSharing();
				closeWindow();
			}

			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.screensharePublish.title');

				if (titleBarOverlay != null) {
					titleBarOverlay.accessibilityName = ResourceUtil.getInstance().getString('bbb.screensharePublish.title');
				}

				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString('bbb.screensharePublish.minimizeBtn.toolTip');
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screensharePublish.minimizeBtn.accessibilityName");

					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString('bbb.screensharePublish.maximizeRestoreBtn.toolTip');
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screensharePublish.maximizeRestoreBtn.accessibilityName");

					closeBtn.toolTip = ResourceUtil.getInstance().getString('bbb.screensharePublish.closeBtn.toolTip');
					closeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screensharePublish.closeBtn.accessibilityName");
				}
			}

			private function localeChanged(e:Event):void{
				resourcesChanged();
			}

			private function closePublishWindow(event:WebRTCViewStreamEvent):void{
				stopStream();
				closeWindow();
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<dspub:TabIndexer startIndex="{dsOptions.baseTabIndex + 1}"
			tabIndices="{[minimizeBtn, maximizeRestoreBtn, closeBtn, btnClosePublish]}"/>
	</fx:Declarations>

	<dspub:states>
		<mx:State name="dispFullRegionControlBar" />
		<mx:State name="displayInstall" />
		<mx:State name="displayRetry" />
		<mx:State name="displayFail" />
	</dspub:states>

	<mx:VBox id="mainContainer" width="100%" height="100%"  paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2">
		<mx:HBox width="100%" height="90%" id="mainElement" verticalAlign="middle" horizontalAlign="center">
			<ss:AnimatedProgressBar id="connectingProgress" width="260" visible="false" 
									horizontalCenter="0" verticalCenter="0" 
									label="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTC.starting')}"/>
		</mx:HBox>
		<mx:HBox includeIn="dispFullRegionControlBar" width="100%" horizontalAlign="center">
			<mx:Button id="btnClosePublish"
				toolTip="{ResourceUtil.getInstance().getString('bbb.screensharePublish.stopButton.toolTip')}"
				label="{ResourceUtil.getInstance().getString('bbb.screensharePublish.stopButton.label')}"
				visible="true"
				enabled="false"
				click="stopSharing()" />
		</mx:HBox>
		<mx:VBox includeIn="displayInstall" width="100%" height="100%" horizontalAlign="center">
			<mx:HBox width="100%" horizontalAlign="center">
				<mx:Text width="100%" textAlign="center" styleName="" text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCChromeExtensionMissing.label')}"/>
			</mx:HBox>
			<mx:HBox width="100%" horizontalAlign="center">
				<mx:LinkButton id="btnInstallExtension"
					label="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCExtensionInstallButton.label')}"
					visible="true"
					enabled="true"
					styleName="quickWindowLinkStyle"
					click="onInstallButtonClicked()" />
			</mx:HBox>
		</mx:VBox>
		<mx:VBox includeIn="displayRetry" width="100%" height="100%" horizontalAlign="center">
			<mx:LinkButton id="btnInstallExtension2"
				label="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCExtensionInstallButton.label')}"
				visible="true"
				enabled="true"
				styleName="quickWindowLinkStyle"
				click="onInstallButtonClicked()" />
			<mx:Label width="70%" textAlign="center" styleName="" text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCRetryExtensionInstallation.label')}"/>
			<mx:Button id="btnRetry" label="Retry" visible="true" enabled="true" click="onRetryButtonClicked()" />
		</mx:VBox>
		<mx:VBox includeIn="displayFail" width="100%" height="100%" horizontalAlign="center">
			<mx:HBox width="100%" height="100%" horizontalAlign="center">
				<mx:Text id="failLbl" width="100%" textAlign="center" styleName="" text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCExtensionFailFallback.label')}" />
			</mx:HBox>
			<mx:HBox width="100%" height="100%" horizontalAlign="center">
				<mx:Text id="incognitoLbl" width="100%" visible="false" text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCPrivateBrowsingWarning.label')}" />
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>

</dspub:CustomMdiWindow>
