<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:TitleWindow xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:mate="http://mate.asfusion.com/"
				xmlns:common="org.bigbluebutton.common.*"
				implements="org.bigbluebutton.common.IKeyboardClose"
				width="600"
				show="this.setFocus()"
				initialize="init()"
				layout="absolute"
				verticalScrollPolicy="off"
				horizontalScrollPolicy="off"
				showCloseButton="false">
	
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.Options;
			import org.bigbluebutton.core.PopUpUtil;
			import org.bigbluebutton.modules.screenshare.events.RequestToStartSharing;
			import org.bigbluebutton.modules.screenshare.events.ShareWindowEvent;
			import org.bigbluebutton.modules.screenshare.model.ScreenshareOptions;
			import org.bigbluebutton.modules.screenshare.utils.WebRTCScreenshareUtility;
			import org.bigbluebutton.util.browser.BrowserCheck;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private static const LOGGER:ILogger = getClassLogger(ScreenshareSelectionWindow);
			
			private var screenshareOptions:ScreenshareOptions;
			
			private function init():void {
				screenshareOptions = Options.getOptions(ScreenshareOptions) as ScreenshareOptions;
				
				if (screenshareOptions.offerWebRTC) {
					WebRTCScreenshareUtility.canIUseWebRTCOnThisBrowser(webRTCNotAvailableCallback, webRTCAvailableCallback, webRTCAvailableCallback);
				} else {
					LOGGER.debug("WebRTC disabled in options");
					// need to delay call so that we know that the popup actually exists on the stage
					callLater(onJavaClick);
				}
			}
			
			private function webRTCNotAvailableCallback(reason:String):void {
				LOGGER.debug("WebRTC not available, reason=" + reason);
				// need to delay call so that we know that the popup actually exists on the stage
				webrtcProblemHintBox.visible = webrtcProblemHintBox.includeInLayout = true;
				webrtcProblemHintLbl.text = ResourceUtil.getInstance().getString('bbb.screenshareSelection.problemHintText', [reason]);
				btnWebrtc.enabled = false;
			}
			
			private function webRTCAvailableCallback(reason:String):void {
				LOGGER.debug("WebRTC available");
				// have to also check for Chrome + Win 10 because it can be blurry
				if (BrowserCheck.isChrome() || BrowserCheck.isFirefox()) {
					webrtcProblemHintBox.visible = webrtcProblemHintBox.includeInLayout = true;
					webrtcProblemHintLbl.htmlText = ResourceUtil.getInstance().getString('bbb.screenshareSelection.problemHintText2', [screenshareOptions.chromeWin10Help]);
				}
			}
			
			private function onWebrtcClick():void {
				LOGGER.debug("Use WebRTC clicked");
				var dispatcher:Dispatcher = new Dispatcher();
				
				dispatcher.dispatchEvent(new RequestToStartSharing(true));
				
				PopUpUtil.removePopUp(this);
			}
			
			private function onJavaClick():void {
				LOGGER.debug("Use Java clicked");
				var dispatcher:Dispatcher = new Dispatcher();
				
				dispatcher.dispatchEvent(new RequestToStartSharing(false));
				
				PopUpUtil.removePopUp(this);
			}
			
			private function onCancelClicked():void {
				LOGGER.debug("Close clicked");
				
				dispatchEvent(new ShareWindowEvent(ShareWindowEvent.CLOSE));
				
				PopUpUtil.removePopUp(this);
			}
			
			private function onHelpLinkClicked(e:TextEvent):void{
				if (ExternalInterface.available) {
					ExternalInterface.call("chatLinkClicked", e.text);
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<common:TabIndexer id="tabIndexer" startIndex="1" tabIndices="{[windowTitle, closeButton, btnWebrtc, btnJava]}"/>
	</fx:Declarations>
	
	<mx:VBox width="100%" height="100%" paddingBottom="20" paddingLeft="20" paddingRight="20" paddingTop="15" horizontalAlign="center">
		<common:AdvancedLabel id="windowTitle"
							  text="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.title')}"
							  styleName="titleWindowStyle"
							  maxWidth="{this.width - 40}" />
		
		<mx:Box id="webrtcProblemHintBox"
				width="100%"
				verticalScrollPolicy="off" horizontalScrollPolicy="off"
				visible="false" includeInLayout="false"
				styleName="screenshareSelectHintBoxStyle">
			<mx:Text id="webrtcProblemHintLbl" width="100%" textAlign="center" link="onHelpLinkClicked(event)"/>
		</mx:Box>
		
		<mx:HBox width="100%" height="100%" styleName="screenshareSelectionsStyle" verticalAlign="middle" horizontalAlign="center">
			<mx:VBox id="vboxWebrtc" horizontalAlign="center" verticalAlign="middle" paddingLeft="20" paddingRight="20">
				<mx:Button id="btnWebrtc" buttonMode="true" styleName="btnScreenshareSelectStyle" width="140" height="140"
						   click="onWebrtcClick()"
						   label="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.webrtc.label2')}"
						   toolTip="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.btnWebrtc.label')}"
						   accessibilityName="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.btnWebrtc.accessibilityName')}" />
				<mx:Label text="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.webrtc.label1')}"
						  styleName="screenshareTypeTitle" />
			</mx:VBox>
			<mx:VBox id="vboxJava" horizontalAlign="center" verticalAlign="middle" paddingLeft="20" paddingRight="20">
				<mx:Button id="btnJava" width="140" height="140" buttonMode="true" styleName="btnScreenshareSelectStyle"
						   click="onJavaClick()"
						   label="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.java.label2')}"
						   toolTip="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.btnJava.label')}"
						   accessibilityName="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.btnJava.accessibilityName')}" />
				<mx:Label text="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.java.label1')}"
						  styleName="screenshareTypeTitle" />
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
	<mx:Button id="closeButton" click="onCancelClicked()" styleName="titleWindowCloseButton"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.cancel')}"
			   right="10" top="15"
			   accessibilityName="{ResourceUtil.getInstance().getString('bbb.screenshareSelection.cancel.accessibilityName')}" />
</mx:TitleWindow>
