<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2015 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<EventMap xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns="http://mate.asfusion.com/">

	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.screenshare.events.IsSharingScreenEvent;
			import org.bigbluebutton.modules.screenshare.events.ModuleEvent;
			import org.bigbluebutton.modules.screenshare.events.RequestToStartSharing;
			import org.bigbluebutton.modules.screenshare.events.RequestToStopSharing;
			import org.bigbluebutton.modules.screenshare.events.ShareEvent;
			import org.bigbluebutton.modules.screenshare.events.ShareStartedEvent;
			import org.bigbluebutton.modules.screenshare.events.ShareWindowEvent;
			import org.bigbluebutton.modules.screenshare.events.StartedViewingEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCShareWindowEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCStreamEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCViewStreamEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCViewWindowEvent;
			import org.bigbluebutton.modules.screenshare.managers.WebRTCDeskshareManager;
		]]>
	</fx:Script>

	<fx:Declarations>
		<EventHandlers type="{FlexEvent.PREINITIALIZE}">
			<!--
			The FlexEvent.PREINITIALIZE event is a good place for creating and initializing managers.
			-->
			<ObjectBuilder generator="{WebRTCDeskshareManager}"/>
		</EventHandlers>

		<EventHandlers type="{ShareEvent.START_SHARING}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleStartSharingEvent"/>
		</EventHandlers>

		<EventHandlers type="{BBBEvent.START_DESKSHARE}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleStartSharingEvent"/>
		</EventHandlers>

		<EventHandlers type="{RequestToStartSharing.REQUEST_SHARE_START}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleRequestStartSharingEvent" arguments="{event}"/>
		</EventHandlers>

		<EventHandlers type="{RequestToStopSharing.REQUEST_SHARE_STOP}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleRequestStopSharingEvent"/>
		</EventHandlers>

		<EventHandlers type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleMadeViewerEvent" arguments="{event}"/>
		</EventHandlers>

		<EventHandlers type="{WebRTCStreamEvent.STOP}" >
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleStreamStoppedEvent"/>
		</EventHandlers>

		<EventHandlers type="{WebRTCViewStreamEvent.START}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleStreamStartEvent" arguments="{event}"/>
		</EventHandlers>

		<EventHandlers type="{WebRTCViewStreamEvent.STOP}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleStreamStopEvent" arguments="{event}"/>
		</EventHandlers>

		<EventHandlers type="{ShareStartedEvent.SHARE_STATED}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleScreenShareStartedEvent" arguments="{event}"/>
		</EventHandlers>

		<EventHandlers type="{IsSharingScreenEvent.IS_SCREENSHARING}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleIsSharingScreenEvent" arguments="{event}"/>
		</EventHandlers>

		<EventHandlers type="{WebRTCShareWindowEvent.CLOSE}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleShareWindowCloseEvent"/>
		</EventHandlers>

		<EventHandlers type="{ShareWindowEvent.CLOSE}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleRequestStopSharingEvent"/>
		</EventHandlers>

		<EventHandlers type="{StartedViewingEvent.STARTED_VIEWING_EVENT}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleStartedViewingEvent" arguments="{event.stream}"/>
		</EventHandlers>

		<EventHandlers type="{WebRTCViewWindowEvent.CLOSE}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleViewWindowCloseEvent"/>
		</EventHandlers>

		<EventHandlers type="{ModuleEvent.STOP}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleStopModuleEvent"/>
		</EventHandlers>

		<EventHandlers type="{ModuleEvent.START}">
			<MethodInvoker generator="{WebRTCDeskshareManager}" method="handleStartModuleEvent" arguments="{event.module}"/>
		</EventHandlers>
	</fx:Declarations>

</EventMap>
