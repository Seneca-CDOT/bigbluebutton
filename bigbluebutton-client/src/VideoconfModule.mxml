<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:Module xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:fx="http://ns.adobe.com/mxml/2009"
		   layout="absolute" width="400" height="300"
		   xmlns:maps="org.bigbluebutton.modules.videoconf.maps.*" implements="org.bigbluebutton.common.IBigBlueButtonModule">
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.common.IBigBlueButtonModule;
			import org.bigbluebutton.modules.videoconf.events.VideoModuleStartEvent;
			import org.bigbluebutton.modules.videoconf.events.VideoModuleStopEvent;
			
			private static const LOGGER:ILogger = getClassLogger(VideoconfModule);

			private var _moduleName:String = "Videoconf Module";			
			private var _attributes:Object; 
		
			private function onCreationComplete():void {
				LOGGER.debug("VideoconfModule initialized");	
			}
			
			public function get moduleName():String {
				return _moduleName;
			}
		
			
			public function start(attributes:Object):void {
				LOGGER.debug("Starting Video Module");
				_attributes = attributes;
				var globalDispatcher:Dispatcher = new Dispatcher();
				var event:VideoModuleStartEvent = new VideoModuleStartEvent(VideoModuleStartEvent.START);
				globalDispatcher.dispatchEvent(event);
			}
			
			public function stop():void {
				var globalDispatcher:Dispatcher = new Dispatcher();
				globalDispatcher.dispatchEvent(new VideoModuleStopEvent(VideoModuleStopEvent.STOP));
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<maps:VideoEventMap id="eventMap"/>
	</fx:Declarations>
</mx:Module>
